/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Rooms.Client;
using DocuSign.Rooms.Model;

namespace DocuSign.Rooms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a role.
        /// </summary>
        /// <remarks>
        /// Creates a new company role in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns></returns>
        Role CreateRole(string accountId, RoleForCreate body = null);

        /// <summary>
        /// Creates a role.
        /// </summary>
        /// <remarks>
        /// Creates a new company role in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Role> CreateRoleWithHttpInfo(string accountId, RoleForCreate body = null);
        /// <summary>
        /// Deletes the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Deletes a role from a company account in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns></returns>
        void DeleteRole(string accountId, int? roleId);

        /// <summary>
        /// Deletes the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Deletes a role from a company account in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoleWithHttpInfo(string accountId, int? roleId);
        /// <summary>
        /// Get information about the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Get information about the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        Role GetRole(string accountId, int? roleId, RolesApi.GetRoleOptions options = null);

        /// <summary>
        /// Get information about the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Get information about the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Role> GetRoleWithHttpInfo(string accountId, int? roleId, RolesApi.GetRoleOptions options = null);
        /// <summary>
        /// Gets a paged-list of roles in your company
        /// </summary>
        /// <remarks>
        /// Returns a list of roles associated with a company account
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        RoleSummaryList GetRoles(string accountId, RolesApi.GetRolesOptions options = null);

        /// <summary>
        /// Gets a paged-list of roles in your company
        /// </summary>
        /// <remarks>
        /// Returns a list of roles associated with a company account
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoleSummaryList> GetRolesWithHttpInfo(string accountId, RolesApi.GetRolesOptions options = null);
        /// <summary>
        /// Updates the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Updates the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns></returns>
        Role UpdateRole(string accountId, int? roleId, RoleForUpdate body = null);

        /// <summary>
        /// Updates the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Updates the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Role> UpdateRoleWithHttpInfo(string accountId, int? roleId, RoleForUpdate body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a role.
        /// </summary>
        /// <remarks>
        /// Creates a new company role in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> CreateRoleAsync(string accountId, RoleForCreate body = null);

        /// <summary>
        /// Creates a role.
        /// </summary>
        /// <remarks>
        /// Creates a new company role in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo(string accountId, RoleForCreate body = null);
        /// <summary>
        /// Deletes the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Deletes a role from a company account in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleAsync(string accountId, int? roleId);

        /// <summary>
        /// Deletes the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Deletes a role from a company account in Rooms
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo(string accountId, int? roleId);
        /// <summary>
        /// Get information about the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Get information about the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync(string accountId, int? roleId, RolesApi.GetRoleOptions options = null);

        /// <summary>
        /// Get information about the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Get information about the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo(string accountId, int? roleId, RolesApi.GetRoleOptions options = null);
        /// <summary>
        /// Gets a paged-list of roles in your company
        /// </summary>
        /// <remarks>
        /// Returns a list of roles associated with a company account
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoleSummaryList</returns>
        System.Threading.Tasks.Task<RoleSummaryList> GetRolesAsync(string accountId, RolesApi.GetRolesOptions options = null);

        /// <summary>
        /// Gets a paged-list of roles in your company
        /// </summary>
        /// <remarks>
        /// Returns a list of roles associated with a company account
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoleSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleSummaryList>> GetRolesAsyncWithHttpInfo(string accountId, RolesApi.GetRolesOptions options = null);
        /// <summary>
        /// Updates the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Updates the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> UpdateRoleAsync(string accountId, int? roleId, RoleForUpdate body = null);

        /// <summary>
        /// Updates the role with the given roleId.
        /// </summary>
        /// <remarks>
        /// Updates the role with the given roleId.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo(string accountId, int? roleId, RoleForUpdate body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private DocuSign.Rooms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public RolesApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Rooms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Creates a role. Creates a new company role in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns>Role</returns>
        public Role CreateRole(string accountId, RoleForCreate body = null)
        {
             ApiResponse<Role> localVarResponse = CreateRoleWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a role. Creates a new company role in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse<Role> CreateRoleWithHttpInfo(string accountId, RoleForCreate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->CreateRole");

            var localVarPath = "/v2/accounts/{accountId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Role)this.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Creates a role. Creates a new company role in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> CreateRoleAsync(string accountId, RoleForCreate body = null)
        {
             ApiResponse<Role> localVarResponse = await CreateRoleAsyncWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a role. Creates a new company role in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Name and permission details of the role to be created (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> CreateRoleAsyncWithHttpInfo(string accountId, RoleForCreate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->CreateRole");

            var localVarPath = "/v2/accounts/{accountId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("POST"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Role)this.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }


        /// <summary>
        /// Deletes the role with the given roleId. Deletes a role from a company account in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns></returns>
        public void DeleteRole(string accountId, int? roleId)
        {
             DeleteRoleWithHttpInfo(accountId, roleId);
        }

        /// <summary>
        /// Deletes the role with the given roleId. Deletes a role from a company account in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRoleWithHttpInfo(string accountId, int? roleId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->DeleteRole");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->DeleteRole");

            var localVarPath = "/v2/accounts/{accountId}/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleId != null) localVarPathParams.Add("roleId", this.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the role with the given roleId. Deletes a role from a company account in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleAsync(string accountId, int? roleId)
        {
             await DeleteRoleAsyncWithHttpInfo(accountId, roleId);
        }

        /// <summary>
        /// Deletes the role with the given roleId. Deletes a role from a company account in Rooms
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo(string accountId, int? roleId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->DeleteRole");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->DeleteRole");

            var localVarPath = "/v2/accounts/{accountId}/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleId != null) localVarPathParams.Add("roleId", this.ApiClient.ParameterToString(roleId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("DELETE"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRole", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get information about the role with the given roleId. Get information about the role with the given roleId.
        /// </summary>
        public class GetRoleOptions
        {
            /// When set to true, the response includes the &#x60;isAssigned&#x60; property, which specifies whether the role is currently assigned to any users. The default is false. 
            public bool? includeIsAssigned {get; set;}
        }

        /// <summary>
        /// Get information about the role with the given roleId. Get information about the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Role</returns>
        public Role GetRole(string accountId, int? roleId, RolesApi.GetRoleOptions options = null)
        {
             ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(accountId, roleId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the role with the given roleId. Get information about the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse<Role> GetRoleWithHttpInfo(string accountId, int? roleId, RolesApi.GetRoleOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->GetRole");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");

            var localVarPath = "/v2/accounts/{accountId}/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleId != null) localVarPathParams.Add("roleId", this.ApiClient.ParameterToString(roleId)); // path parameter
            if (options != null)
            {
                if (options.includeIsAssigned != null) localVarQueryParams.Add("includeIsAssigned", this.ApiClient.ParameterToString(options.includeIsAssigned)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Role)this.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Get information about the role with the given roleId. Get information about the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync(string accountId, int? roleId, RolesApi.GetRoleOptions options = null)
        {
             ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(accountId, roleId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the role with the given roleId. Get information about the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo(string accountId, int? roleId, RolesApi.GetRoleOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->GetRole");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->GetRole");

            var localVarPath = "/v2/accounts/{accountId}/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleId != null) localVarPathParams.Add("roleId", this.ApiClient.ParameterToString(roleId)); // path parameter
            if (options != null)
            {
                if (options.includeIsAssigned != null) localVarQueryParams.Add("includeIsAssigned", this.ApiClient.ParameterToString(options.includeIsAssigned)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Role)this.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Gets a paged-list of roles in your company Returns a list of roles associated with a company account
        /// </summary>
        public class GetRolesOptions
        {
            /// Returns assignable roles based on calling user&#39;s company permissions.               DEPRECATED: Please use filterContext parameter to get the assignable roles. AssignableRolesBasedOnCompanyPermissions returns same results as onlyAssignable&#x3D;true 
            public bool? onlyAssignable {get; set;}
            /// Attribute establishing filter context for roles being returned - AllRoles, AssignableRolesBasedOnCompanyPermissions, AssignableRolesBasedOnAllPermissions 
            public string filterContext {get; set;}
            /// A search filter that returns roles by the beginning of the role name. You can enter the beginning of the role name only to return all of the roles that begin with the text that you entered. 
            public string filter {get; set;}
            /// The starting zero-based index position of the result set. The default value is 0. 
            public int? startPosition {get; set;}
            /// The number of results to return. This value must be a number between &#x60;1&#x60; and &#x60;100&#x60; (default). 
            public int? count {get; set;}
        }

        /// <summary>
        /// Gets a paged-list of roles in your company Returns a list of roles associated with a company account
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>RoleSummaryList</returns>
        public RoleSummaryList GetRoles(string accountId, RolesApi.GetRolesOptions options = null)
        {
             ApiResponse<RoleSummaryList> localVarResponse = GetRolesWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a paged-list of roles in your company Returns a list of roles associated with a company account
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of RoleSummaryList</returns>
        public ApiResponse<RoleSummaryList> GetRolesWithHttpInfo(string accountId, RolesApi.GetRolesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->GetRoles");

            var localVarPath = "/v2/accounts/{accountId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.onlyAssignable != null) localVarQueryParams.Add("onlyAssignable", this.ApiClient.ParameterToString(options.onlyAssignable)); // query parameter
                if (options.filterContext != null) localVarQueryParams.Add("filterContext", this.ApiClient.ParameterToString(options.filterContext)); // query parameter
                if (options.filter != null) localVarQueryParams.Add("filter", this.ApiClient.ParameterToString(options.filter)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleSummaryList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RoleSummaryList)this.ApiClient.Deserialize(localVarResponse, typeof(RoleSummaryList)));
        }

        /// <summary>
        /// Gets a paged-list of roles in your company Returns a list of roles associated with a company account
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoleSummaryList</returns>
        public async System.Threading.Tasks.Task<RoleSummaryList> GetRolesAsync(string accountId, RolesApi.GetRolesOptions options = null)
        {
             ApiResponse<RoleSummaryList> localVarResponse = await GetRolesAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a paged-list of roles in your company Returns a list of roles associated with a company account
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoleSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleSummaryList>> GetRolesAsyncWithHttpInfo(string accountId, RolesApi.GetRolesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->GetRoles");

            var localVarPath = "/v2/accounts/{accountId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.onlyAssignable != null) localVarQueryParams.Add("onlyAssignable", this.ApiClient.ParameterToString(options.onlyAssignable)); // query parameter
                if (options.filterContext != null) localVarQueryParams.Add("filterContext", this.ApiClient.ParameterToString(options.filterContext)); // query parameter
                if (options.filter != null) localVarQueryParams.Add("filter", this.ApiClient.ParameterToString(options.filter)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("GET"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleSummaryList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (RoleSummaryList)this.ApiClient.Deserialize(localVarResponse, typeof(RoleSummaryList)));
        }


        /// <summary>
        /// Updates the role with the given roleId. Updates the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns>Role</returns>
        public Role UpdateRole(string accountId, int? roleId, RoleForUpdate body = null)
        {
             ApiResponse<Role> localVarResponse = UpdateRoleWithHttpInfo(accountId, roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the role with the given roleId. Updates the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse<Role> UpdateRoleWithHttpInfo(string accountId, int? roleId, RoleForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->UpdateRole");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");

            var localVarPath = "/v2/accounts/{accountId}/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleId != null) localVarPathParams.Add("roleId", this.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Role)this.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Updates the role with the given roleId. Updates the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> UpdateRoleAsync(string accountId, int? roleId, RoleForUpdate body = null)
        {
             ApiResponse<Role> localVarResponse = await UpdateRoleAsyncWithHttpInfo(accountId, roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the role with the given roleId. Updates the role with the given roleId.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="roleId">The id of the role.</param>
        /// <param name="body">Name and permission details of the role to be updated (optional)</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> UpdateRoleAsyncWithHttpInfo(string accountId, int? roleId, RoleForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RolesApi->UpdateRole");
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->UpdateRole");

            var localVarPath = "/v2/accounts/{accountId}/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roleId != null) localVarPathParams.Add("roleId", this.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, new HttpMethod("PUT"), localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (Role)this.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

    }
}