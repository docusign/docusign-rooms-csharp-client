/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using DocuSign.Rooms.Client;
using DocuSign.Rooms.Model;

namespace DocuSign.Rooms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFormGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assigns a form to a form group.
        /// </summary>
        /// <remarks>
        /// Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns></returns>
        FormGroupFormToAssign AssignFormGroupForm(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null);

        /// <summary>
        /// Assigns a form to a form group.
        /// </summary>
        /// <remarks>
        /// Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FormGroupFormToAssign> AssignFormGroupFormWithHttpInfo(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null);
        /// <summary>
        /// Creates a form group.
        /// </summary>
        /// <remarks>
        /// Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns></returns>
        FormGroup CreateFormGroup(string accountId, FormGroupForCreate body = null);

        /// <summary>
        /// Creates a form group.
        /// </summary>
        /// <remarks>
        /// Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FormGroup> CreateFormGroupWithHttpInfo(string accountId, FormGroupForCreate body = null);
        /// <summary>
        /// Deletes a form group.
        /// </summary>
        /// <remarks>
        /// Deletes the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns></returns>
        void DeleteFormGroup(string accountId, Guid? formGroupId);

        /// <summary>
        /// Deletes a form group.
        /// </summary>
        /// <remarks>
        /// Deletes the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFormGroupWithHttpInfo(string accountId, Guid? formGroupId);
        /// <summary>
        /// Gets a form group.
        /// </summary>
        /// <remarks>
        /// Get the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns></returns>
        FormGroup GetFormGroup(string accountId, Guid? formGroupId);

        /// <summary>
        /// Gets a form group.
        /// </summary>
        /// <remarks>
        /// Get the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FormGroup> GetFormGroupWithHttpInfo(string accountId, Guid? formGroupId);
        /// <summary>
        /// Get account Form Groups.
        /// </summary>
        /// <remarks>
        /// Returns the company form groups to which the current user has access.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        FormGroupSummaryList GetFormGroups(string accountId, FormGroupsApi.GetFormGroupsOptions options = null);

        /// <summary>
        /// Get account Form Groups.
        /// </summary>
        /// <remarks>
        /// Returns the company form groups to which the current user has access.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FormGroupSummaryList> GetFormGroupsWithHttpInfo(string accountId, FormGroupsApi.GetFormGroupsOptions options = null);
        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group.
        /// </summary>
        /// <remarks>
        /// \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns></returns>
        void GrantOfficeAccessToFormGroup(string accountId, Guid? formGroupId, int? officeId);

        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group.
        /// </summary>
        /// <remarks>
        /// \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GrantOfficeAccessToFormGroupWithHttpInfo(string accountId, Guid? formGroupId, int? officeId);
        /// <summary>
        /// Removes a form from a form group.
        /// </summary>
        /// <remarks>
        /// Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns></returns>
        void RemoveFormGroupForm(string accountId, Guid? formGroupId, Guid? formId);

        /// <summary>
        /// Removes a form from a form group.
        /// </summary>
        /// <remarks>
        /// Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveFormGroupFormWithHttpInfo(string accountId, Guid? formGroupId, Guid? formId);
        /// <summary>
        /// Renames a form group.
        /// </summary>
        /// <remarks>
        /// Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns></returns>
        FormGroup RenameFormGroup(string accountId, Guid? formGroupId, FormGroupForUpdate body = null);

        /// <summary>
        /// Renames a form group.
        /// </summary>
        /// <remarks>
        /// Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<FormGroup> RenameFormGroupWithHttpInfo(string accountId, Guid? formGroupId, FormGroupForUpdate body = null);
        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group.
        /// </summary>
        /// <remarks>
        /// Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns></returns>
        void RevokeOfficeAccessFromFormGroup(string accountId, Guid? formGroupId, int? officeId);

        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group.
        /// </summary>
        /// <remarks>
        /// Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOfficeAccessFromFormGroupWithHttpInfo(string accountId, Guid? formGroupId, int? officeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assigns a form to a form group.
        /// </summary>
        /// <remarks>
        /// Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns>Task of FormGroupFormToAssign</returns>
        System.Threading.Tasks.Task<FormGroupFormToAssign> AssignFormGroupFormAsync(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null);

        /// <summary>
        /// Assigns a form to a form group.
        /// </summary>
        /// <remarks>
        /// Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (FormGroupFormToAssign)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormGroupFormToAssign>> AssignFormGroupFormAsyncWithHttpInfo(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null);
        /// <summary>
        /// Creates a form group.
        /// </summary>
        /// <remarks>
        /// Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of FormGroup</returns>
        System.Threading.Tasks.Task<FormGroup> CreateFormGroupAsync(string accountId, FormGroupForCreate body = null);

        /// <summary>
        /// Creates a form group.
        /// </summary>
        /// <remarks>
        /// Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of ApiResponse (FormGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormGroup>> CreateFormGroupAsyncWithHttpInfo(string accountId, FormGroupForCreate body = null);
        /// <summary>
        /// Deletes a form group.
        /// </summary>
        /// <remarks>
        /// Deletes the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFormGroupAsync(string accountId, Guid? formGroupId);

        /// <summary>
        /// Deletes a form group.
        /// </summary>
        /// <remarks>
        /// Deletes the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId);
        /// <summary>
        /// Gets a form group.
        /// </summary>
        /// <remarks>
        /// Get the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of FormGroup</returns>
        System.Threading.Tasks.Task<FormGroup> GetFormGroupAsync(string accountId, Guid? formGroupId);

        /// <summary>
        /// Gets a form group.
        /// </summary>
        /// <remarks>
        /// Get the specified form group.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of ApiResponse (FormGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormGroup>> GetFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId);
        /// <summary>
        /// Get account Form Groups.
        /// </summary>
        /// <remarks>
        /// Returns the company form groups to which the current user has access.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FormGroupSummaryList</returns>
        System.Threading.Tasks.Task<FormGroupSummaryList> GetFormGroupsAsync(string accountId, FormGroupsApi.GetFormGroupsOptions options = null);

        /// <summary>
        /// Get account Form Groups.
        /// </summary>
        /// <remarks>
        /// Returns the company form groups to which the current user has access.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FormGroupSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormGroupSummaryList>> GetFormGroupsAsyncWithHttpInfo(string accountId, FormGroupsApi.GetFormGroupsOptions options = null);
        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group.
        /// </summary>
        /// <remarks>
        /// \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GrantOfficeAccessToFormGroupAsync(string accountId, Guid? formGroupId, int? officeId);

        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group.
        /// </summary>
        /// <remarks>
        /// \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GrantOfficeAccessToFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId, int? officeId);
        /// <summary>
        /// Removes a form from a form group.
        /// </summary>
        /// <remarks>
        /// Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveFormGroupFormAsync(string accountId, Guid? formGroupId, Guid? formId);

        /// <summary>
        /// Removes a form from a form group.
        /// </summary>
        /// <remarks>
        /// Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveFormGroupFormAsyncWithHttpInfo(string accountId, Guid? formGroupId, Guid? formId);
        /// <summary>
        /// Renames a form group.
        /// </summary>
        /// <remarks>
        /// Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of FormGroup</returns>
        System.Threading.Tasks.Task<FormGroup> RenameFormGroupAsync(string accountId, Guid? formGroupId, FormGroupForUpdate body = null);

        /// <summary>
        /// Renames a form group.
        /// </summary>
        /// <remarks>
        /// Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of ApiResponse (FormGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormGroup>> RenameFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId, FormGroupForUpdate body = null);
        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group.
        /// </summary>
        /// <remarks>
        /// Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOfficeAccessFromFormGroupAsync(string accountId, Guid? formGroupId, int? officeId);

        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group.
        /// </summary>
        /// <remarks>
        /// Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOfficeAccessFromFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId, int? officeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FormGroupsApi : IFormGroupsApi
    {
        private DocuSign.Rooms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FormGroupsApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public FormGroupsApi(DocuSignClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.GetBasePath();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public DocuSignClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Rooms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }


        /// <summary>
        /// Assigns a form to a form group. Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns>FormGroupFormToAssign</returns>
        public FormGroupFormToAssign AssignFormGroupForm(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null)
        {
             ApiResponse<FormGroupFormToAssign> localVarResponse = AssignFormGroupFormWithHttpInfo(accountId, formGroupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a form to a form group. Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns>ApiResponse of FormGroupFormToAssign</returns>
        public ApiResponse<FormGroupFormToAssign> AssignFormGroupFormWithHttpInfo(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->AssignFormGroupForm");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->AssignFormGroupForm");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/assign_form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignFormGroupForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroupFormToAssign>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroupFormToAssign)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroupFormToAssign)));
        }

        /// <summary>
        /// Assigns a form to a form group. Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns>Task of FormGroupFormToAssign</returns>
        public async System.Threading.Tasks.Task<FormGroupFormToAssign> AssignFormGroupFormAsync(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null)
        {
             ApiResponse<FormGroupFormToAssign> localVarResponse = await AssignFormGroupFormAsyncWithHttpInfo(accountId, formGroupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assigns a form to a form group. Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Assigns the form specified in the &#x60;formId&#x60; property of the request to the form group &#x60;formGroupId&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (FormGroupFormToAssign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormGroupFormToAssign>> AssignFormGroupFormAsyncWithHttpInfo(string accountId, Guid? formGroupId, FormGroupFormToAssign body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->AssignFormGroupForm");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->AssignFormGroupForm");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/assign_form";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignFormGroupForm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroupFormToAssign>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroupFormToAssign)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroupFormToAssign)));
        }


        /// <summary>
        /// Creates a form group. Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>FormGroup</returns>
        public FormGroup CreateFormGroup(string accountId, FormGroupForCreate body = null)
        {
             ApiResponse<FormGroup> localVarResponse = CreateFormGroupWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a form group. Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>ApiResponse of FormGroup</returns>
        public ApiResponse<FormGroup> CreateFormGroupWithHttpInfo(string accountId, FormGroupForCreate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->CreateFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroup>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroup)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroup)));
        }

        /// <summary>
        /// Creates a form group. Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of FormGroup</returns>
        public async System.Threading.Tasks.Task<FormGroup> CreateFormGroupAsync(string accountId, FormGroupForCreate body = null)
        {
             ApiResponse<FormGroup> localVarResponse = await CreateFormGroupAsyncWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a form group. Creates a new form group with the name given in the &#x60;name&#x60; property of the request body.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of ApiResponse (FormGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormGroup>> CreateFormGroupAsyncWithHttpInfo(string accountId, FormGroupForCreate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->CreateFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroup>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroup)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroup)));
        }


        /// <summary>
        /// Deletes a form group. Deletes the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns></returns>
        public void DeleteFormGroup(string accountId, Guid? formGroupId)
        {
             DeleteFormGroupWithHttpInfo(accountId, formGroupId);
        }

        /// <summary>
        /// Deletes a form group. Deletes the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFormGroupWithHttpInfo(string accountId, Guid? formGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->DeleteFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->DeleteFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a form group. Deletes the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFormGroupAsync(string accountId, Guid? formGroupId)
        {
             await DeleteFormGroupAsyncWithHttpInfo(accountId, formGroupId);
        }

        /// <summary>
        /// Deletes a form group. Deletes the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->DeleteFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->DeleteFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Delete, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Gets a form group. Get the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>FormGroup</returns>
        public FormGroup GetFormGroup(string accountId, Guid? formGroupId)
        {
             ApiResponse<FormGroup> localVarResponse = GetFormGroupWithHttpInfo(accountId, formGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a form group. Get the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>ApiResponse of FormGroup</returns>
        public ApiResponse<FormGroup> GetFormGroupWithHttpInfo(string accountId, Guid? formGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->GetFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->GetFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroup>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroup)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroup)));
        }

        /// <summary>
        /// Gets a form group. Get the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of FormGroup</returns>
        public async System.Threading.Tasks.Task<FormGroup> GetFormGroupAsync(string accountId, Guid? formGroupId)
        {
             ApiResponse<FormGroup> localVarResponse = await GetFormGroupAsyncWithHttpInfo(accountId, formGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a form group. Get the specified form group.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <returns>Task of ApiResponse (FormGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormGroup>> GetFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->GetFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->GetFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroup>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroup)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroup)));
        }

        /// <summary>
        /// Get account Form Groups. Returns the company form groups to which the current user has access.
        /// </summary>
        public class GetFormGroupsOptions
        {
            /// Number of Form Groups to include in the response, (Default 100). 
            public int? count {get; set;}
            /// Position in the overall list of Form Groups to begin results. 
            public int? startPosition {get; set;}
        }

        /// <summary>
        /// Get account Form Groups. Returns the company form groups to which the current user has access.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>FormGroupSummaryList</returns>
        public FormGroupSummaryList GetFormGroups(string accountId, FormGroupsApi.GetFormGroupsOptions options = null)
        {
             ApiResponse<FormGroupSummaryList> localVarResponse = GetFormGroupsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account Form Groups. Returns the company form groups to which the current user has access.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of FormGroupSummaryList</returns>
        public ApiResponse<FormGroupSummaryList> GetFormGroupsWithHttpInfo(string accountId, FormGroupsApi.GetFormGroupsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->GetFormGroups");

            var localVarPath = "/v2/accounts/{accountId}/form_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroupSummaryList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroupSummaryList)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroupSummaryList)));
        }

        /// <summary>
        /// Get account Form Groups. Returns the company form groups to which the current user has access.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of FormGroupSummaryList</returns>
        public async System.Threading.Tasks.Task<FormGroupSummaryList> GetFormGroupsAsync(string accountId, FormGroupsApi.GetFormGroupsOptions options = null)
        {
             ApiResponse<FormGroupSummaryList> localVarResponse = await GetFormGroupsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account Form Groups. Returns the company form groups to which the current user has access.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (FormGroupSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormGroupSummaryList>> GetFormGroupsAsyncWithHttpInfo(string accountId, FormGroupsApi.GetFormGroupsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->GetFormGroups");

            var localVarPath = "/v2/accounts/{accountId}/form_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Get, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroupSummaryList>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroupSummaryList)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroupSummaryList)));
        }


        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group. \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns></returns>
        public void GrantOfficeAccessToFormGroup(string accountId, Guid? formGroupId, int? officeId)
        {
             GrantOfficeAccessToFormGroupWithHttpInfo(accountId, formGroupId, officeId);
        }

        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group. \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GrantOfficeAccessToFormGroupWithHttpInfo(string accountId, Guid? formGroupId, int? officeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->GrantOfficeAccessToFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->GrantOfficeAccessToFormGroup");
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling FormGroupsApi->GrantOfficeAccessToFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/grant_office_access/{officeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (officeId != null) localVarPathParams.Add("officeId", this.ApiClient.ParameterToString(officeId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantOfficeAccessToFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group. \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GrantOfficeAccessToFormGroupAsync(string accountId, Guid? formGroupId, int? officeId)
        {
             await GrantOfficeAccessToFormGroupAsyncWithHttpInfo(accountId, formGroupId, officeId);
        }

        /// <summary>
        /// Assign office to a form group so the specified office has access to the form group. \&quot;Grants the office &#x60;officeId&#x60; access to the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GrantOfficeAccessToFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId, int? officeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->GrantOfficeAccessToFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->GrantOfficeAccessToFormGroup");
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling FormGroupsApi->GrantOfficeAccessToFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/grant_office_access/{officeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (officeId != null) localVarPathParams.Add("officeId", this.ApiClient.ParameterToString(officeId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantOfficeAccessToFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Removes a form from a form group. Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns></returns>
        public void RemoveFormGroupForm(string accountId, Guid? formGroupId, Guid? formId)
        {
             RemoveFormGroupFormWithHttpInfo(accountId, formGroupId, formId);
        }

        /// <summary>
        /// Removes a form from a form group. Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveFormGroupFormWithHttpInfo(string accountId, Guid? formGroupId, Guid? formId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->RemoveFormGroupForm");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->RemoveFormGroupForm");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormGroupsApi->RemoveFormGroupForm");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/unassign_form/{formId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.ApiClient.ParameterToString(formId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFormGroupForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a form from a form group. Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveFormGroupFormAsync(string accountId, Guid? formGroupId, Guid? formId)
        {
             await RemoveFormGroupFormAsyncWithHttpInfo(accountId, formGroupId, formId);
        }

        /// <summary>
        /// Removes a form from a form group. Removes the form &#x60;formId&#x60; from the form group &#x60;formGroupId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="formId">The id of the form.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveFormGroupFormAsyncWithHttpInfo(string accountId, Guid? formGroupId, Guid? formId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->RemoveFormGroupForm");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->RemoveFormGroupForm");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling FormGroupsApi->RemoveFormGroupForm");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/unassign_form/{formId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.ApiClient.ParameterToString(formId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveFormGroupForm", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Renames a form group. Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>FormGroup</returns>
        public FormGroup RenameFormGroup(string accountId, Guid? formGroupId, FormGroupForUpdate body = null)
        {
             ApiResponse<FormGroup> localVarResponse = RenameFormGroupWithHttpInfo(accountId, formGroupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renames a form group. Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>ApiResponse of FormGroup</returns>
        public ApiResponse<FormGroup> RenameFormGroupWithHttpInfo(string accountId, Guid? formGroupId, FormGroupForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->RenameFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->RenameFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroup>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroup)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroup)));
        }

        /// <summary>
        /// Renames a form group. Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of FormGroup</returns>
        public async System.Threading.Tasks.Task<FormGroup> RenameFormGroupAsync(string accountId, Guid? formGroupId, FormGroupForUpdate body = null)
        {
             ApiResponse<FormGroup> localVarResponse = await RenameFormGroupAsyncWithHttpInfo(accountId, formGroupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renames a form group. Renames the specified form group with the name given in the &#x60;name&#x60; property of the request.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="body">Required input of name for the form group (optional)</param>
        /// <returns>Task of ApiResponse (FormGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FormGroup>> RenameFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId, FormGroupForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->RenameFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->RenameFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Put, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FormGroup>(localVarStatusCode, 
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()), 
                (FormGroup)this.ApiClient.Deserialize(localVarResponse, typeof(FormGroup)));
        }


        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group. Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns></returns>
        public void RevokeOfficeAccessFromFormGroup(string accountId, Guid? formGroupId, int? officeId)
        {
             RevokeOfficeAccessFromFormGroupWithHttpInfo(accountId, formGroupId, officeId);
        }

        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group. Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeOfficeAccessFromFormGroupWithHttpInfo(string accountId, Guid? formGroupId, int? officeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->RevokeOfficeAccessFromFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->RevokeOfficeAccessFromFormGroup");
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling FormGroupsApi->RevokeOfficeAccessFromFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/revoke_office_access/{officeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (officeId != null) localVarPathParams.Add("officeId", this.ApiClient.ParameterToString(officeId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = this.ApiClient.CallApi(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOfficeAccessFromFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group. Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOfficeAccessFromFormGroupAsync(string accountId, Guid? formGroupId, int? officeId)
        {
             await RevokeOfficeAccessFromFormGroupAsyncWithHttpInfo(accountId, formGroupId, officeId);
        }

        /// <summary>
        /// Remove office to a form group so the specified office doesn&#39;t have access to the form group. Revoke access to the form group &#x60;formGroupId&#x60; from the office &#x60;officeId&#x60;.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="formGroupId">The ID of the form group.</param>
        /// <param name="officeId">The id of the office. This is the id that the system generated when you created the office.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOfficeAccessFromFormGroupAsyncWithHttpInfo(string accountId, Guid? formGroupId, int? officeId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling FormGroupsApi->RevokeOfficeAccessFromFormGroup");
            // verify the required parameter 'formGroupId' is set
            if (formGroupId == null)
                throw new ApiException(400, "Missing required parameter 'formGroupId' when calling FormGroupsApi->RevokeOfficeAccessFromFormGroup");
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling FormGroupsApi->RevokeOfficeAccessFromFormGroup");

            var localVarPath = "/v2/accounts/{accountId}/form_groups/{formGroupId}/revoke_office_access/{officeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new List<FileParameter>();
            Object localVarPostBody = null;
            String localVarHttpContentDisposition = string.Empty;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (formGroupId != null) localVarPathParams.Add("formGroupId", this.ApiClient.ParameterToString(formGroupId)); // path parameter
            if (officeId != null) localVarPathParams.Add("officeId", this.ApiClient.ParameterToString(officeId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }


            // make the HTTP request
            DocuSignRequest localVarRequest = this.ApiClient.PrepareRequest(localVarPath, HttpMethod.Post, localVarQueryParams.ToList(), localVarPostBody, localVarHeaderParams.ToList(), localVarFormParams.ToList(), localVarPathParams.ToList(), localVarFileParams, localVarHttpContentType, localVarHttpContentDisposition);
            DocuSignResponse localVarResponse = await this.ApiClient.CallApiAsync(localVarRequest);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOfficeAccessFromFormGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}