/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocuSign.Rooms.Client;
using DocuSign.Rooms.Model;

namespace DocuSign.Rooms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoomsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a document to a room.
        /// </summary>
        /// <remarks>
        /// Add a document to a room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        RoomDocument AddDocumentToRoom (string accountId, int? roomId, Document body = null);

        /// <summary>
        /// Add a document to a room.
        /// </summary>
        /// <remarks>
        /// Add a document to a room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomDocument> AddDocumentToRoomWithHttpInfo (string accountId, int? roomId, Document body = null);
        /// <summary>
        /// Add a document to a room via file contents upload.
        /// </summary>
        /// <remarks>
        /// This method uploads the contents of file as a room document for the room that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        


        /// <returns></returns>
        RoomDocument AddDocumentToRoomViaFileUpload (string accountId, int? roomId, byte[] file);

        /// <summary>
        /// Add a document to a room via file contents upload.
        /// </summary>
        /// <remarks>
        /// This method uploads the contents of file as a room document for the room that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        


        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomDocument> AddDocumentToRoomViaFileUploadWithHttpInfo (string accountId, int? roomId, byte[] file);
        /// <summary>
        /// Adds a DocuSign Form to a room
        /// </summary>
        /// <remarks>
        /// Adds a form to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        RoomDocument AddFormToRoom (string accountId, int? roomId, FormForAdd body = null);

        /// <summary>
        /// Adds a DocuSign Form to a room
        /// </summary>
        /// <remarks>
        /// Adds a form to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomDocument> AddFormToRoomWithHttpInfo (string accountId, int? roomId, FormForAdd body = null);
        /// <summary>
        /// Creates a new Room
        /// </summary>
        /// <remarks>
        /// Creates a new Room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        Room CreateRoom (string accountId, RoomForCreate body = null);

        /// <summary>
        /// Creates a new Room
        /// </summary>
        /// <remarks>
        /// Creates a new Room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<Room> CreateRoomWithHttpInfo (string accountId, RoomForCreate body = null);
        /// <summary>
        /// Deletes the room having the given room ID.
        /// </summary>
        /// <remarks>
        /// Deletes the room having the given room ID.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns></returns>
        void DeleteRoom (string accountId, int? roomId);

        /// <summary>
        /// Deletes the room having the given room ID.
        /// </summary>
        /// <remarks>
        /// Deletes the room having the given room ID.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoomWithHttpInfo (string accountId, int? roomId);
        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees.
        /// </summary>
        /// <remarks>
        /// This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        AssignableRoles GetAssignableRoles (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null);

        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees.
        /// </summary>
        /// <remarks>
        /// This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<AssignableRoles> GetAssignableRolesWithHttpInfo (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null);
        /// <summary>
        /// Get documents in the room accessible to the calling user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of documents that the current user can access for a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        RoomDocumentList GetDocuments (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null);

        /// <summary>
        /// Get documents in the room accessible to the calling user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of documents that the current user can access for a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomDocumentList> GetDocumentsWithHttpInfo (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null);
        /// <summary>
        /// Gets information about the given room.
        /// </summary>
        /// <remarks>
        /// Returns details about the given room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        Room GetRoom (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null);

        /// <summary>
        /// Gets information about the given room.
        /// </summary>
        /// <remarks>
        /// Returns details about the given room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<Room> GetRoomWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null);
        /// <summary>
        /// Returns the FieldData associated with the provided roomId.
        /// </summary>
        /// <remarks>
        /// Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns></returns>
        FieldData GetRoomFieldData (string accountId, int? roomId);

        /// <summary>
        /// Returns the FieldData associated with the provided roomId.
        /// </summary>
        /// <remarks>
        /// Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<FieldData> GetRoomFieldDataWithHttpInfo (string accountId, int? roomId);
        /// <summary>
        /// Gets the field set associated with the room.
        /// </summary>
        /// <remarks>
        /// Returns the field set that a room uses.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns></returns>
        FieldSet GetRoomFieldSet (string accountId, int? roomId);

        /// <summary>
        /// Gets the field set associated with the room.
        /// </summary>
        /// <remarks>
        /// Returns the field set that a room uses.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<FieldSet> GetRoomFieldSetWithHttpInfo (string accountId, int? roomId);
        /// <summary>
        /// Retrieves the list of users in the given room.
        /// </summary>
        /// <remarks>
        /// This method returns a list of users associated with a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        RoomUsersResult GetRoomUsers (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null);

        /// <summary>
        /// Retrieves the list of users in the given room.
        /// </summary>
        /// <remarks>
        /// This method returns a list of users associated with a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomUsersResult> GetRoomUsersWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null);
        /// <summary>
        /// Gets rooms available to the calling user.
        /// </summary>
        /// <remarks>
        /// Gets rooms available to the calling user
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns></returns>
        RoomSummaryList GetRooms (string accountId, RoomsApi.GetRoomsOptions options = null);

        /// <summary>
        /// Gets rooms available to the calling user.
        /// </summary>
        /// <remarks>
        /// Gets rooms available to the calling user
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomSummaryList> GetRoomsWithHttpInfo (string accountId, RoomsApi.GetRoomsOptions options = null);
        /// <summary>
        /// Invites a user to the room by email address.
        /// </summary>
        /// <remarks>
        /// This method invites an existing or new member to a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        RoomInviteResponse InviteUser (string accountId, int? roomId, RoomInvite body = null);

        /// <summary>
        /// Invites a user to the room by email address.
        /// </summary>
        /// <remarks>
        /// This method invites an existing or new member to a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomInviteResponse> InviteUserWithHttpInfo (string accountId, int? roomId, RoomInvite body = null);
        /// <summary>
        /// Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <remarks>
        /// Updates the specified user&#39;s role and transaction side.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        RoomUser PutRoomUser (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null);

        /// <summary>
        /// Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <remarks>
        /// Updates the specified user&#39;s role and transaction side.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomUser> PutRoomUserWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null);
        /// <summary>
        /// Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Restores the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns></returns>
        void RestoreRoomUserAccess (string accountId, int? roomId, int? userId);

        /// <summary>
        /// Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Restores the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreRoomUserAccessWithHttpInfo (string accountId, int? roomId, int? userId);
        /// <summary>
        /// Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Revokes the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        void RevokeRoomUserAccess (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null);

        /// <summary>
        /// Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Revokes the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeRoomUserAccessWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null);
        /// <summary>
        /// Update the picture for a room.
        /// </summary>
        /// <remarks>
        /// This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        
        /// <returns></returns>
        RoomPicture UpdatePicture (string accountId, int? roomId, byte[] file, string fileName = "file.jpg");

        /// <summary>
        /// Update the picture for a room.
        /// </summary>
        /// <remarks>
        /// This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<RoomPicture> UpdatePictureWithHttpInfo (string accountId, int? roomId, byte[] file, string fileName = "file.jpg");
        /// <summary>
        /// Updates room field data.
        /// </summary>
        /// <remarks>
        /// Updates room field data.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        FieldData UpdateRoomFieldData (string accountId, int? roomId, FieldDataForUpdate body = null);

        /// <summary>
        /// Updates room field data.
        /// </summary>
        /// <remarks>
        /// Updates room field data.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<FieldData> UpdateRoomFieldDataWithHttpInfo (string accountId, int? roomId, FieldDataForUpdate body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a document to a room.
        /// </summary>
        /// <remarks>
        /// Add a document to a room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomDocument</returns>
        System.Threading.Tasks.Task<RoomDocument> AddDocumentToRoomAsync (string accountId, int? roomId, Document body = null);

        /// <summary>
        /// Add a document to a room.
        /// </summary>
        /// <remarks>
        /// Add a document to a room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomDocument>> AddDocumentToRoomAsyncWithHttpInfo (string accountId, int? roomId, Document body = null);
        /// <summary>
        /// Add a document to a room via file contents upload.
        /// </summary>
        /// <remarks>
        /// This method uploads the contents of file as a room document for the room that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        


        /// <returns>Task of RoomDocument</returns>
        System.Threading.Tasks.Task<RoomDocument> AddDocumentToRoomViaFileUploadAsync (string accountId, int? roomId, byte[] file);

        /// <summary>
        /// Add a document to a room via file contents upload.
        /// </summary>
        /// <remarks>
        /// This method uploads the contents of file as a room document for the room that you specify.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        


        /// <returns>Task of ApiResponse (RoomDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomDocument>> AddDocumentToRoomViaFileUploadAsyncWithHttpInfo (string accountId, int? roomId, byte[] file);
        /// <summary>
        /// Adds a DocuSign Form to a room
        /// </summary>
        /// <remarks>
        /// Adds a form to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomDocument</returns>
        System.Threading.Tasks.Task<RoomDocument> AddFormToRoomAsync (string accountId, int? roomId, FormForAdd body = null);

        /// <summary>
        /// Adds a DocuSign Form to a room
        /// </summary>
        /// <remarks>
        /// Adds a form to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomDocument>> AddFormToRoomAsyncWithHttpInfo (string accountId, int? roomId, FormForAdd body = null);
        /// <summary>
        /// Creates a new Room
        /// </summary>
        /// <remarks>
        /// Creates a new Room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of Room</returns>
        System.Threading.Tasks.Task<Room> CreateRoomAsync (string accountId, RoomForCreate body = null);

        /// <summary>
        /// Creates a new Room
        /// </summary>
        /// <remarks>
        /// Creates a new Room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (Room)</returns>
        System.Threading.Tasks.Task<ApiResponse<Room>> CreateRoomAsyncWithHttpInfo (string accountId, RoomForCreate body = null);
        /// <summary>
        /// Deletes the room having the given room ID.
        /// </summary>
        /// <remarks>
        /// Deletes the room having the given room ID.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoomAsync (string accountId, int? roomId);

        /// <summary>
        /// Deletes the room having the given room ID.
        /// </summary>
        /// <remarks>
        /// Deletes the room having the given room ID.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoomAsyncWithHttpInfo (string accountId, int? roomId);
        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees.
        /// </summary>
        /// <remarks>
        /// This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssignableRoles</returns>
        System.Threading.Tasks.Task<AssignableRoles> GetAssignableRolesAsync (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null);

        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees.
        /// </summary>
        /// <remarks>
        /// This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssignableRoles)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssignableRoles>> GetAssignableRolesAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null);
        /// <summary>
        /// Get documents in the room accessible to the calling user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of documents that the current user can access for a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoomDocumentList</returns>
        System.Threading.Tasks.Task<RoomDocumentList> GetDocumentsAsync (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null);

        /// <summary>
        /// Get documents in the room accessible to the calling user.
        /// </summary>
        /// <remarks>
        /// This method returns a list of documents that the current user can access for a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoomDocumentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomDocumentList>> GetDocumentsAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null);
        /// <summary>
        /// Gets information about the given room.
        /// </summary>
        /// <remarks>
        /// Returns details about the given room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Room</returns>
        System.Threading.Tasks.Task<Room> GetRoomAsync (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null);

        /// <summary>
        /// Gets information about the given room.
        /// </summary>
        /// <remarks>
        /// Returns details about the given room
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Room)</returns>
        System.Threading.Tasks.Task<ApiResponse<Room>> GetRoomAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null);
        /// <summary>
        /// Returns the FieldData associated with the provided roomId.
        /// </summary>
        /// <remarks>
        /// Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of FieldData</returns>
        System.Threading.Tasks.Task<FieldData> GetRoomFieldDataAsync (string accountId, int? roomId);

        /// <summary>
        /// Returns the FieldData associated with the provided roomId.
        /// </summary>
        /// <remarks>
        /// Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of ApiResponse (FieldData)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldData>> GetRoomFieldDataAsyncWithHttpInfo (string accountId, int? roomId);
        /// <summary>
        /// Gets the field set associated with the room.
        /// </summary>
        /// <remarks>
        /// Returns the field set that a room uses.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of FieldSet</returns>
        System.Threading.Tasks.Task<FieldSet> GetRoomFieldSetAsync (string accountId, int? roomId);

        /// <summary>
        /// Gets the field set associated with the room.
        /// </summary>
        /// <remarks>
        /// Returns the field set that a room uses.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of ApiResponse (FieldSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldSet>> GetRoomFieldSetAsyncWithHttpInfo (string accountId, int? roomId);
        /// <summary>
        /// Retrieves the list of users in the given room.
        /// </summary>
        /// <remarks>
        /// This method returns a list of users associated with a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoomUsersResult</returns>
        System.Threading.Tasks.Task<RoomUsersResult> GetRoomUsersAsync (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null);

        /// <summary>
        /// Retrieves the list of users in the given room.
        /// </summary>
        /// <remarks>
        /// This method returns a list of users associated with a room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoomUsersResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomUsersResult>> GetRoomUsersAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null);
        /// <summary>
        /// Gets rooms available to the calling user.
        /// </summary>
        /// <remarks>
        /// Gets rooms available to the calling user
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoomSummaryList</returns>
        System.Threading.Tasks.Task<RoomSummaryList> GetRoomsAsync (string accountId, RoomsApi.GetRoomsOptions options = null);

        /// <summary>
        /// Gets rooms available to the calling user.
        /// </summary>
        /// <remarks>
        /// Gets rooms available to the calling user
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoomSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomSummaryList>> GetRoomsAsyncWithHttpInfo (string accountId, RoomsApi.GetRoomsOptions options = null);
        /// <summary>
        /// Invites a user to the room by email address.
        /// </summary>
        /// <remarks>
        /// This method invites an existing or new member to a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomInviteResponse</returns>
        System.Threading.Tasks.Task<RoomInviteResponse> InviteUserAsync (string accountId, int? roomId, RoomInvite body = null);

        /// <summary>
        /// Invites a user to the room by email address.
        /// </summary>
        /// <remarks>
        /// This method invites an existing or new member to a specific room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomInviteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomInviteResponse>> InviteUserAsyncWithHttpInfo (string accountId, int? roomId, RoomInvite body = null);
        /// <summary>
        /// Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <remarks>
        /// Updates the specified user&#39;s role and transaction side.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomUser</returns>
        System.Threading.Tasks.Task<RoomUser> PutRoomUserAsync (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null);

        /// <summary>
        /// Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <remarks>
        /// Updates the specified user&#39;s role and transaction side.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomUser>> PutRoomUserAsyncWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null);
        /// <summary>
        /// Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Restores the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreRoomUserAccessAsync (string accountId, int? roomId, int? userId);

        /// <summary>
        /// Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Restores the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreRoomUserAccessAsyncWithHttpInfo (string accountId, int? roomId, int? userId);
        /// <summary>
        /// Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Revokes the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeRoomUserAccessAsync (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null);

        /// <summary>
        /// Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <remarks>
        /// Revokes the specified user&#39;s access to the room.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRoomUserAccessAsyncWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null);
        /// <summary>
        /// Update the picture for a room.
        /// </summary>
        /// <remarks>
        /// This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        


        /// <returns>Task of RoomPicture</returns>
        System.Threading.Tasks.Task<RoomPicture> UpdatePictureAsync (string accountId, int? roomId, byte[] file, string fileName = "file.jpg");

        /// <summary>
        /// Update the picture for a room.
        /// </summary>
        /// <remarks>
        /// This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        


        /// <returns>Task of ApiResponse (RoomPicture)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomPicture>> UpdatePictureAsyncWithHttpInfo (string accountId, int? roomId, byte[] file, string fileName = "file.jpg");
        /// <summary>
        /// Updates room field data.
        /// </summary>
        /// <remarks>
        /// Updates room field data.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of FieldData</returns>
        System.Threading.Tasks.Task<FieldData> UpdateRoomFieldDataAsync (string accountId, int? roomId, FieldDataForUpdate body = null);

        /// <summary>
        /// Updates room field data.
        /// </summary>
        /// <remarks>
        /// Updates room field data.
        /// </remarks>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (FieldData)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldData>> UpdateRoomFieldDataAsyncWithHttpInfo (string accountId, int? roomId, FieldDataForUpdate body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoomsApi : IRoomsApi
    {
        private DocuSign.Rooms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomsApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public RoomsApi(ApiClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.Rooms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Add a document to a room. Add a document to a room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>RoomDocument</returns>
        public RoomDocument AddDocumentToRoom (string accountId, int? roomId, Document body = null)
        {
             ApiResponse<RoomDocument> localVarResponse = AddDocumentToRoomWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a document to a room. Add a document to a room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of RoomDocument</returns>
        public ApiResponse< RoomDocument > AddDocumentToRoomWithHttpInfo (string accountId, int? roomId, Document body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->AddDocumentToRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->AddDocumentToRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentToRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomDocument>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocument) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomDocument)));
            }
            else
            {
                return new ApiResponse<RoomDocument>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocument) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocument)));
            }
            
        }

        /// <summary>
        /// Add a document to a room. Add a document to a room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomDocument</returns>
        public async System.Threading.Tasks.Task<RoomDocument> AddDocumentToRoomAsync (string accountId, int? roomId, Document body = null)
        {
             ApiResponse<RoomDocument> localVarResponse = await AddDocumentToRoomAsyncWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a document to a room. Add a document to a room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomDocument>> AddDocumentToRoomAsyncWithHttpInfo (string accountId, int? roomId, Document body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->AddDocumentToRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->AddDocumentToRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentToRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomDocument) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocument)));
            
        }



        /// <summary>
        /// Add a document to a room via file contents upload. This method uploads the contents of file as a room document for the room that you specify.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        


        /// <returns>RoomDocument</returns>
        public RoomDocument AddDocumentToRoomViaFileUpload (string accountId, int? roomId, byte[] file)
        {
             ApiResponse<RoomDocument> localVarResponse = AddDocumentToRoomViaFileUploadWithHttpInfo(accountId, roomId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a document to a room via file contents upload. This method uploads the contents of file as a room document for the room that you specify.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        


        /// <returns>ApiResponse of RoomDocument</returns>
        public ApiResponse< RoomDocument > AddDocumentToRoomViaFileUploadWithHttpInfo (string accountId, int? roomId, byte[] file)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->AddDocumentToRoomViaFileUpload");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->AddDocumentToRoomViaFileUpload");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/documents/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (file != null && file.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(file); // http body (model) parameter	
            }
            else
            {
                localVarPostBody = file; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentToRoomViaFileUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomDocument>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocument) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomDocument)));
            }
            else
            {
                return new ApiResponse<RoomDocument>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocument) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocument)));
            }
            
        }

        /// <summary>
        /// Add a document to a room via file contents upload. This method uploads the contents of file as a room document for the room that you specify.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        


        /// <returns>Task of RoomDocument</returns>
        public async System.Threading.Tasks.Task<RoomDocument> AddDocumentToRoomViaFileUploadAsync (string accountId, int? roomId, byte[] file)
        {
             ApiResponse<RoomDocument> localVarResponse = await AddDocumentToRoomViaFileUploadAsyncWithHttpInfo(accountId, roomId, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a document to a room via file contents upload. This method uploads the contents of file as a room document for the room that you specify.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="file"></param>
        
        /// <returns>Task of ApiResponse (RoomDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomDocument>> AddDocumentToRoomViaFileUploadAsyncWithHttpInfo (string accountId, int? roomId, byte[] file)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->AddDocumentToRoomViaFileUpload");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->AddDocumentToRoomViaFileUpload");
            
            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/documents/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (file != null && file.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(file); // http body (model) parameter	
            }
            else
            {
                localVarPostBody = file; // byte array	
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentToRoomViaFileUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomDocument) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocument)));
            
        }



        /// <summary>
        /// Adds a DocuSign Form to a room Adds a form to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>RoomDocument</returns>
        public RoomDocument AddFormToRoom (string accountId, int? roomId, FormForAdd body = null)
        {
             ApiResponse<RoomDocument> localVarResponse = AddFormToRoomWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a DocuSign Form to a room Adds a form to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of RoomDocument</returns>
        public ApiResponse< RoomDocument > AddFormToRoomWithHttpInfo (string accountId, int? roomId, FormForAdd body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->AddFormToRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->AddFormToRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/forms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFormToRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomDocument>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocument) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomDocument)));
            }
            else
            {
                return new ApiResponse<RoomDocument>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocument) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocument)));
            }
            
        }

        /// <summary>
        /// Adds a DocuSign Form to a room Adds a form to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomDocument</returns>
        public async System.Threading.Tasks.Task<RoomDocument> AddFormToRoomAsync (string accountId, int? roomId, FormForAdd body = null)
        {
             ApiResponse<RoomDocument> localVarResponse = await AddFormToRoomAsyncWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a DocuSign Form to a room Adds a form to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">Id of the room to which the DocuSign Form is being added</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomDocument)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomDocument>> AddFormToRoomAsyncWithHttpInfo (string accountId, int? roomId, FormForAdd body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->AddFormToRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->AddFormToRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/forms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFormToRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomDocument) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocument)));
            
        }



        /// <summary>
        /// Creates a new Room Creates a new Room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Room</returns>
        public Room CreateRoom (string accountId, RoomForCreate body = null)
        {
             ApiResponse<Room> localVarResponse = CreateRoomWithHttpInfo(accountId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Room Creates a new Room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of Room</returns>
        public ApiResponse< Room > CreateRoomWithHttpInfo (string accountId, RoomForCreate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->CreateRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<Room>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Room) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(Room)));
            }
            else
            {
                return new ApiResponse<Room>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Room) this.ApiClient.Deserialize(localVarResponse, typeof(Room)));
            }
            
        }

        /// <summary>
        /// Creates a new Room Creates a new Room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of Room</returns>
        public async System.Threading.Tasks.Task<Room> CreateRoomAsync (string accountId, RoomForCreate body = null)
        {
             ApiResponse<Room> localVarResponse = await CreateRoomAsyncWithHttpInfo(accountId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Room Creates a new Room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (Room)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Room>> CreateRoomAsyncWithHttpInfo (string accountId, RoomForCreate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->CreateRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Room>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Room) this.ApiClient.Deserialize(localVarResponse, typeof(Room)));
            
        }



        /// <summary>
        /// Deletes the room having the given room ID. Deletes the room having the given room ID.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns></returns>
        public void DeleteRoom (string accountId, int? roomId)
        {
             DeleteRoomWithHttpInfo(accountId, roomId);
        }

        /// <summary>
        /// Deletes the room having the given room ID. Deletes the room having the given room ID.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRoomWithHttpInfo (string accountId, int? roomId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->DeleteRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->DeleteRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the room having the given room ID. Deletes the room having the given room ID.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoomAsync (string accountId, int? roomId)
        {
             await DeleteRoomAsyncWithHttpInfo(accountId, roomId);

        }

        /// <summary>
        /// Deletes the room having the given room ID. Deletes the room having the given room ID.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room to be deleted.</param>
        
        
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoomAsyncWithHttpInfo (string accountId, int? roomId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->DeleteRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->DeleteRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }


        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees. This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </summary>
        public class GetAssignableRolesOptions
        {
            /// Optional parameter indicating to only return roles (internal/external) assignable to this user. 
            public string assigneeEmail {get; set;}
            /// A search filter that returns assignable roles by the beginning of the role name. 
            public string filter {get; set;}
            /// The index position within the total result set from which to start returning values. The default value is &#x60;0&#x60;. 
            public int? startPosition {get; set;}
            /// The number of results to return. This value must be a number between &#x60;1&#x60; and &#x60;100&#x60; (default). 
            public int? count {get; set;}
        }

        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees. This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>AssignableRoles</returns>
        public AssignableRoles GetAssignableRoles (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null)
        {
             ApiResponse<AssignableRoles> localVarResponse = GetAssignableRolesWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees. This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of AssignableRoles</returns>
        public ApiResponse< AssignableRoles > GetAssignableRolesWithHttpInfo (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetAssignableRoles");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetAssignableRoles");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/assignable_roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.assigneeEmail != null) localVarQueryParams.Add("assigneeEmail", this.ApiClient.ParameterToString(options.assigneeEmail)); // query parameter
                if (options.filter != null) localVarQueryParams.Add("filter", this.ApiClient.ParameterToString(options.filter)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssignableRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<AssignableRoles>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (AssignableRoles) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(AssignableRoles)));
            }
            else
            {
                return new ApiResponse<AssignableRoles>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (AssignableRoles) this.ApiClient.Deserialize(localVarResponse, typeof(AssignableRoles)));
            }
            
        }

        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees. This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of AssignableRoles</returns>
        public async System.Threading.Tasks.Task<AssignableRoles> GetAssignableRolesAsync (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null)
        {
             ApiResponse<AssignableRoles> localVarResponse = await GetAssignableRolesAsyncWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the roles for which the calling user, based on their role within the room, can assign to invitees. This method returns the room-level roles that the current user can assign to the members that they invite to a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (AssignableRoles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssignableRoles>> GetAssignableRolesAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetAssignableRolesOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetAssignableRoles");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetAssignableRoles");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/assignable_roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.assigneeEmail != null) localVarQueryParams.Add("assigneeEmail", this.ApiClient.ParameterToString(options.assigneeEmail)); // query parameter
                if (options.filter != null) localVarQueryParams.Add("filter", this.ApiClient.ParameterToString(options.filter)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssignableRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssignableRoles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssignableRoles) this.ApiClient.Deserialize(localVarResponse, typeof(AssignableRoles)));
            
        }


        /// <summary>
        /// Get documents in the room accessible to the calling user. This method returns a list of documents that the current user can access for a specific room.
        /// </summary>
        public class GetDocumentsOptions
        {
            /// Number of documents to return. Defaults to the maximum which is 100. 
            public int? count {get; set;}
            /// Position of the first item in the total results. Defaults to 0. 
            public int? startPosition {get; set;}
            /// Filter out any isDynamic documents without content. Defaults to false. 
            public bool? requireContentForDynamicDocuments {get; set;}
            /// Filter documents by folderId. Defaults to null, to not filter on folderId. 
            public int? roomFolderId {get; set;}
            /// Filter documents where Name contains the filter. Defaults to null, to not filter. 
            public string nameFilter {get; set;}
            /// Filter documents to have the same isArchived value as includeArchived. Defaults to true, to include archived documents. 
            public bool? includeArchived {get; set;}
        }

        /// <summary>
        /// Get documents in the room accessible to the calling user. This method returns a list of documents that the current user can access for a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>RoomDocumentList</returns>
        public RoomDocumentList GetDocuments (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null)
        {
             ApiResponse<RoomDocumentList> localVarResponse = GetDocumentsWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get documents in the room accessible to the calling user. This method returns a list of documents that the current user can access for a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of RoomDocumentList</returns>
        public ApiResponse< RoomDocumentList > GetDocumentsWithHttpInfo (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetDocuments");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetDocuments");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.requireContentForDynamicDocuments != null) localVarQueryParams.Add("requireContentForDynamicDocuments", this.ApiClient.ParameterToString(options.requireContentForDynamicDocuments)); // query parameter
                if (options.roomFolderId != null) localVarQueryParams.Add("roomFolderId", this.ApiClient.ParameterToString(options.roomFolderId)); // query parameter
                if (options.nameFilter != null) localVarQueryParams.Add("nameFilter", this.ApiClient.ParameterToString(options.nameFilter)); // query parameter
                if (options.includeArchived != null) localVarQueryParams.Add("includeArchived", this.ApiClient.ParameterToString(options.includeArchived)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomDocumentList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocumentList) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomDocumentList)));
            }
            else
            {
                return new ApiResponse<RoomDocumentList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomDocumentList) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocumentList)));
            }
            
        }

        /// <summary>
        /// Get documents in the room accessible to the calling user. This method returns a list of documents that the current user can access for a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoomDocumentList</returns>
        public async System.Threading.Tasks.Task<RoomDocumentList> GetDocumentsAsync (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null)
        {
             ApiResponse<RoomDocumentList> localVarResponse = await GetDocumentsAsyncWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get documents in the room accessible to the calling user. This method returns a list of documents that the current user can access for a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoomDocumentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomDocumentList>> GetDocumentsAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetDocumentsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetDocuments");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetDocuments");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.requireContentForDynamicDocuments != null) localVarQueryParams.Add("requireContentForDynamicDocuments", this.ApiClient.ParameterToString(options.requireContentForDynamicDocuments)); // query parameter
                if (options.roomFolderId != null) localVarQueryParams.Add("roomFolderId", this.ApiClient.ParameterToString(options.roomFolderId)); // query parameter
                if (options.nameFilter != null) localVarQueryParams.Add("nameFilter", this.ApiClient.ParameterToString(options.nameFilter)); // query parameter
                if (options.includeArchived != null) localVarQueryParams.Add("includeArchived", this.ApiClient.ParameterToString(options.includeArchived)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomDocumentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomDocumentList) this.ApiClient.Deserialize(localVarResponse, typeof(RoomDocumentList)));
            
        }


        /// <summary>
        /// Gets information about the given room. Returns details about the given room
        /// </summary>
        public class GetRoomOptions
        {
            /// Indicates if field data (a.k.a., room details) should be included in the response. Defaults to false. 
            public bool? includeFieldData {get; set;}
        }

        /// <summary>
        /// Gets information about the given room. Returns details about the given room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Room</returns>
        public Room GetRoom (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null)
        {
             ApiResponse<Room> localVarResponse = GetRoomWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about the given room. Returns details about the given room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of Room</returns>
        public ApiResponse< Room > GetRoomWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.includeFieldData != null) localVarQueryParams.Add("includeFieldData", this.ApiClient.ParameterToString(options.includeFieldData)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<Room>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Room) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(Room)));
            }
            else
            {
                return new ApiResponse<Room>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (Room) this.ApiClient.Deserialize(localVarResponse, typeof(Room)));
            }
            
        }

        /// <summary>
        /// Gets information about the given room. Returns details about the given room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of Room</returns>
        public async System.Threading.Tasks.Task<Room> GetRoomAsync (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null)
        {
             ApiResponse<Room> localVarResponse = await GetRoomAsyncWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets information about the given room. Returns details about the given room
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (Room)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Room>> GetRoomAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoom");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoom");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.includeFieldData != null) localVarQueryParams.Add("includeFieldData", this.ApiClient.ParameterToString(options.includeFieldData)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoom", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Room>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Room) this.ApiClient.Deserialize(localVarResponse, typeof(Room)));
            
        }



        /// <summary>
        /// Returns the FieldData associated with the provided roomId. Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>FieldData</returns>
        public FieldData GetRoomFieldData (string accountId, int? roomId)
        {
             ApiResponse<FieldData> localVarResponse = GetRoomFieldDataWithHttpInfo(accountId, roomId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the FieldData associated with the provided roomId. Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>ApiResponse of FieldData</returns>
        public ApiResponse< FieldData > GetRoomFieldDataWithHttpInfo (string accountId, int? roomId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoomFieldData");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoomFieldData");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/field_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomFieldData", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<FieldData>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FieldData) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(FieldData)));
            }
            else
            {
                return new ApiResponse<FieldData>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FieldData) this.ApiClient.Deserialize(localVarResponse, typeof(FieldData)));
            }
            
        }

        /// <summary>
        /// Returns the FieldData associated with the provided roomId. Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of FieldData</returns>
        public async System.Threading.Tasks.Task<FieldData> GetRoomFieldDataAsync (string accountId, int? roomId)
        {
             ApiResponse<FieldData> localVarResponse = await GetRoomFieldDataAsyncWithHttpInfo(accountId, roomId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the FieldData associated with the provided roomId. Returns the field data associated with a room. This is the information that appears on the room&#39;s **Details** tab.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of ApiResponse (FieldData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldData>> GetRoomFieldDataAsyncWithHttpInfo (string accountId, int? roomId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoomFieldData");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoomFieldData");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/field_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomFieldData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldData) this.ApiClient.Deserialize(localVarResponse, typeof(FieldData)));
            
        }



        /// <summary>
        /// Gets the field set associated with the room. Returns the field set that a room uses.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>FieldSet</returns>
        public FieldSet GetRoomFieldSet (string accountId, int? roomId)
        {
             ApiResponse<FieldSet> localVarResponse = GetRoomFieldSetWithHttpInfo(accountId, roomId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the field set associated with the room. Returns the field set that a room uses.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>ApiResponse of FieldSet</returns>
        public ApiResponse< FieldSet > GetRoomFieldSetWithHttpInfo (string accountId, int? roomId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoomFieldSet");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoomFieldSet");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/field_set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomFieldSet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<FieldSet>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FieldSet) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(FieldSet)));
            }
            else
            {
                return new ApiResponse<FieldSet>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FieldSet) this.ApiClient.Deserialize(localVarResponse, typeof(FieldSet)));
            }
            
        }

        /// <summary>
        /// Gets the field set associated with the room. Returns the field set that a room uses.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of FieldSet</returns>
        public async System.Threading.Tasks.Task<FieldSet> GetRoomFieldSetAsync (string accountId, int? roomId)
        {
             ApiResponse<FieldSet> localVarResponse = await GetRoomFieldSetAsyncWithHttpInfo(accountId, roomId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the field set associated with the room. Returns the field set that a room uses.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        
        /// <returns>Task of ApiResponse (FieldSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldSet>> GetRoomFieldSetAsyncWithHttpInfo (string accountId, int? roomId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoomFieldSet");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoomFieldSet");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/field_set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomFieldSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldSet) this.ApiClient.Deserialize(localVarResponse, typeof(FieldSet)));
            
        }


        /// <summary>
        /// Retrieves the list of users in the given room. This method returns a list of users associated with a room.
        /// </summary>
        public class GetRoomUsersOptions
        {
            /// Number of room users to return. Defaults to the maximum which is 100. 
            public int? count {get; set;}
            /// Position of the first item in the total results. Defaults to 0. 
            public int? startPosition {get; set;}
            /// Returns room users filtered by Name and Email. 
            public string filter {get; set;}
            /// Sorts results. Options are FirstNameAsc, FirstNameDesc, LastNameAsc, LastNameDesc, EmailAsc, EmailDesc. Defaults to LastNameDesc 
            public string sort {get; set;}
        }

        /// <summary>
        /// Retrieves the list of users in the given room. This method returns a list of users associated with a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>RoomUsersResult</returns>
        public RoomUsersResult GetRoomUsers (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null)
        {
             ApiResponse<RoomUsersResult> localVarResponse = GetRoomUsersWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the list of users in the given room. This method returns a list of users associated with a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of RoomUsersResult</returns>
        public ApiResponse< RoomUsersResult > GetRoomUsersWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoomUsers");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoomUsers");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.filter != null) localVarQueryParams.Add("filter", this.ApiClient.ParameterToString(options.filter)); // query parameter
                if (options.sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(options.sort)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomUsersResult>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomUsersResult) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomUsersResult)));
            }
            else
            {
                return new ApiResponse<RoomUsersResult>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomUsersResult) this.ApiClient.Deserialize(localVarResponse, typeof(RoomUsersResult)));
            }
            
        }

        /// <summary>
        /// Retrieves the list of users in the given room. This method returns a list of users associated with a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoomUsersResult</returns>
        public async System.Threading.Tasks.Task<RoomUsersResult> GetRoomUsersAsync (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null)
        {
             ApiResponse<RoomUsersResult> localVarResponse = await GetRoomUsersAsyncWithHttpInfo(accountId, roomId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the list of users in the given room. This method returns a list of users associated with a room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoomUsersResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomUsersResult>> GetRoomUsersAsyncWithHttpInfo (string accountId, int? roomId, RoomsApi.GetRoomUsersOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRoomUsers");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->GetRoomUsers");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.filter != null) localVarQueryParams.Add("filter", this.ApiClient.ParameterToString(options.filter)); // query parameter
                if (options.sort != null) localVarQueryParams.Add("sort", this.ApiClient.ParameterToString(options.sort)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoomUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomUsersResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomUsersResult) this.ApiClient.Deserialize(localVarResponse, typeof(RoomUsersResult)));
            
        }


        /// <summary>
        /// Gets rooms available to the calling user. Gets rooms available to the calling user
        /// </summary>
        public class GetRoomsOptions
        {
            /// Number of rooms to return. Defaults to the maximum which is 100. 
            public int? count {get; set;}
            /// Position of the first item in the total results. Defaults to 0. 
            public int? startPosition {get; set;}
            /// Status of the rooms to return. Defaults to \&quot;Active\&quot;. 
            public string roomStatus {get; set;}
            /// Only return rooms in this office. 
            public int? officeId {get; set;}
            /// Fields data changed start datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00. 
            public string fieldDataChangedStartDate {get; set;}
            /// Fields-data changed end DateTime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00. 
            public string fieldDataChangedEndDate {get; set;}
            /// Room closed start datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00. 
            public string roomClosedStartDate {get; set;}
            /// Room closed end datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00. 
            public string roomClosedEndDate {get; set;}
        }

        /// <summary>
        /// Gets rooms available to the calling user. Gets rooms available to the calling user
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>RoomSummaryList</returns>
        public RoomSummaryList GetRooms (string accountId, RoomsApi.GetRoomsOptions options = null)
        {
             ApiResponse<RoomSummaryList> localVarResponse = GetRoomsWithHttpInfo(accountId, options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets rooms available to the calling user. Gets rooms available to the calling user
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>ApiResponse of RoomSummaryList</returns>
        public ApiResponse< RoomSummaryList > GetRoomsWithHttpInfo (string accountId, RoomsApi.GetRoomsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRooms");

            var localVarPath = "/v2/accounts/{accountId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.roomStatus != null) localVarQueryParams.Add("roomStatus", this.ApiClient.ParameterToString(options.roomStatus)); // query parameter
                if (options.officeId != null) localVarQueryParams.Add("officeId", this.ApiClient.ParameterToString(options.officeId)); // query parameter
                if (options.fieldDataChangedStartDate != null) localVarQueryParams.Add("fieldDataChangedStartDate", this.ApiClient.ParameterToString(options.fieldDataChangedStartDate)); // query parameter
                if (options.fieldDataChangedEndDate != null) localVarQueryParams.Add("fieldDataChangedEndDate", this.ApiClient.ParameterToString(options.fieldDataChangedEndDate)); // query parameter
                if (options.roomClosedStartDate != null) localVarQueryParams.Add("roomClosedStartDate", this.ApiClient.ParameterToString(options.roomClosedStartDate)); // query parameter
                if (options.roomClosedEndDate != null) localVarQueryParams.Add("roomClosedEndDate", this.ApiClient.ParameterToString(options.roomClosedEndDate)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRooms", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomSummaryList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomSummaryList) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomSummaryList)));
            }
            else
            {
                return new ApiResponse<RoomSummaryList>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomSummaryList) this.ApiClient.Deserialize(localVarResponse, typeof(RoomSummaryList)));
            }
            
        }

        /// <summary>
        /// Gets rooms available to the calling user. Gets rooms available to the calling user
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of RoomSummaryList</returns>
        public async System.Threading.Tasks.Task<RoomSummaryList> GetRoomsAsync (string accountId, RoomsApi.GetRoomsOptions options = null)
        {
             ApiResponse<RoomSummaryList> localVarResponse = await GetRoomsAsyncWithHttpInfo(accountId, options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets rooms available to the calling user. Gets rooms available to the calling user
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>
        
        /// <param name="options">Options for modifying the behavior of the function.</param>
        /// <returns>Task of ApiResponse (RoomSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomSummaryList>> GetRoomsAsyncWithHttpInfo (string accountId, RoomsApi.GetRoomsOptions options = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->GetRooms");

            var localVarPath = "/v2/accounts/{accountId}/rooms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter

            if (options != null)
            {
                if (options.count != null) localVarQueryParams.Add("count", this.ApiClient.ParameterToString(options.count)); // query parameter
                if (options.startPosition != null) localVarQueryParams.Add("startPosition", this.ApiClient.ParameterToString(options.startPosition)); // query parameter
                if (options.roomStatus != null) localVarQueryParams.Add("roomStatus", this.ApiClient.ParameterToString(options.roomStatus)); // query parameter
                if (options.officeId != null) localVarQueryParams.Add("officeId", this.ApiClient.ParameterToString(options.officeId)); // query parameter
                if (options.fieldDataChangedStartDate != null) localVarQueryParams.Add("fieldDataChangedStartDate", this.ApiClient.ParameterToString(options.fieldDataChangedStartDate)); // query parameter
                if (options.fieldDataChangedEndDate != null) localVarQueryParams.Add("fieldDataChangedEndDate", this.ApiClient.ParameterToString(options.fieldDataChangedEndDate)); // query parameter
                if (options.roomClosedStartDate != null) localVarQueryParams.Add("roomClosedStartDate", this.ApiClient.ParameterToString(options.roomClosedStartDate)); // query parameter
                if (options.roomClosedEndDate != null) localVarQueryParams.Add("roomClosedEndDate", this.ApiClient.ParameterToString(options.roomClosedEndDate)); // query parameter
            }


            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRooms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomSummaryList) this.ApiClient.Deserialize(localVarResponse, typeof(RoomSummaryList)));
            
        }



        /// <summary>
        /// Invites a user to the room by email address. This method invites an existing or new member to a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>RoomInviteResponse</returns>
        public RoomInviteResponse InviteUser (string accountId, int? roomId, RoomInvite body = null)
        {
             ApiResponse<RoomInviteResponse> localVarResponse = InviteUserWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invites a user to the room by email address. This method invites an existing or new member to a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of RoomInviteResponse</returns>
        public ApiResponse< RoomInviteResponse > InviteUserWithHttpInfo (string accountId, int? roomId, RoomInvite body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->InviteUser");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->InviteUser");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomInviteResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomInviteResponse) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomInviteResponse)));
            }
            else
            {
                return new ApiResponse<RoomInviteResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomInviteResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RoomInviteResponse)));
            }
            
        }

        /// <summary>
        /// Invites a user to the room by email address. This method invites an existing or new member to a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomInviteResponse</returns>
        public async System.Threading.Tasks.Task<RoomInviteResponse> InviteUserAsync (string accountId, int? roomId, RoomInvite body = null)
        {
             ApiResponse<RoomInviteResponse> localVarResponse = await InviteUserAsyncWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invites a user to the room by email address. This method invites an existing or new member to a specific room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomInviteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomInviteResponse>> InviteUserAsyncWithHttpInfo (string accountId, int? roomId, RoomInvite body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->InviteUser");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->InviteUser");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomInviteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomInviteResponse) this.ApiClient.Deserialize(localVarResponse, typeof(RoomInviteResponse)));
            
        }



        /// <summary>
        /// Updates the specified user&#39;s role and transaction side. Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>RoomUser</returns>
        public RoomUser PutRoomUser (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null)
        {
             ApiResponse<RoomUser> localVarResponse = PutRoomUserWithHttpInfo(accountId, roomId, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the specified user&#39;s role and transaction side. Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of RoomUser</returns>
        public ApiResponse< RoomUser > PutRoomUserWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->PutRoomUser");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->PutRoomUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RoomsApi->PutRoomUser");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRoomUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomUser>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomUser) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomUser)));
            }
            else
            {
                return new ApiResponse<RoomUser>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomUser) this.ApiClient.Deserialize(localVarResponse, typeof(RoomUser)));
            }
            
        }

        /// <summary>
        /// Updates the specified user&#39;s role and transaction side. Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of RoomUser</returns>
        public async System.Threading.Tasks.Task<RoomUser> PutRoomUserAsync (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null)
        {
             ApiResponse<RoomUser> localVarResponse = await PutRoomUserAsyncWithHttpInfo(accountId, roomId, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the specified user&#39;s role and transaction side. Updates the specified user&#39;s role and transaction side.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>/// <param name="userId">The id of the user to update.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (RoomUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomUser>> PutRoomUserAsyncWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->PutRoomUser");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->PutRoomUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RoomsApi->PutRoomUser");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRoomUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomUser) this.ApiClient.Deserialize(localVarResponse, typeof(RoomUser)));
            
        }



        /// <summary>
        /// Restores the specified user&#39;s access to the room. Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns></returns>
        public void RestoreRoomUserAccess (string accountId, int? roomId, int? userId)
        {
             RestoreRoomUserAccessWithHttpInfo(accountId, roomId, userId);
        }

        /// <summary>
        /// Restores the specified user&#39;s access to the room. Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RestoreRoomUserAccessWithHttpInfo (string accountId, int? roomId, int? userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->RestoreRoomUserAccess");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->RestoreRoomUserAccess");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RoomsApi->RestoreRoomUserAccess");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/restore_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreRoomUserAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Restores the specified user&#39;s access to the room. Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreRoomUserAccessAsync (string accountId, int? roomId, int? userId)
        {
             await RestoreRoomUserAccessAsyncWithHttpInfo(accountId, roomId, userId);

        }

        /// <summary>
        /// Restores the specified user&#39;s access to the room. Restores the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to restore access</param>/// <param name="userId">The user Id getting restored to the room</param>
        
        
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RestoreRoomUserAccessAsyncWithHttpInfo (string accountId, int? roomId, int? userId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->RestoreRoomUserAccess");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->RestoreRoomUserAccess");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RoomsApi->RestoreRoomUserAccess");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/restore_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestoreRoomUserAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Revokes the specified user&#39;s access to the room. Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns></returns>
        public void RevokeRoomUserAccess (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null)
        {
             RevokeRoomUserAccessWithHttpInfo(accountId, roomId, userId, body);
        }

        /// <summary>
        /// Revokes the specified user&#39;s access to the room. Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeRoomUserAccessWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->RevokeRoomUserAccess");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->RevokeRoomUserAccess");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RoomsApi->RevokeRoomUserAccess");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/revoke_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeRoomUserAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Revokes the specified user&#39;s access to the room. Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeRoomUserAccessAsync (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null)
        {
             await RevokeRoomUserAccessAsyncWithHttpInfo(accountId, roomId, userId, body);

        }

        /// <summary>
        /// Revokes the specified user&#39;s access to the room. Revokes the specified user&#39;s access to the room.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The room Id to revoke access from</param>/// <param name="userId">The user Id getting revoked from the room</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRoomUserAccessAsyncWithHttpInfo (string accountId, int? roomId, int? userId, RoomUserRemovalDetail body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->RevokeRoomUserAccess");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->RevokeRoomUserAccess");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RoomsApi->RevokeRoomUserAccess");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/revoke_access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.ApiClient.ParameterToString(userId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeRoomUserAccess", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Update the picture for a room. This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        


        /// <returns>RoomPicture</returns>
        public RoomPicture UpdatePicture (string accountId, int? roomId, byte[] file, string fileName = "file.jpg")
        {
             ApiResponse<RoomPicture> localVarResponse = UpdatePictureWithHttpInfo(accountId, roomId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the picture for a room. This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        
        /// <returns>ApiResponse of RoomPicture</returns>
        public ApiResponse< RoomPicture > UpdatePictureWithHttpInfo (string accountId, int? roomId, byte[] file, string fileName = "file.jpg")
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->UpdatePicture");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->UpdatePicture");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/picture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePicture", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<RoomPicture>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomPicture) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(RoomPicture)));
            }
            else
            {
                return new ApiResponse<RoomPicture>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (RoomPicture) this.ApiClient.Deserialize(localVarResponse, typeof(RoomPicture)));
            }
            
        }

        /// <summary>
        /// Update the picture for a room. This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        
        /// <returns>Task of RoomPicture</returns>
        public async System.Threading.Tasks.Task<RoomPicture> UpdatePictureAsync (string accountId, int? roomId, byte[] file, string fileName = "file.jpg")
        {
             ApiResponse<RoomPicture> localVarResponse = await UpdatePictureAsyncWithHttpInfo(accountId, roomId, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the picture for a room. This endpoint supports the following content types, application/json as JSON PictureForUpdate{\&quot;fileName\&quot;:\&quot;string\&quot;, \&quot;Base64Contents\&quot;:\&quot;string\&quot;}, multipart/formdata and any other streamed binary content type (as long as either query parameter fileName or request header ContentDisposition filename is included).
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">ID of the room the picture is for.</param>
        /// <param name="file"></param>
        
        /// <returns>Task of ApiResponse (RoomPicture)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoomPicture>> UpdatePictureAsyncWithHttpInfo (string accountId, int? roomId, byte[] file, string fileName = "file.jpg")
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->UpdatePicture");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->UpdatePicture");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/picture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter

            if (file != null && file.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(file); // http body (model) parameter	
            }
            else
            {
                localVarPostBody = file; // byte array	
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoomPicture>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoomPicture) this.ApiClient.Deserialize(localVarResponse, typeof(RoomPicture)));
            
        }



        /// <summary>
        /// Updates room field data. Updates room field data.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>FieldData</returns>
        public FieldData UpdateRoomFieldData (string accountId, int? roomId, FieldDataForUpdate body = null)
        {
             ApiResponse<FieldData> localVarResponse = UpdateRoomFieldDataWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates room field data. Updates room field data.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>ApiResponse of FieldData</returns>
        public ApiResponse< FieldData > UpdateRoomFieldDataWithHttpInfo (string accountId, int? roomId, FieldDataForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->UpdateRoomFieldData");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->UpdateRoomFieldData");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/field_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoomFieldData", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<FieldData>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FieldData) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(FieldData)));
            }
            else
            {
                return new ApiResponse<FieldData>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (FieldData) this.ApiClient.Deserialize(localVarResponse, typeof(FieldData)));
            }
            
        }

        /// <summary>
        /// Updates room field data. Updates room field data.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of FieldData</returns>
        public async System.Threading.Tasks.Task<FieldData> UpdateRoomFieldDataAsync (string accountId, int? roomId, FieldDataForUpdate body = null)
        {
             ApiResponse<FieldData> localVarResponse = await UpdateRoomFieldDataAsyncWithHttpInfo(accountId, roomId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates room field data. Updates room field data.
        /// </summary>
        /// <exception cref="DocuSign.Rooms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">(Required) The globally unique identifier (GUID) for the account.</param>/// <param name="roomId">The id of the room.</param>
        /// <param name="body"> (optional)</param>
        
        /// <returns>Task of ApiResponse (FieldData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldData>> UpdateRoomFieldDataAsyncWithHttpInfo (string accountId, int? roomId, FieldDataForUpdate body = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RoomsApi->UpdateRoomFieldData");
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new ApiException(400, "Missing required parameter 'roomId' when calling RoomsApi->UpdateRoomFieldData");

            var localVarPath = "/v2/accounts/{accountId}/rooms/{roomId}/field_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", this.ApiClient.ParameterToString(accountId)); // path parameter
            if (roomId != null) localVarPathParams.Add("roomId", this.ApiClient.ParameterToString(roomId)); // path parameter


            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoomFieldData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldData) this.ApiClient.Deserialize(localVarResponse, typeof(FieldData)));
            
        }

    }
}