/* 
 * ProofService API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Definition of a front view
    /// </summary>
    [DataContract]
    public partial class IFrontViewResponse :  IEquatable<IFrontViewResponse>, IValidatableObject
    {
        public IFrontViewResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IFrontViewResponse" /> class.
        /// </summary>
        /// <param name="EventsTypes">List of events types that are bound to a proof webapp view..</param>
        public IFrontViewResponse(List<string> EventsTypes = default(List<string>))
        {
            this.EventsTypes = EventsTypes;
        }
        
        /// <summary>
        /// Front view identifier.
        /// </summary>
        /// <value>Front view identifier.</value>
        [DataMember(Name="front_view_id", EmitDefaultValue=false)]
        public Guid? FrontViewId { get; private set; }
        /// <summary>
        /// Name of the view in the Proof WebApp.
        /// </summary>
        /// <value>Name of the view in the Proof WebApp.</value>
        [DataMember(Name="view_name", EmitDefaultValue=false)]
        public string ViewName { get; private set; }
        /// <summary>
        /// List of events types that are bound to a proof webapp view.
        /// </summary>
        /// <value>List of events types that are bound to a proof webapp view.</value>
        [DataMember(Name="events_types", EmitDefaultValue=false)]
        public List<string> EventsTypes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IFrontViewResponse {\n");
            sb.Append("  FrontViewId: ").Append(FrontViewId).Append("\n");
            sb.Append("  ViewName: ").Append(ViewName).Append("\n");
            sb.Append("  EventsTypes: ").Append(EventsTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IFrontViewResponse);
        }

        /// <summary>
        /// Returns true if IFrontViewResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of IFrontViewResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IFrontViewResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FrontViewId == other.FrontViewId ||
                    this.FrontViewId != null &&
                    this.FrontViewId.Equals(other.FrontViewId)
                ) && 
                (
                    this.ViewName == other.ViewName ||
                    this.ViewName != null &&
                    this.ViewName.Equals(other.ViewName)
                ) && 
                (
                    this.EventsTypes == other.EventsTypes ||
                    this.EventsTypes != null &&
                    this.EventsTypes.SequenceEqual(other.EventsTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FrontViewId != null)
                    hash = hash * 59 + this.FrontViewId.GetHashCode();
                if (this.ViewName != null)
                    hash = hash * 59 + this.ViewName.GetHashCode();
                if (this.EventsTypes != null)
                    hash = hash * 59 + this.EventsTypes.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
