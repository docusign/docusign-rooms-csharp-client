/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Rooms.Client.SwaggerDateConverter;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// DocumentUser
    /// </summary>
    [DataContract]
    public partial class DocumentUser :  IEquatable<DocumentUser>, IValidatableObject
    {
        public DocumentUser()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentUser" /> class.
        /// </summary>
        /// <param name="UserId">UserId.</param>
        /// <param name="DocumentId">DocumentId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="HasAccess">HasAccess.</param>
        /// <param name="CanApproveTask">CanApproveTask.</param>
        /// <param name="CanAssignToTaskList">CanAssignToTaskList.</param>
        /// <param name="CanCopy">CanCopy.</param>
        /// <param name="CanDelete">CanDelete.</param>
        /// <param name="CanRemoveFromTaskList">CanRemoveFromTaskList.</param>
        /// <param name="CanRemoveApproval">CanRemoveApproval.</param>
        /// <param name="CanRename">CanRename.</param>
        /// <param name="CanShare">CanShare.</param>
        /// <param name="CanViewActivity">CanViewActivity.</param>
        public DocumentUser(int? UserId = default(int?), int? DocumentId = default(int?), string Name = default(string), bool? HasAccess = default(bool?), bool? CanApproveTask = default(bool?), bool? CanAssignToTaskList = default(bool?), bool? CanCopy = default(bool?), bool? CanDelete = default(bool?), bool? CanRemoveFromTaskList = default(bool?), bool? CanRemoveApproval = default(bool?), bool? CanRename = default(bool?), bool? CanShare = default(bool?), bool? CanViewActivity = default(bool?))
        {
            this.UserId = UserId;
            this.DocumentId = DocumentId;
            this.Name = Name;
            this.HasAccess = HasAccess;
            this.CanApproveTask = CanApproveTask;
            this.CanAssignToTaskList = CanAssignToTaskList;
            this.CanCopy = CanCopy;
            this.CanDelete = CanDelete;
            this.CanRemoveFromTaskList = CanRemoveFromTaskList;
            this.CanRemoveApproval = CanRemoveApproval;
            this.CanRename = CanRename;
            this.CanShare = CanShare;
            this.CanViewActivity = CanViewActivity;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name="documentId", EmitDefaultValue=false)]
        public int? DocumentId { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets HasAccess
        /// </summary>
        [DataMember(Name="hasAccess", EmitDefaultValue=false)]
        public bool? HasAccess { get; set; }
        /// <summary>
        /// Gets or Sets CanApproveTask
        /// </summary>
        [DataMember(Name="canApproveTask", EmitDefaultValue=false)]
        public bool? CanApproveTask { get; set; }
        /// <summary>
        /// Gets or Sets CanAssignToTaskList
        /// </summary>
        [DataMember(Name="canAssignToTaskList", EmitDefaultValue=false)]
        public bool? CanAssignToTaskList { get; set; }
        /// <summary>
        /// Gets or Sets CanCopy
        /// </summary>
        [DataMember(Name="canCopy", EmitDefaultValue=false)]
        public bool? CanCopy { get; set; }
        /// <summary>
        /// Gets or Sets CanDelete
        /// </summary>
        [DataMember(Name="canDelete", EmitDefaultValue=false)]
        public bool? CanDelete { get; set; }
        /// <summary>
        /// Gets or Sets CanRemoveFromTaskList
        /// </summary>
        [DataMember(Name="canRemoveFromTaskList", EmitDefaultValue=false)]
        public bool? CanRemoveFromTaskList { get; set; }
        /// <summary>
        /// Gets or Sets CanRemoveApproval
        /// </summary>
        [DataMember(Name="canRemoveApproval", EmitDefaultValue=false)]
        public bool? CanRemoveApproval { get; set; }
        /// <summary>
        /// Gets or Sets CanRename
        /// </summary>
        [DataMember(Name="canRename", EmitDefaultValue=false)]
        public bool? CanRename { get; set; }
        /// <summary>
        /// Gets or Sets CanShare
        /// </summary>
        [DataMember(Name="canShare", EmitDefaultValue=false)]
        public bool? CanShare { get; set; }
        /// <summary>
        /// Gets or Sets CanViewActivity
        /// </summary>
        [DataMember(Name="canViewActivity", EmitDefaultValue=false)]
        public bool? CanViewActivity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentUser {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HasAccess: ").Append(HasAccess).Append("\n");
            sb.Append("  CanApproveTask: ").Append(CanApproveTask).Append("\n");
            sb.Append("  CanAssignToTaskList: ").Append(CanAssignToTaskList).Append("\n");
            sb.Append("  CanCopy: ").Append(CanCopy).Append("\n");
            sb.Append("  CanDelete: ").Append(CanDelete).Append("\n");
            sb.Append("  CanRemoveFromTaskList: ").Append(CanRemoveFromTaskList).Append("\n");
            sb.Append("  CanRemoveApproval: ").Append(CanRemoveApproval).Append("\n");
            sb.Append("  CanRename: ").Append(CanRename).Append("\n");
            sb.Append("  CanShare: ").Append(CanShare).Append("\n");
            sb.Append("  CanViewActivity: ").Append(CanViewActivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DocumentUser);
        }

        /// <summary>
        /// Returns true if DocumentUser instances are equal
        /// </summary>
        /// <param name="other">Instance of DocumentUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentUser other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.DocumentId == other.DocumentId ||
                    this.DocumentId != null &&
                    this.DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.HasAccess == other.HasAccess ||
                    this.HasAccess != null &&
                    this.HasAccess.Equals(other.HasAccess)
                ) && 
                (
                    this.CanApproveTask == other.CanApproveTask ||
                    this.CanApproveTask != null &&
                    this.CanApproveTask.Equals(other.CanApproveTask)
                ) && 
                (
                    this.CanAssignToTaskList == other.CanAssignToTaskList ||
                    this.CanAssignToTaskList != null &&
                    this.CanAssignToTaskList.Equals(other.CanAssignToTaskList)
                ) && 
                (
                    this.CanCopy == other.CanCopy ||
                    this.CanCopy != null &&
                    this.CanCopy.Equals(other.CanCopy)
                ) && 
                (
                    this.CanDelete == other.CanDelete ||
                    this.CanDelete != null &&
                    this.CanDelete.Equals(other.CanDelete)
                ) && 
                (
                    this.CanRemoveFromTaskList == other.CanRemoveFromTaskList ||
                    this.CanRemoveFromTaskList != null &&
                    this.CanRemoveFromTaskList.Equals(other.CanRemoveFromTaskList)
                ) && 
                (
                    this.CanRemoveApproval == other.CanRemoveApproval ||
                    this.CanRemoveApproval != null &&
                    this.CanRemoveApproval.Equals(other.CanRemoveApproval)
                ) && 
                (
                    this.CanRename == other.CanRename ||
                    this.CanRename != null &&
                    this.CanRename.Equals(other.CanRename)
                ) && 
                (
                    this.CanShare == other.CanShare ||
                    this.CanShare != null &&
                    this.CanShare.Equals(other.CanShare)
                ) && 
                (
                    this.CanViewActivity == other.CanViewActivity ||
                    this.CanViewActivity != null &&
                    this.CanViewActivity.Equals(other.CanViewActivity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.DocumentId != null)
                    hash = hash * 59 + this.DocumentId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.HasAccess != null)
                    hash = hash * 59 + this.HasAccess.GetHashCode();
                if (this.CanApproveTask != null)
                    hash = hash * 59 + this.CanApproveTask.GetHashCode();
                if (this.CanAssignToTaskList != null)
                    hash = hash * 59 + this.CanAssignToTaskList.GetHashCode();
                if (this.CanCopy != null)
                    hash = hash * 59 + this.CanCopy.GetHashCode();
                if (this.CanDelete != null)
                    hash = hash * 59 + this.CanDelete.GetHashCode();
                if (this.CanRemoveFromTaskList != null)
                    hash = hash * 59 + this.CanRemoveFromTaskList.GetHashCode();
                if (this.CanRemoveApproval != null)
                    hash = hash * 59 + this.CanRemoveApproval.GetHashCode();
                if (this.CanRename != null)
                    hash = hash * 59 + this.CanRename.GetHashCode();
                if (this.CanShare != null)
                    hash = hash * 59 + this.CanShare.GetHashCode();
                if (this.CanViewActivity != null)
                    hash = hash * 59 + this.CanViewActivity.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
