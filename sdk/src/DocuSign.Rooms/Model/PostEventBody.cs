/* 
 * ProofService API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Model representing the object passed to the set event endpoint.
    /// </summary>
    [DataContract]
    public partial class PostEventBody :  IEquatable<PostEventBody>, IValidatableObject
    {
        public PostEventBody()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostEventBody" /> class.
        /// </summary>
        /// <param name="EventType">Type of the event added to the list of events tied to the transaction. A schema validating this kind of event must have been created in a first place. (required).</param>
        /// <param name="ActorId">Actor identifier. This enables to attach this event to a particular actor..</param>
        /// <param name="Payload">This parameter is formed by a json containing all relevant information about the event. This Json must match a particular structure defined by the type of the event and the type of the entity (see validation schemas)..</param>
        /// <param name="PayloadModelVersion">Version of the validation model. Each model is versioned. (required).</param>
        public PostEventBody(string EventType = default(string), string ActorId = default(string), Object Payload = default(Object), int? PayloadModelVersion = default(int?))
        {
            // to ensure "EventType" is required (not null)
            if (EventType == null)
            {
                throw new InvalidDataException("EventType is a required property for PostEventBody and cannot be null");
            }
            else
            {
                this.EventType = EventType;
            }
            // to ensure "PayloadModelVersion" is required (not null)
            if (PayloadModelVersion == null)
            {
                throw new InvalidDataException("PayloadModelVersion is a required property for PostEventBody and cannot be null");
            }
            else
            {
                this.PayloadModelVersion = PayloadModelVersion;
            }
            this.ActorId = ActorId;
            this.Payload = Payload;
        }
        
        /// <summary>
        /// Type of the event added to the list of events tied to the transaction. A schema validating this kind of event must have been created in a first place.
        /// </summary>
        /// <value>Type of the event added to the list of events tied to the transaction. A schema validating this kind of event must have been created in a first place.</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; set; }
        /// <summary>
        /// Actor identifier. This enables to attach this event to a particular actor.
        /// </summary>
        /// <value>Actor identifier. This enables to attach this event to a particular actor.</value>
        [DataMember(Name="actor_id", EmitDefaultValue=false)]
        public string ActorId { get; set; }
        /// <summary>
        /// This parameter is formed by a json containing all relevant information about the event. This Json must match a particular structure defined by the type of the event and the type of the entity (see validation schemas).
        /// </summary>
        /// <value>This parameter is formed by a json containing all relevant information about the event. This Json must match a particular structure defined by the type of the event and the type of the entity (see validation schemas).</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public Object Payload { get; set; }
        /// <summary>
        /// Version of the validation model. Each model is versioned.
        /// </summary>
        /// <value>Version of the validation model. Each model is versioned.</value>
        [DataMember(Name="payload_model_version", EmitDefaultValue=false)]
        public int? PayloadModelVersion { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostEventBody {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ActorId: ").Append(ActorId).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  PayloadModelVersion: ").Append(PayloadModelVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PostEventBody);
        }

        /// <summary>
        /// Returns true if PostEventBody instances are equal
        /// </summary>
        /// <param name="other">Instance of PostEventBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostEventBody other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.ActorId == other.ActorId ||
                    this.ActorId != null &&
                    this.ActorId.Equals(other.ActorId)
                ) && 
                (
                    this.Payload == other.Payload ||
                    this.Payload != null &&
                    this.Payload.Equals(other.Payload)
                ) && 
                (
                    this.PayloadModelVersion == other.PayloadModelVersion ||
                    this.PayloadModelVersion != null &&
                    this.PayloadModelVersion.Equals(other.PayloadModelVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.ActorId != null)
                    hash = hash * 59 + this.ActorId.GetHashCode();
                if (this.Payload != null)
                    hash = hash * 59 + this.Payload.GetHashCode();
                if (this.PayloadModelVersion != null)
                    hash = hash * 59 + this.PayloadModelVersion.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // PayloadModelVersion (int?) maximum
            if(this.PayloadModelVersion > (int?)2147483647)
            {
                yield return new ValidationResult("Invalid value for PayloadModelVersion, must be a value less than or equal to 2147483647.", new [] { "PayloadModelVersion" });
            }

            // PayloadModelVersion (int?) minimum
            if(this.PayloadModelVersion < (int?)0)
            {
                yield return new ValidationResult("Invalid value for PayloadModelVersion, must be a value greater than or equal to 0.", new [] { "PayloadModelVersion" });
            }

            yield break;
        }
    }

}
