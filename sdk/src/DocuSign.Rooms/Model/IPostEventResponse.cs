/* 
 * ProofService API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Defined an event added to a transaction.
    /// </summary>
    [DataContract]
    public partial class IPostEventResponse :  IEquatable<IPostEventResponse>, IValidatableObject
    {
        public IPostEventResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// The DocuSign entity identifier.
        /// </summary>
        /// <value>The DocuSign entity identifier.</value>
        [DataMember(Name="entity_id", EmitDefaultValue=false)]
        public Guid? EntityId { get; private set; }
        /// <summary>
        /// Type of the entity. i.e room, user, envelope...
        /// </summary>
        /// <value>Type of the entity. i.e room, user, envelope...</value>
        [DataMember(Name="entity_type", EmitDefaultValue=false)]
        public string EntityType { get; private set; }
        /// <summary>
        /// Type of the event added to the list of events tied to the transaction.
        /// </summary>
        /// <value>Type of the event added to the list of events tied to the transaction.</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; private set; }
        /// <summary>
        /// Actor identifier. This enables to attach this event to a particular actor.
        /// </summary>
        /// <value>Actor identifier. This enables to attach this event to a particular actor.</value>
        [DataMember(Name="actor_id", EmitDefaultValue=false)]
        public string ActorId { get; private set; }
        /// <summary>
        /// Version of the validation schema used to check the data structure integrity.
        /// </summary>
        /// <value>Version of the validation schema used to check the data structure integrity.</value>
        [DataMember(Name="payload_schema_version", EmitDefaultValue=false)]
        public int? PayloadSchemaVersion { get; private set; }
        /// <summary>
        /// Creation date of the entity calculated by the server.
        /// </summary>
        /// <value>Creation date of the entity calculated by the server.</value>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IPostEventResponse {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ActorId: ").Append(ActorId).Append("\n");
            sb.Append("  PayloadSchemaVersion: ").Append(PayloadSchemaVersion).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IPostEventResponse);
        }

        /// <summary>
        /// Returns true if IPostEventResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of IPostEventResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IPostEventResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EntityId == other.EntityId ||
                    this.EntityId != null &&
                    this.EntityId.Equals(other.EntityId)
                ) && 
                (
                    this.EntityType == other.EntityType ||
                    this.EntityType != null &&
                    this.EntityType.Equals(other.EntityType)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.ActorId == other.ActorId ||
                    this.ActorId != null &&
                    this.ActorId.Equals(other.ActorId)
                ) && 
                (
                    this.PayloadSchemaVersion == other.PayloadSchemaVersion ||
                    this.PayloadSchemaVersion != null &&
                    this.PayloadSchemaVersion.Equals(other.PayloadSchemaVersion)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EntityId != null)
                    hash = hash * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hash = hash * 59 + this.EntityType.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.ActorId != null)
                    hash = hash * 59 + this.ActorId.GetHashCode();
                if (this.PayloadSchemaVersion != null)
                    hash = hash * 59 + this.PayloadSchemaVersion.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
