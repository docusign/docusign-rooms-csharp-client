/* 
 * ProofService API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Definition of a view schema. The view schema is used to filter the data thar are given back by the proof service.
    /// </summary>
    [DataContract]
    public partial class IViewSchemaResponse :  IEquatable<IViewSchemaResponse>, IValidatableObject
    {
        public IViewSchemaResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IViewSchemaResponse" /> class.
        /// </summary>
        /// <param name="Data">JSON based format representing the data to render..</param>
        public IViewSchemaResponse(Object Data = default(Object))
        {
            this.Data = Data;
        }
        
        /// <summary>
        /// JSON based format representing the data to render.
        /// </summary>
        /// <value>JSON based format representing the data to render.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Object Data { get; set; }
        /// <summary>
        /// View schema identifier.
        /// </summary>
        /// <value>View schema identifier.</value>
        [DataMember(Name="schema_id", EmitDefaultValue=false)]
        public Guid? SchemaId { get; private set; }
        /// <summary>
        /// Type of the entity. i.e room, user, envelope...
        /// </summary>
        /// <value>Type of the entity. i.e room, user, envelope...</value>
        [DataMember(Name="entity_type", EmitDefaultValue=false)]
        public string EntityType { get; private set; }
        /// <summary>
        /// Type of the event. This property depends on the source, the creator of an event. The proof service does not have any pre-establish list of events types.  It is totally up to the external service, that calls the proof service, to decide and manage their events types.
        /// </summary>
        /// <value>Type of the event. This property depends on the source, the creator of an event. The proof service does not have any pre-establish list of events types.  It is totally up to the external service, that calls the proof service, to decide and manage their events types.</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; private set; }
        /// <summary>
        /// Audience or authority claiming the data.
        /// </summary>
        /// <value>Audience or authority claiming the data.</value>
        [DataMember(Name="authority", EmitDefaultValue=false)]
        public string Authority { get; private set; }
        /// <summary>
        /// Gets or sets the version of the data model the view schema is bound to.
        /// </summary>
        /// <value>Gets or sets the version of the data model the view schema is bound to.</value>
        [DataMember(Name="data_model_validation_version", EmitDefaultValue=false)]
        public int? DataModelValidationVersion { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IViewSchemaResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  SchemaId: ").Append(SchemaId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  DataModelValidationVersion: ").Append(DataModelValidationVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IViewSchemaResponse);
        }

        /// <summary>
        /// Returns true if IViewSchemaResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of IViewSchemaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IViewSchemaResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.SchemaId == other.SchemaId ||
                    this.SchemaId != null &&
                    this.SchemaId.Equals(other.SchemaId)
                ) && 
                (
                    this.EntityType == other.EntityType ||
                    this.EntityType != null &&
                    this.EntityType.Equals(other.EntityType)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.Authority == other.Authority ||
                    this.Authority != null &&
                    this.Authority.Equals(other.Authority)
                ) && 
                (
                    this.DataModelValidationVersion == other.DataModelValidationVersion ||
                    this.DataModelValidationVersion != null &&
                    this.DataModelValidationVersion.Equals(other.DataModelValidationVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.SchemaId != null)
                    hash = hash * 59 + this.SchemaId.GetHashCode();
                if (this.EntityType != null)
                    hash = hash * 59 + this.EntityType.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.Authority != null)
                    hash = hash * 59 + this.Authority.GetHashCode();
                if (this.DataModelValidationVersion != null)
                    hash = hash * 59 + this.DataModelValidationVersion.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
