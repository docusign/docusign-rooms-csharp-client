/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// RoomUser
    /// </summary>
    [DataContract]
    public partial class RoomUser :  IEquatable<RoomUser>, IValidatableObject
    {
        public RoomUser()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomUser" /> class.
        /// </summary>
        /// <param name="UserId">UserId.</param>
        /// <param name="Email">Email.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="TransactionSideId">TransactionSideId.</param>
        /// <param name="RoleId">RoleId.</param>
        /// <param name="IsRevoked">IsRevoked.</param>
        /// <param name="InvitedByUserId">InvitedByUserId.</param>
        public RoomUser(int? UserId = default(int?), string Email = default(string), string FirstName = default(string), string LastName = default(string), string TransactionSideId = default(string), int? RoleId = default(int?), bool? IsRevoked = default(bool?), int? InvitedByUserId = default(int?))
        {
            this.UserId = UserId;
            this.Email = Email;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.TransactionSideId = TransactionSideId;
            this.RoleId = RoleId;
            this.IsRevoked = IsRevoked;
            this.InvitedByUserId = InvitedByUserId;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets TransactionSideId
        /// </summary>
        [DataMember(Name="transactionSideId", EmitDefaultValue=false)]
        public string TransactionSideId { get; set; }
        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name="roleId", EmitDefaultValue=false)]
        public int? RoleId { get; set; }
        /// <summary>
        /// Gets or Sets IsRevoked
        /// </summary>
        [DataMember(Name="isRevoked", EmitDefaultValue=false)]
        public bool? IsRevoked { get; set; }
        /// <summary>
        /// Gets or Sets InvitedByUserId
        /// </summary>
        [DataMember(Name="invitedByUserId", EmitDefaultValue=false)]
        public int? InvitedByUserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoomUser {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  TransactionSideId: ").Append(TransactionSideId).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  IsRevoked: ").Append(IsRevoked).Append("\n");
            sb.Append("  InvitedByUserId: ").Append(InvitedByUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RoomUser);
        }

        /// <summary>
        /// Returns true if RoomUser instances are equal
        /// </summary>
        /// <param name="other">Instance of RoomUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoomUser other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.TransactionSideId == other.TransactionSideId ||
                    this.TransactionSideId != null &&
                    this.TransactionSideId.Equals(other.TransactionSideId)
                ) && 
                (
                    this.RoleId == other.RoleId ||
                    this.RoleId != null &&
                    this.RoleId.Equals(other.RoleId)
                ) && 
                (
                    this.IsRevoked == other.IsRevoked ||
                    this.IsRevoked != null &&
                    this.IsRevoked.Equals(other.IsRevoked)
                ) && 
                (
                    this.InvitedByUserId == other.InvitedByUserId ||
                    this.InvitedByUserId != null &&
                    this.InvitedByUserId.Equals(other.InvitedByUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.TransactionSideId != null)
                    hash = hash * 59 + this.TransactionSideId.GetHashCode();
                if (this.RoleId != null)
                    hash = hash * 59 + this.RoleId.GetHashCode();
                if (this.IsRevoked != null)
                    hash = hash * 59 + this.IsRevoked.GetHashCode();
                if (this.InvitedByUserId != null)
                    hash = hash * 59 + this.InvitedByUserId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
