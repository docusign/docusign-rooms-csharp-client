/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Rooms.Client.SwaggerDateConverter;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// TaskSummary
    /// </summary>
    [DataContract]
    public partial class TaskSummary :  IEquatable<TaskSummary>, IValidatableObject
    {
        public TaskSummary()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskSummary" /> class.
        /// </summary>
        /// <param name="TaskId">TaskId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="RequiresApproval">RequiresApproval.</param>
        /// <param name="DueDateTypeId">DueDateTypeId.</param>
        /// <param name="DueDateOffset">DueDateOffset.</param>
        /// <param name="FixedDueDate">FixedDueDate.</param>
        /// <param name="OwnerUserId">OwnerUserId.</param>
        /// <param name="CompletionDate">CompletionDate.</param>
        /// <param name="ApprovalDate">ApprovalDate.</param>
        /// <param name="RejectedDate">RejectedDate.</param>
        /// <param name="CreatedDate">CreatedDate.</param>
        /// <param name="IsDocumentTask">IsDocumentTask.</param>
        /// <param name="RequiresReview">RequiresReview.</param>
        public TaskSummary(int? TaskId = default(int?), string Name = default(string), bool? RequiresApproval = default(bool?), string DueDateTypeId = default(string), int? DueDateOffset = default(int?), DateTime FixedDueDate = default(DateTime), int? OwnerUserId = default(int?), DateTime CompletionDate = default(DateTime), DateTime ApprovalDate = default(DateTime), DateTime RejectedDate = default(DateTime), DateTime CreatedDate = default(DateTime), bool? IsDocumentTask = default(bool?), bool? RequiresReview = default(bool?))
        {
            this.TaskId = TaskId;
            this.Name = Name;
            this.RequiresApproval = RequiresApproval;
            this.DueDateTypeId = DueDateTypeId;
            this.DueDateOffset = DueDateOffset;
            this.FixedDueDate = FixedDueDate;
            this.OwnerUserId = OwnerUserId;
            this.CompletionDate = CompletionDate;
            this.ApprovalDate = ApprovalDate;
            this.RejectedDate = RejectedDate;
            this.CreatedDate = CreatedDate;
            this.IsDocumentTask = IsDocumentTask;
            this.RequiresReview = RequiresReview;
        }
        
        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [DataMember(Name="taskId", EmitDefaultValue=false)]
        public int? TaskId { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets RequiresApproval
        /// </summary>
        [DataMember(Name="requiresApproval", EmitDefaultValue=false)]
        public bool? RequiresApproval { get; set; }
        /// <summary>
        /// Gets or Sets DueDateTypeId
        /// </summary>
        [DataMember(Name="dueDateTypeId", EmitDefaultValue=false)]
        public string DueDateTypeId { get; set; }
        /// <summary>
        /// Gets or Sets DueDateOffset
        /// </summary>
        [DataMember(Name="dueDateOffset", EmitDefaultValue=false)]
        public int? DueDateOffset { get; set; }
        /// <summary>
        /// Gets or Sets FixedDueDate
        /// </summary>
        [DataMember(Name="fixedDueDate", EmitDefaultValue=false)]
        public DateTime FixedDueDate { get; set; }
        /// <summary>
        /// Gets or Sets OwnerUserId
        /// </summary>
        [DataMember(Name="ownerUserId", EmitDefaultValue=false)]
        public int? OwnerUserId { get; set; }
        /// <summary>
        /// Gets or Sets CompletionDate
        /// </summary>
        [DataMember(Name="completionDate", EmitDefaultValue=false)]
        public DateTime CompletionDate { get; set; }
        /// <summary>
        /// Gets or Sets ApprovalDate
        /// </summary>
        [DataMember(Name="approvalDate", EmitDefaultValue=false)]
        public DateTime ApprovalDate { get; set; }
        /// <summary>
        /// Gets or Sets RejectedDate
        /// </summary>
        [DataMember(Name="rejectedDate", EmitDefaultValue=false)]
        public DateTime RejectedDate { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets IsDocumentTask
        /// </summary>
        [DataMember(Name="isDocumentTask", EmitDefaultValue=false)]
        public bool? IsDocumentTask { get; set; }
        /// <summary>
        /// Gets or Sets RequiresReview
        /// </summary>
        [DataMember(Name="requiresReview", EmitDefaultValue=false)]
        public bool? RequiresReview { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskSummary {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequiresApproval: ").Append(RequiresApproval).Append("\n");
            sb.Append("  DueDateTypeId: ").Append(DueDateTypeId).Append("\n");
            sb.Append("  DueDateOffset: ").Append(DueDateOffset).Append("\n");
            sb.Append("  FixedDueDate: ").Append(FixedDueDate).Append("\n");
            sb.Append("  OwnerUserId: ").Append(OwnerUserId).Append("\n");
            sb.Append("  CompletionDate: ").Append(CompletionDate).Append("\n");
            sb.Append("  ApprovalDate: ").Append(ApprovalDate).Append("\n");
            sb.Append("  RejectedDate: ").Append(RejectedDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  IsDocumentTask: ").Append(IsDocumentTask).Append("\n");
            sb.Append("  RequiresReview: ").Append(RequiresReview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskSummary);
        }

        /// <summary>
        /// Returns true if TaskSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TaskId == other.TaskId ||
                    this.TaskId != null &&
                    this.TaskId.Equals(other.TaskId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RequiresApproval == other.RequiresApproval ||
                    this.RequiresApproval != null &&
                    this.RequiresApproval.Equals(other.RequiresApproval)
                ) && 
                (
                    this.DueDateTypeId == other.DueDateTypeId ||
                    this.DueDateTypeId != null &&
                    this.DueDateTypeId.Equals(other.DueDateTypeId)
                ) && 
                (
                    this.DueDateOffset == other.DueDateOffset ||
                    this.DueDateOffset != null &&
                    this.DueDateOffset.Equals(other.DueDateOffset)
                ) && 
                (
                    this.FixedDueDate == other.FixedDueDate ||
                    this.FixedDueDate != null &&
                    this.FixedDueDate.Equals(other.FixedDueDate)
                ) && 
                (
                    this.OwnerUserId == other.OwnerUserId ||
                    this.OwnerUserId != null &&
                    this.OwnerUserId.Equals(other.OwnerUserId)
                ) && 
                (
                    this.CompletionDate == other.CompletionDate ||
                    this.CompletionDate != null &&
                    this.CompletionDate.Equals(other.CompletionDate)
                ) && 
                (
                    this.ApprovalDate == other.ApprovalDate ||
                    this.ApprovalDate != null &&
                    this.ApprovalDate.Equals(other.ApprovalDate)
                ) && 
                (
                    this.RejectedDate == other.RejectedDate ||
                    this.RejectedDate != null &&
                    this.RejectedDate.Equals(other.RejectedDate)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.IsDocumentTask == other.IsDocumentTask ||
                    this.IsDocumentTask != null &&
                    this.IsDocumentTask.Equals(other.IsDocumentTask)
                ) && 
                (
                    this.RequiresReview == other.RequiresReview ||
                    this.RequiresReview != null &&
                    this.RequiresReview.Equals(other.RequiresReview)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TaskId != null)
                    hash = hash * 59 + this.TaskId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RequiresApproval != null)
                    hash = hash * 59 + this.RequiresApproval.GetHashCode();
                if (this.DueDateTypeId != null)
                    hash = hash * 59 + this.DueDateTypeId.GetHashCode();
                if (this.DueDateOffset != null)
                    hash = hash * 59 + this.DueDateOffset.GetHashCode();
                if (this.FixedDueDate != null)
                    hash = hash * 59 + this.FixedDueDate.GetHashCode();
                if (this.OwnerUserId != null)
                    hash = hash * 59 + this.OwnerUserId.GetHashCode();
                if (this.CompletionDate != null)
                    hash = hash * 59 + this.CompletionDate.GetHashCode();
                if (this.ApprovalDate != null)
                    hash = hash * 59 + this.ApprovalDate.GetHashCode();
                if (this.RejectedDate != null)
                    hash = hash * 59 + this.RejectedDate.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.IsDocumentTask != null)
                    hash = hash * 59 + this.IsDocumentTask.GetHashCode();
                if (this.RequiresReview != null)
                    hash = hash * 59 + this.RequiresReview.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
