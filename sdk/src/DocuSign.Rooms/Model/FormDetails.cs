/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Rooms.Client.SwaggerDateConverter;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// FormDetails
    /// </summary>
    [DataContract]
    public partial class FormDetails :  IEquatable<FormDetails>, IValidatableObject
    {
        public FormDetails()
        {
            // Empty Constructor
        }
        /// <summary>
        /// Gets or Sets FormId
        /// </summary>
        [DataMember(Name="formId", EmitDefaultValue=false)]
        public Guid? FormId { get; private set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; private set; }
        /// <summary>
        /// Gets or Sets LastUpdatedDate
        /// </summary>
        [DataMember(Name="lastUpdatedDate", EmitDefaultValue=false)]
        public DateTime LastUpdatedDate { get; private set; }
        /// <summary>
        /// Gets or Sets AvailableOnDate
        /// </summary>
        [DataMember(Name="availableOnDate", EmitDefaultValue=false)]
        public DateTime AvailableOnDate { get; private set; }
        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name="ownerName", EmitDefaultValue=false)]
        public string OwnerName { get; private set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }
        /// <summary>
        /// Gets or Sets NumberOfPages
        /// </summary>
        [DataMember(Name="numberOfPages", EmitDefaultValue=false)]
        public int? NumberOfPages { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormDetails {\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  AvailableOnDate: ").Append(AvailableOnDate).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  NumberOfPages: ").Append(NumberOfPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FormDetails);
        }

        /// <summary>
        /// Returns true if FormDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of FormDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FormId == other.FormId ||
                    this.FormId != null &&
                    this.FormId.Equals(other.FormId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.LastUpdatedDate == other.LastUpdatedDate ||
                    this.LastUpdatedDate != null &&
                    this.LastUpdatedDate.Equals(other.LastUpdatedDate)
                ) && 
                (
                    this.AvailableOnDate == other.AvailableOnDate ||
                    this.AvailableOnDate != null &&
                    this.AvailableOnDate.Equals(other.AvailableOnDate)
                ) && 
                (
                    this.OwnerName == other.OwnerName ||
                    this.OwnerName != null &&
                    this.OwnerName.Equals(other.OwnerName)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.NumberOfPages == other.NumberOfPages ||
                    this.NumberOfPages != null &&
                    this.NumberOfPages.Equals(other.NumberOfPages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FormId != null)
                    hash = hash * 59 + this.FormId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.LastUpdatedDate != null)
                    hash = hash * 59 + this.LastUpdatedDate.GetHashCode();
                if (this.AvailableOnDate != null)
                    hash = hash * 59 + this.AvailableOnDate.GetHashCode();
                if (this.OwnerName != null)
                    hash = hash * 59 + this.OwnerName.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.NumberOfPages != null)
                    hash = hash * 59 + this.NumberOfPages.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
