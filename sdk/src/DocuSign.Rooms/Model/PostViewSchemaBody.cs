/* 
 * ProofService API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Model representing the object passed to the insert view schema endpoint.
    /// </summary>
    [DataContract]
    public partial class PostViewSchemaBody :  IEquatable<PostViewSchemaBody>, IValidatableObject
    {
        public PostViewSchemaBody()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostViewSchemaBody" /> class.
        /// </summary>
        /// <param name="EntityType">Type of the entity. i.e room, user, envelope... (required).</param>
        /// <param name="EventType">Type of the event. This property depends on the source, the creator of an event. The proof service does not have any pre-establish list of events types.  It is totally up to the external service, that calls the proof service, to decide and manage their events types. (required).</param>
        /// <param name="Data">JSON based format representing the data to render. It&#39;s a partial part of the validation schema it is bound to. (required).</param>
        /// <param name="Authority">Audience or authority who can access the schema. It could be a title like \&quot;judge\&quot;, a denomination like \&quot;sender\&quot;, or any label you want like \&quot;everyone\&quot; or \&quot;level one of sensitiveness\&quot;.   This definition is up to the external service to define and to manage. However it is a mandatory field in the view schema definition. (required).</param>
        /// <param name="DataModelValidationVersion">Data model validation version. This object is bound to a data model validation schema at a specified version. (required).</param>
        public PostViewSchemaBody(string EntityType = default(string), string EventType = default(string), Object Data = default(Object), string Authority = default(string), int? DataModelValidationVersion = default(int?))
        {
            // to ensure "EntityType" is required (not null)
            if (EntityType == null)
            {
                throw new InvalidDataException("EntityType is a required property for PostViewSchemaBody and cannot be null");
            }
            else
            {
                this.EntityType = EntityType;
            }
            // to ensure "EventType" is required (not null)
            if (EventType == null)
            {
                throw new InvalidDataException("EventType is a required property for PostViewSchemaBody and cannot be null");
            }
            else
            {
                this.EventType = EventType;
            }
            // to ensure "Data" is required (not null)
            if (Data == null)
            {
                throw new InvalidDataException("Data is a required property for PostViewSchemaBody and cannot be null");
            }
            else
            {
                this.Data = Data;
            }
            // to ensure "Authority" is required (not null)
            if (Authority == null)
            {
                throw new InvalidDataException("Authority is a required property for PostViewSchemaBody and cannot be null");
            }
            else
            {
                this.Authority = Authority;
            }
            // to ensure "DataModelValidationVersion" is required (not null)
            if (DataModelValidationVersion == null)
            {
                throw new InvalidDataException("DataModelValidationVersion is a required property for PostViewSchemaBody and cannot be null");
            }
            else
            {
                this.DataModelValidationVersion = DataModelValidationVersion;
            }
        }
        
        /// <summary>
        /// Type of the entity. i.e room, user, envelope...
        /// </summary>
        /// <value>Type of the entity. i.e room, user, envelope...</value>
        [DataMember(Name="entity_type", EmitDefaultValue=false)]
        public string EntityType { get; set; }
        /// <summary>
        /// Type of the event. This property depends on the source, the creator of an event. The proof service does not have any pre-establish list of events types.  It is totally up to the external service, that calls the proof service, to decide and manage their events types.
        /// </summary>
        /// <value>Type of the event. This property depends on the source, the creator of an event. The proof service does not have any pre-establish list of events types.  It is totally up to the external service, that calls the proof service, to decide and manage their events types.</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; set; }
        /// <summary>
        /// JSON based format representing the data to render. It&#39;s a partial part of the validation schema it is bound to.
        /// </summary>
        /// <value>JSON based format representing the data to render. It&#39;s a partial part of the validation schema it is bound to.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Object Data { get; set; }
        /// <summary>
        /// Audience or authority who can access the schema. It could be a title like \&quot;judge\&quot;, a denomination like \&quot;sender\&quot;, or any label you want like \&quot;everyone\&quot; or \&quot;level one of sensitiveness\&quot;.   This definition is up to the external service to define and to manage. However it is a mandatory field in the view schema definition.
        /// </summary>
        /// <value>Audience or authority who can access the schema. It could be a title like \&quot;judge\&quot;, a denomination like \&quot;sender\&quot;, or any label you want like \&quot;everyone\&quot; or \&quot;level one of sensitiveness\&quot;.   This definition is up to the external service to define and to manage. However it is a mandatory field in the view schema definition.</value>
        [DataMember(Name="authority", EmitDefaultValue=false)]
        public string Authority { get; set; }
        /// <summary>
        /// Data model validation version. This object is bound to a data model validation schema at a specified version.
        /// </summary>
        /// <value>Data model validation version. This object is bound to a data model validation schema at a specified version.</value>
        [DataMember(Name="data_model_validation_version", EmitDefaultValue=false)]
        public int? DataModelValidationVersion { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostViewSchemaBody {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  DataModelValidationVersion: ").Append(DataModelValidationVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PostViewSchemaBody);
        }

        /// <summary>
        /// Returns true if PostViewSchemaBody instances are equal
        /// </summary>
        /// <param name="other">Instance of PostViewSchemaBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostViewSchemaBody other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EntityType == other.EntityType ||
                    this.EntityType != null &&
                    this.EntityType.Equals(other.EntityType)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.Authority == other.Authority ||
                    this.Authority != null &&
                    this.Authority.Equals(other.Authority)
                ) && 
                (
                    this.DataModelValidationVersion == other.DataModelValidationVersion ||
                    this.DataModelValidationVersion != null &&
                    this.DataModelValidationVersion.Equals(other.DataModelValidationVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EntityType != null)
                    hash = hash * 59 + this.EntityType.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.Authority != null)
                    hash = hash * 59 + this.Authority.GetHashCode();
                if (this.DataModelValidationVersion != null)
                    hash = hash * 59 + this.DataModelValidationVersion.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // DataModelValidationVersion (int?) maximum
            if(this.DataModelValidationVersion > (int?)2147483647)
            {
                yield return new ValidationResult("Invalid value for DataModelValidationVersion, must be a value less than or equal to 2147483647.", new [] { "DataModelValidationVersion" });
            }

            // DataModelValidationVersion (int?) minimum
            if(this.DataModelValidationVersion < (int?)0)
            {
                yield return new ValidationResult("Invalid value for DataModelValidationVersion, must be a value greater than or equal to 0.", new [] { "DataModelValidationVersion" });
            }

            yield break;
        }
    }

}
