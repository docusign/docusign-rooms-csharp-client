/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Rooms.Client.SwaggerDateConverter;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// ClassicManagerPermissions
    /// </summary>
    [DataContract]
    public partial class ClassicManagerPermissions :  IEquatable<ClassicManagerPermissions>, IValidatableObject
    {
        public ClassicManagerPermissions()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClassicManagerPermissions" /> class.
        /// </summary>
        /// <param name="IsVisibleInTransactionRooms">IsVisibleInTransactionRooms.</param>
        /// <param name="CanDeleteCompanyRooms">CanDeleteCompanyRooms.</param>
        /// <param name="CanDeleteCompanyDocuments">CanDeleteCompanyDocuments.</param>
        /// <param name="CanManageCompanyRooms">CanManageCompanyRooms.</param>
        /// <param name="CanManageCompanyAccount">CanManageCompanyAccount.</param>
        /// <param name="CanManageCompanySharedLibrary">CanManageCompanySharedLibrary.</param>
        /// <param name="CanManageCompanyMembers">CanManageCompanyMembers.</param>
        /// <param name="CanCloseCompanyRooms">CanCloseCompanyRooms.</param>
        /// <param name="CanApproveCompanyChecklists">CanApproveCompanyChecklists.</param>
        /// <param name="IsCompanySystemAdmin">IsCompanySystemAdmin.</param>
        /// <param name="IsRegionManager">IsRegionManager.</param>
        /// <param name="IsOfficeManager">IsOfficeManager.</param>
        /// <param name="AutoAccessToCompanyRooms">AutoAccessToCompanyRooms.</param>
        public ClassicManagerPermissions(bool? IsVisibleInTransactionRooms = default(bool?), bool? CanDeleteCompanyRooms = default(bool?), bool? CanDeleteCompanyDocuments = default(bool?), bool? CanManageCompanyRooms = default(bool?), bool? CanManageCompanyAccount = default(bool?), bool? CanManageCompanySharedLibrary = default(bool?), bool? CanManageCompanyMembers = default(bool?), bool? CanCloseCompanyRooms = default(bool?), bool? CanApproveCompanyChecklists = default(bool?), bool? IsCompanySystemAdmin = default(bool?), bool? IsRegionManager = default(bool?), bool? IsOfficeManager = default(bool?), bool? AutoAccessToCompanyRooms = default(bool?))
        {
            this.IsVisibleInTransactionRooms = IsVisibleInTransactionRooms;
            this.CanDeleteCompanyRooms = CanDeleteCompanyRooms;
            this.CanDeleteCompanyDocuments = CanDeleteCompanyDocuments;
            this.CanManageCompanyRooms = CanManageCompanyRooms;
            this.CanManageCompanyAccount = CanManageCompanyAccount;
            this.CanManageCompanySharedLibrary = CanManageCompanySharedLibrary;
            this.CanManageCompanyMembers = CanManageCompanyMembers;
            this.CanCloseCompanyRooms = CanCloseCompanyRooms;
            this.CanApproveCompanyChecklists = CanApproveCompanyChecklists;
            this.IsCompanySystemAdmin = IsCompanySystemAdmin;
            this.IsRegionManager = IsRegionManager;
            this.IsOfficeManager = IsOfficeManager;
            this.AutoAccessToCompanyRooms = AutoAccessToCompanyRooms;
        }
        
        /// <summary>
        /// Gets or Sets IsVisibleInTransactionRooms
        /// </summary>
        [DataMember(Name="isVisibleInTransactionRooms", EmitDefaultValue=false)]
        public bool? IsVisibleInTransactionRooms { get; set; }
        /// <summary>
        /// Gets or Sets CanDeleteCompanyRooms
        /// </summary>
        [DataMember(Name="canDeleteCompanyRooms", EmitDefaultValue=false)]
        public bool? CanDeleteCompanyRooms { get; set; }
        /// <summary>
        /// Gets or Sets CanDeleteCompanyDocuments
        /// </summary>
        [DataMember(Name="canDeleteCompanyDocuments", EmitDefaultValue=false)]
        public bool? CanDeleteCompanyDocuments { get; set; }
        /// <summary>
        /// Gets or Sets CanManageCompanyRooms
        /// </summary>
        [DataMember(Name="canManageCompanyRooms", EmitDefaultValue=false)]
        public bool? CanManageCompanyRooms { get; set; }
        /// <summary>
        /// Gets or Sets CanManageCompanyAccount
        /// </summary>
        [DataMember(Name="canManageCompanyAccount", EmitDefaultValue=false)]
        public bool? CanManageCompanyAccount { get; set; }
        /// <summary>
        /// Gets or Sets CanManageCompanySharedLibrary
        /// </summary>
        [DataMember(Name="canManageCompanySharedLibrary", EmitDefaultValue=false)]
        public bool? CanManageCompanySharedLibrary { get; set; }
        /// <summary>
        /// Gets or Sets CanManageCompanyMembers
        /// </summary>
        [DataMember(Name="canManageCompanyMembers", EmitDefaultValue=false)]
        public bool? CanManageCompanyMembers { get; set; }
        /// <summary>
        /// Gets or Sets CanCloseCompanyRooms
        /// </summary>
        [DataMember(Name="canCloseCompanyRooms", EmitDefaultValue=false)]
        public bool? CanCloseCompanyRooms { get; set; }
        /// <summary>
        /// Gets or Sets CanApproveCompanyChecklists
        /// </summary>
        [DataMember(Name="canApproveCompanyChecklists", EmitDefaultValue=false)]
        public bool? CanApproveCompanyChecklists { get; set; }
        /// <summary>
        /// Gets or Sets IsCompanySystemAdmin
        /// </summary>
        [DataMember(Name="isCompanySystemAdmin", EmitDefaultValue=false)]
        public bool? IsCompanySystemAdmin { get; set; }
        /// <summary>
        /// Gets or Sets IsRegionManager
        /// </summary>
        [DataMember(Name="isRegionManager", EmitDefaultValue=false)]
        public bool? IsRegionManager { get; set; }
        /// <summary>
        /// Gets or Sets IsOfficeManager
        /// </summary>
        [DataMember(Name="isOfficeManager", EmitDefaultValue=false)]
        public bool? IsOfficeManager { get; set; }
        /// <summary>
        /// Gets or Sets AutoAccessToCompanyRooms
        /// </summary>
        [DataMember(Name="autoAccessToCompanyRooms", EmitDefaultValue=false)]
        public bool? AutoAccessToCompanyRooms { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassicManagerPermissions {\n");
            sb.Append("  IsVisibleInTransactionRooms: ").Append(IsVisibleInTransactionRooms).Append("\n");
            sb.Append("  CanDeleteCompanyRooms: ").Append(CanDeleteCompanyRooms).Append("\n");
            sb.Append("  CanDeleteCompanyDocuments: ").Append(CanDeleteCompanyDocuments).Append("\n");
            sb.Append("  CanManageCompanyRooms: ").Append(CanManageCompanyRooms).Append("\n");
            sb.Append("  CanManageCompanyAccount: ").Append(CanManageCompanyAccount).Append("\n");
            sb.Append("  CanManageCompanySharedLibrary: ").Append(CanManageCompanySharedLibrary).Append("\n");
            sb.Append("  CanManageCompanyMembers: ").Append(CanManageCompanyMembers).Append("\n");
            sb.Append("  CanCloseCompanyRooms: ").Append(CanCloseCompanyRooms).Append("\n");
            sb.Append("  CanApproveCompanyChecklists: ").Append(CanApproveCompanyChecklists).Append("\n");
            sb.Append("  IsCompanySystemAdmin: ").Append(IsCompanySystemAdmin).Append("\n");
            sb.Append("  IsRegionManager: ").Append(IsRegionManager).Append("\n");
            sb.Append("  IsOfficeManager: ").Append(IsOfficeManager).Append("\n");
            sb.Append("  AutoAccessToCompanyRooms: ").Append(AutoAccessToCompanyRooms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClassicManagerPermissions);
        }

        /// <summary>
        /// Returns true if ClassicManagerPermissions instances are equal
        /// </summary>
        /// <param name="other">Instance of ClassicManagerPermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassicManagerPermissions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsVisibleInTransactionRooms == other.IsVisibleInTransactionRooms ||
                    this.IsVisibleInTransactionRooms != null &&
                    this.IsVisibleInTransactionRooms.Equals(other.IsVisibleInTransactionRooms)
                ) && 
                (
                    this.CanDeleteCompanyRooms == other.CanDeleteCompanyRooms ||
                    this.CanDeleteCompanyRooms != null &&
                    this.CanDeleteCompanyRooms.Equals(other.CanDeleteCompanyRooms)
                ) && 
                (
                    this.CanDeleteCompanyDocuments == other.CanDeleteCompanyDocuments ||
                    this.CanDeleteCompanyDocuments != null &&
                    this.CanDeleteCompanyDocuments.Equals(other.CanDeleteCompanyDocuments)
                ) && 
                (
                    this.CanManageCompanyRooms == other.CanManageCompanyRooms ||
                    this.CanManageCompanyRooms != null &&
                    this.CanManageCompanyRooms.Equals(other.CanManageCompanyRooms)
                ) && 
                (
                    this.CanManageCompanyAccount == other.CanManageCompanyAccount ||
                    this.CanManageCompanyAccount != null &&
                    this.CanManageCompanyAccount.Equals(other.CanManageCompanyAccount)
                ) && 
                (
                    this.CanManageCompanySharedLibrary == other.CanManageCompanySharedLibrary ||
                    this.CanManageCompanySharedLibrary != null &&
                    this.CanManageCompanySharedLibrary.Equals(other.CanManageCompanySharedLibrary)
                ) && 
                (
                    this.CanManageCompanyMembers == other.CanManageCompanyMembers ||
                    this.CanManageCompanyMembers != null &&
                    this.CanManageCompanyMembers.Equals(other.CanManageCompanyMembers)
                ) && 
                (
                    this.CanCloseCompanyRooms == other.CanCloseCompanyRooms ||
                    this.CanCloseCompanyRooms != null &&
                    this.CanCloseCompanyRooms.Equals(other.CanCloseCompanyRooms)
                ) && 
                (
                    this.CanApproveCompanyChecklists == other.CanApproveCompanyChecklists ||
                    this.CanApproveCompanyChecklists != null &&
                    this.CanApproveCompanyChecklists.Equals(other.CanApproveCompanyChecklists)
                ) && 
                (
                    this.IsCompanySystemAdmin == other.IsCompanySystemAdmin ||
                    this.IsCompanySystemAdmin != null &&
                    this.IsCompanySystemAdmin.Equals(other.IsCompanySystemAdmin)
                ) && 
                (
                    this.IsRegionManager == other.IsRegionManager ||
                    this.IsRegionManager != null &&
                    this.IsRegionManager.Equals(other.IsRegionManager)
                ) && 
                (
                    this.IsOfficeManager == other.IsOfficeManager ||
                    this.IsOfficeManager != null &&
                    this.IsOfficeManager.Equals(other.IsOfficeManager)
                ) && 
                (
                    this.AutoAccessToCompanyRooms == other.AutoAccessToCompanyRooms ||
                    this.AutoAccessToCompanyRooms != null &&
                    this.AutoAccessToCompanyRooms.Equals(other.AutoAccessToCompanyRooms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsVisibleInTransactionRooms != null)
                    hash = hash * 59 + this.IsVisibleInTransactionRooms.GetHashCode();
                if (this.CanDeleteCompanyRooms != null)
                    hash = hash * 59 + this.CanDeleteCompanyRooms.GetHashCode();
                if (this.CanDeleteCompanyDocuments != null)
                    hash = hash * 59 + this.CanDeleteCompanyDocuments.GetHashCode();
                if (this.CanManageCompanyRooms != null)
                    hash = hash * 59 + this.CanManageCompanyRooms.GetHashCode();
                if (this.CanManageCompanyAccount != null)
                    hash = hash * 59 + this.CanManageCompanyAccount.GetHashCode();
                if (this.CanManageCompanySharedLibrary != null)
                    hash = hash * 59 + this.CanManageCompanySharedLibrary.GetHashCode();
                if (this.CanManageCompanyMembers != null)
                    hash = hash * 59 + this.CanManageCompanyMembers.GetHashCode();
                if (this.CanCloseCompanyRooms != null)
                    hash = hash * 59 + this.CanCloseCompanyRooms.GetHashCode();
                if (this.CanApproveCompanyChecklists != null)
                    hash = hash * 59 + this.CanApproveCompanyChecklists.GetHashCode();
                if (this.IsCompanySystemAdmin != null)
                    hash = hash * 59 + this.IsCompanySystemAdmin.GetHashCode();
                if (this.IsRegionManager != null)
                    hash = hash * 59 + this.IsRegionManager.GetHashCode();
                if (this.IsOfficeManager != null)
                    hash = hash * 59 + this.IsOfficeManager.GetHashCode();
                if (this.AutoAccessToCompanyRooms != null)
                    hash = hash * 59 + this.AutoAccessToCompanyRooms.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
