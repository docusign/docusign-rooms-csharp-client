/* 
 * ProofService API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Object defining an error returned in an http response.
    /// </summary>
    [DataContract]
    public partial class HttpErrorResponse :  IEquatable<HttpErrorResponse>, IValidatableObject
    {
        public HttpErrorResponse()
        {
            // Empty Constructor
        }

        /// <summary>
        /// The code associated with the error condition.
        /// </summary>
        /// <value>The code associated with the error condition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorEnum
        {
            
            /// <summary>
            /// Enum Internalservererror for "internal_server_error"
            /// </summary>
            [EnumMember(Value = "internal_server_error")]
            Internalservererror,
            
            /// <summary>
            /// Enum Unauthorized for "unauthorized"
            /// </summary>
            [EnumMember(Value = "unauthorized")]
            Unauthorized,
            
            /// <summary>
            /// Enum Unauthorizedstrongauthrequired for "unauthorized_strong_auth_required"
            /// </summary>
            [EnumMember(Value = "unauthorized_strong_auth_required")]
            Unauthorizedstrongauthrequired,
            
            /// <summary>
            /// Enum Unauthorizedrecentcredsrequired for "unauthorized_recent_creds_required"
            /// </summary>
            [EnumMember(Value = "unauthorized_recent_creds_required")]
            Unauthorizedrecentcredsrequired,
            
            /// <summary>
            /// Enum Unauthorizedstrongauthandrecentcredsrequired for "unauthorized_strong_auth_and_recent_creds_required"
            /// </summary>
            [EnumMember(Value = "unauthorized_strong_auth_and_recent_creds_required")]
            Unauthorizedstrongauthandrecentcredsrequired,
            
            /// <summary>
            /// Enum Unauthorizedjwtbearerrequired for "unauthorized_jwt_bearer_required"
            /// </summary>
            [EnumMember(Value = "unauthorized_jwt_bearer_required")]
            Unauthorizedjwtbearerrequired,
            
            /// <summary>
            /// Enum Invalidrequestparametervalue for "invalid_request_parameter_value"
            /// </summary>
            [EnumMember(Value = "invalid_request_parameter_value")]
            Invalidrequestparametervalue,
            
            /// <summary>
            /// Enum Consentrequired for "consent_required"
            /// </summary>
            [EnumMember(Value = "consent_required")]
            Consentrequired,
            
            /// <summary>
            /// Enum Prooflocked for "proof_locked"
            /// </summary>
            [EnumMember(Value = "proof_locked")]
            Prooflocked,
            
            /// <summary>
            /// Enum Userlocked for "user_locked"
            /// </summary>
            [EnumMember(Value = "user_locked")]
            Userlocked,
            
            /// <summary>
            /// Enum Notenoughproofsfortfa for "not_enough_proofs_for_tfa"
            /// </summary>
            [EnumMember(Value = "not_enough_proofs_for_tfa")]
            Notenoughproofsfortfa,
            
            /// <summary>
            /// Enum Nocodesubmitted for "no_code_submitted"
            /// </summary>
            [EnumMember(Value = "no_code_submitted")]
            Nocodesubmitted,
            
            /// <summary>
            /// Enum Invalidchannel for "invalid_channel"
            /// </summary>
            [EnumMember(Value = "invalid_channel")]
            Invalidchannel,
            
            /// <summary>
            /// Enum Tfavoiceblocked for "tfa_voice_blocked"
            /// </summary>
            [EnumMember(Value = "tfa_voice_blocked")]
            Tfavoiceblocked,
            
            /// <summary>
            /// Enum Proofalreadyexists for "proof_already_exists"
            /// </summary>
            [EnumMember(Value = "proof_already_exists")]
            Proofalreadyexists,
            
            /// <summary>
            /// Enum Toomanyproofs for "too_many_proofs"
            /// </summary>
            [EnumMember(Value = "too_many_proofs")]
            Toomanyproofs,
            
            /// <summary>
            /// Enum Toomanyauthenticatorapps for "too_many_authenticator_apps"
            /// </summary>
            [EnumMember(Value = "too_many_authenticator_apps")]
            Toomanyauthenticatorapps,
            
            /// <summary>
            /// Enum Timespanoutofrange for "timespan_out_of_range"
            /// </summary>
            [EnumMember(Value = "timespan_out_of_range")]
            Timespanoutofrange,
            
            /// <summary>
            /// Enum Cantdeleteprimaryemailproof for "cant_delete_primary_email_proof"
            /// </summary>
            [EnumMember(Value = "cant_delete_primary_email_proof")]
            Cantdeleteprimaryemailproof,
            
            /// <summary>
            /// Enum Passwordchangenotallowed for "password_change_not_allowed"
            /// </summary>
            [EnumMember(Value = "password_change_not_allowed")]
            Passwordchangenotallowed,
            
            /// <summary>
            /// Enum Emailchangenotallowed for "email_change_not_allowed"
            /// </summary>
            [EnumMember(Value = "email_change_not_allowed")]
            Emailchangenotallowed,
            
            /// <summary>
            /// Enum Cannotusesameemail for "cannot_use_same_email"
            /// </summary>
            [EnumMember(Value = "cannot_use_same_email")]
            Cannotusesameemail,
            
            /// <summary>
            /// Enum Invalidcode for "invalid_code"
            /// </summary>
            [EnumMember(Value = "invalid_code")]
            Invalidcode,
            
            /// <summary>
            /// Enum Invalidorganization for "invalid_organization"
            /// </summary>
            [EnumMember(Value = "invalid_organization")]
            Invalidorganization,
            
            /// <summary>
            /// Enum Invalidorganizationname for "invalid_organization_name"
            /// </summary>
            [EnumMember(Value = "invalid_organization_name")]
            Invalidorganizationname,
            
            /// <summary>
            /// Enum Organizationdefaultaccountcannotbedeleted for "organization_default_account_cannot_be_deleted"
            /// </summary>
            [EnumMember(Value = "organization_default_account_cannot_be_deleted")]
            Organizationdefaultaccountcannotbedeleted,
            
            /// <summary>
            /// Enum Invalidorganizationadmin for "invalid_organization_admin"
            /// </summary>
            [EnumMember(Value = "invalid_organization_admin")]
            Invalidorganizationadmin,
            
            /// <summary>
            /// Enum Invalidorganizationadminuser for "invalid_organization_admin_user"
            /// </summary>
            [EnumMember(Value = "invalid_organization_admin_user")]
            Invalidorganizationadminuser,
            
            /// <summary>
            /// Enum Organizationadmincannotremoveself for "organization_admin_cannot_remove_self"
            /// </summary>
            [EnumMember(Value = "organization_admin_cannot_remove_self")]
            Organizationadmincannotremoveself,
            
            /// <summary>
            /// Enum Adminemailalreadymappedtoorganization for "admin_email_already_mapped_to_organization"
            /// </summary>
            [EnumMember(Value = "admin_email_already_mapped_to_organization")]
            Adminemailalreadymappedtoorganization,
            
            /// <summary>
            /// Enum Adminuseralreadymappedtoorganization for "admin_user_already_mapped_to_organization"
            /// </summary>
            [EnumMember(Value = "admin_user_already_mapped_to_organization")]
            Adminuseralreadymappedtoorganization,
            
            /// <summary>
            /// Enum Invalidorganizationaccount for "invalid_organization_account"
            /// </summary>
            [EnumMember(Value = "invalid_organization_account")]
            Invalidorganizationaccount,
            
            /// <summary>
            /// Enum Accountalreadymappedtoanorganization for "account_already_mapped_to_an_organization"
            /// </summary>
            [EnumMember(Value = "account_already_mapped_to_an_organization")]
            Accountalreadymappedtoanorganization,
            
            /// <summary>
            /// Enum Invalidaccount for "invalid_account"
            /// </summary>
            [EnumMember(Value = "invalid_account")]
            Invalidaccount,
            
            /// <summary>
            /// Enum Invalidpermissionprofile for "invalid_permission_profile"
            /// </summary>
            [EnumMember(Value = "invalid_permission_profile")]
            Invalidpermissionprofile,
            
            /// <summary>
            /// Enum Invalidmembergroup for "invalid_member_group"
            /// </summary>
            [EnumMember(Value = "invalid_member_group")]
            Invalidmembergroup,
            
            /// <summary>
            /// Enum Invalidlanguageculture for "invalid_language_culture"
            /// </summary>
            [EnumMember(Value = "invalid_language_culture")]
            Invalidlanguageculture,
            
            /// <summary>
            /// Enum Invalidpasswordresetinactiveuser for "invalid_password_reset_inactive_user"
            /// </summary>
            [EnumMember(Value = "invalid_password_reset_inactive_user")]
            Invalidpasswordresetinactiveuser,
            
            /// <summary>
            /// Enum Invalidpasswordresetfederateduser for "invalid_password_reset_federated_user"
            /// </summary>
            [EnumMember(Value = "invalid_password_reset_federated_user")]
            Invalidpasswordresetfederateduser,
            
            /// <summary>
            /// Enum Invalidemailchangealreadyinuse for "invalid_email_change_already_in_use"
            /// </summary>
            [EnumMember(Value = "invalid_email_change_already_in_use")]
            Invalidemailchangealreadyinuse,
            
            /// <summary>
            /// Enum Invalidemailchangefederateduser for "invalid_email_change_federated_user"
            /// </summary>
            [EnumMember(Value = "invalid_email_change_federated_user")]
            Invalidemailchangefederateduser,
            
            /// <summary>
            /// Enum Invalidemailchangedomainreserved for "invalid_email_change_domain_reserved"
            /// </summary>
            [EnumMember(Value = "invalid_email_change_domain_reserved")]
            Invalidemailchangedomainreserved,
            
            /// <summary>
            /// Enum Maxkeysallowed for "max_keys_allowed"
            /// </summary>
            [EnumMember(Value = "max_keys_allowed")]
            Maxkeysallowed,
            
            /// <summary>
            /// Enum Invaliduser for "invalid_user"
            /// </summary>
            [EnumMember(Value = "invalid_user")]
            Invaliduser,
            
            /// <summary>
            /// Enum Invalidgrant for "invalid_grant"
            /// </summary>
            [EnumMember(Value = "invalid_grant")]
            Invalidgrant,
            
            /// <summary>
            /// Enum Invalidrequest for "invalid_request"
            /// </summary>
            [EnumMember(Value = "invalid_request")]
            Invalidrequest,
            
            /// <summary>
            /// Enum Norecoveryinfofound for "no_recovery_info_found"
            /// </summary>
            [EnumMember(Value = "no_recovery_info_found")]
            Norecoveryinfofound,
            
            /// <summary>
            /// Enum Usernotfound for "user_not_found"
            /// </summary>
            [EnumMember(Value = "user_not_found")]
            Usernotfound,
            
            /// <summary>
            /// Enum UserNotFound for "UserNotFound"
            /// </summary>
            [EnumMember(Value = "UserNotFound")]
            UserNotFound,
            
            /// <summary>
            /// Enum Invalidterm for "invalid_term"
            /// </summary>
            [EnumMember(Value = "invalid_term")]
            Invalidterm,
            
            /// <summary>
            /// Enum Invalidproductionaccountid for "invalid_production_account_id"
            /// </summary>
            [EnumMember(Value = "invalid_production_account_id")]
            Invalidproductionaccountid,
            
            /// <summary>
            /// Enum Productionaccountidnotadmin for "production_account_id_not_admin"
            /// </summary>
            [EnumMember(Value = "production_account_id_not_admin")]
            Productionaccountidnotadmin,
            
            /// <summary>
            /// Enum Envelopenotsent for "envelope_not_sent"
            /// </summary>
            [EnumMember(Value = "envelope_not_sent")]
            Envelopenotsent,
            
            /// <summary>
            /// Enum Passwordchangevalidationfailed for "password_change_validation_failed"
            /// </summary>
            [EnumMember(Value = "password_change_validation_failed")]
            Passwordchangevalidationfailed,
            
            /// <summary>
            /// Enum Passwordvalidationquestionscount for "password_validation_questions_count"
            /// </summary>
            [EnumMember(Value = "password_validation_questions_count")]
            Passwordvalidationquestionscount,
            
            /// <summary>
            /// Enum Passwordvalidationcomplexity for "password_validation_complexity"
            /// </summary>
            [EnumMember(Value = "password_validation_complexity")]
            Passwordvalidationcomplexity,
            
            /// <summary>
            /// Enum Passwordvalidationhistory for "password_validation_history"
            /// </summary>
            [EnumMember(Value = "password_validation_history")]
            Passwordvalidationhistory,
            
            /// <summary>
            /// Enum Passwordvalidationbanned for "password_validation_banned"
            /// </summary>
            [EnumMember(Value = "password_validation_banned")]
            Passwordvalidationbanned,
            
            /// <summary>
            /// Enum Ssonotallowed for "sso_not_allowed"
            /// </summary>
            [EnumMember(Value = "sso_not_allowed")]
            Ssonotallowed,
            
            /// <summary>
            /// Enum Usernameemailawaitingactivation for "username_email_awaiting_activation"
            /// </summary>
            [EnumMember(Value = "username_email_awaiting_activation")]
            Usernameemailawaitingactivation,
            
            /// <summary>
            /// Enum Invalidemailaddress for "invalid_email_address"
            /// </summary>
            [EnumMember(Value = "invalid_email_address")]
            Invalidemailaddress,
            
            /// <summary>
            /// Enum Invalidsendactivationrequest for "invalid_send_activation_request"
            /// </summary>
            [EnumMember(Value = "invalid_send_activation_request")]
            Invalidsendactivationrequest,
            
            /// <summary>
            /// Enum Invalidorganizationdefaultaccount for "invalid_organization_default_account"
            /// </summary>
            [EnumMember(Value = "invalid_organization_default_account")]
            Invalidorganizationdefaultaccount,
            
            /// <summary>
            /// Enum Signupinvalidinvitetoken for "signup_invalid_invite_token"
            /// </summary>
            [EnumMember(Value = "signup_invalid_invite_token")]
            Signupinvalidinvitetoken,
            
            /// <summary>
            /// Enum Invitenotenabledforclient for "invite_not_enabled_for_client"
            /// </summary>
            [EnumMember(Value = "invite_not_enabled_for_client")]
            Invitenotenabledforclient,
            
            /// <summary>
            /// Enum Usernameemailalreadyexists for "username_email_already_exists"
            /// </summary>
            [EnumMember(Value = "username_email_already_exists")]
            Usernameemailalreadyexists,
            
            /// <summary>
            /// Enum IdentityProviderFriendlyNameAlreadyInUse for "IdentityProviderFriendlyNameAlreadyInUse"
            /// </summary>
            [EnumMember(Value = "IdentityProviderFriendlyNameAlreadyInUse")]
            IdentityProviderFriendlyNameAlreadyInUse,
            
            /// <summary>
            /// Enum IdentityProviderIssuerAlreadyInUse for "IdentityProviderIssuerAlreadyInUse"
            /// </summary>
            [EnumMember(Value = "IdentityProviderIssuerAlreadyInUse")]
            IdentityProviderIssuerAlreadyInUse,
            
            /// <summary>
            /// Enum IdentityProviderInsertFailed for "IdentityProviderInsertFailed"
            /// </summary>
            [EnumMember(Value = "IdentityProviderInsertFailed")]
            IdentityProviderInsertFailed,
            
            /// <summary>
            /// Enum Invaliduserdefaultaccount for "invalid_user_default_account"
            /// </summary>
            [EnumMember(Value = "invalid_user_default_account")]
            Invaliduserdefaultaccount,
            
            /// <summary>
            /// Enum Maxmembersreached for "max_members_reached"
            /// </summary>
            [EnumMember(Value = "max_members_reached")]
            Maxmembersreached,
            
            /// <summary>
            /// Enum Invalidlocale for "invalid_locale"
            /// </summary>
            [EnumMember(Value = "invalid_locale")]
            Invalidlocale,
            
            /// <summary>
            /// Enum OrganizationReservedDomainVerifyFailed for "OrganizationReservedDomainVerifyFailed"
            /// </summary>
            [EnumMember(Value = "OrganizationReservedDomainVerifyFailed")]
            OrganizationReservedDomainVerifyFailed,
            
            /// <summary>
            /// Enum OrganizationInvalid for "OrganizationInvalid"
            /// </summary>
            [EnumMember(Value = "OrganizationInvalid")]
            OrganizationInvalid,
            
            /// <summary>
            /// Enum OrganizationReservedDomainInvalidHostName for "OrganizationReservedDomainInvalidHostName"
            /// </summary>
            [EnumMember(Value = "OrganizationReservedDomainInvalidHostName")]
            OrganizationReservedDomainInvalidHostName,
            
            /// <summary>
            /// Enum OrganizationReservedDomainInsertFailed for "OrganizationReservedDomainInsertFailed"
            /// </summary>
            [EnumMember(Value = "OrganizationReservedDomainInsertFailed")]
            OrganizationReservedDomainInsertFailed,
            
            /// <summary>
            /// Enum OrganizationReservedDomainHostNameMismatch for "OrganizationReservedDomainHostNameMismatch"
            /// </summary>
            [EnumMember(Value = "OrganizationReservedDomainHostNameMismatch")]
            OrganizationReservedDomainHostNameMismatch,
            
            /// <summary>
            /// Enum OrganizationReservedDomainInvalid for "OrganizationReservedDomainInvalid"
            /// </summary>
            [EnumMember(Value = "OrganizationReservedDomainInvalid")]
            OrganizationReservedDomainInvalid,
            
            /// <summary>
            /// Enum OrganizationReservedDomainNotFound for "OrganizationReservedDomainNotFound"
            /// </summary>
            [EnumMember(Value = "OrganizationReservedDomainNotFound")]
            OrganizationReservedDomainNotFound,
            
            /// <summary>
            /// Enum OrganizationOrganizationReservedDomainMismatch for "OrganizationOrganizationReservedDomainMismatch"
            /// </summary>
            [EnumMember(Value = "OrganizationOrganizationReservedDomainMismatch")]
            OrganizationOrganizationReservedDomainMismatch,
            
            /// <summary>
            /// Enum InvalidModel for "InvalidModel"
            /// </summary>
            [EnumMember(Value = "InvalidModel")]
            InvalidModel,
            
            /// <summary>
            /// Enum ClientApplicationMaxReached for "ClientApplicationMaxReached"
            /// </summary>
            [EnumMember(Value = "ClientApplicationMaxReached")]
            ClientApplicationMaxReached,
            
            /// <summary>
            /// Enum ClientApplicationInsertFailed for "ClientApplicationInsertFailed"
            /// </summary>
            [EnumMember(Value = "ClientApplicationInsertFailed")]
            ClientApplicationInsertFailed,
            
            /// <summary>
            /// Enum ClientApplicationDeleteFailed for "ClientApplicationDeleteFailed"
            /// </summary>
            [EnumMember(Value = "ClientApplicationDeleteFailed")]
            ClientApplicationDeleteFailed,
            
            /// <summary>
            /// Enum IdentityProviderInvalid for "IdentityProviderInvalid"
            /// </summary>
            [EnumMember(Value = "IdentityProviderInvalid")]
            IdentityProviderInvalid,
            
            /// <summary>
            /// Enum IdentityProviderCertificateInvalid for "IdentityProviderCertificateInvalid"
            /// </summary>
            [EnumMember(Value = "IdentityProviderCertificateInvalid")]
            IdentityProviderCertificateInvalid,
            
            /// <summary>
            /// Enum IdentityProviderCertificateMismatch for "IdentityProviderCertificateMismatch"
            /// </summary>
            [EnumMember(Value = "IdentityProviderCertificateMismatch")]
            IdentityProviderCertificateMismatch,
            
            /// <summary>
            /// Enum IdentityProviderNotFound for "IdentityProviderNotFound"
            /// </summary>
            [EnumMember(Value = "IdentityProviderNotFound")]
            IdentityProviderNotFound,
            
            /// <summary>
            /// Enum OrganizationIdentityProviderMismatch for "OrganizationIdentityProviderMismatch"
            /// </summary>
            [EnumMember(Value = "OrganizationIdentityProviderMismatch")]
            OrganizationIdentityProviderMismatch,
            
            /// <summary>
            /// Enum Missingidentityproviderids for "missing_identity_provider_ids"
            /// </summary>
            [EnumMember(Value = "missing_identity_provider_ids")]
            Missingidentityproviderids,
            
            /// <summary>
            /// Enum AppReviewJobNotFound for "AppReviewJobNotFound"
            /// </summary>
            [EnumMember(Value = "AppReviewJobNotFound")]
            AppReviewJobNotFound,
            
            /// <summary>
            /// Enum AppReviewJobInsertFailed for "AppReviewJobInsertFailed"
            /// </summary>
            [EnumMember(Value = "AppReviewJobInsertFailed")]
            AppReviewJobInsertFailed,
            
            /// <summary>
            /// Enum AppReviewJobExpired for "AppReviewJobExpired"
            /// </summary>
            [EnumMember(Value = "AppReviewJobExpired")]
            AppReviewJobExpired,
            
            /// <summary>
            /// Enum ReactivationOfRedundantMembership for "ReactivationOfRedundantMembership"
            /// </summary>
            [EnumMember(Value = "ReactivationOfRedundantMembership")]
            ReactivationOfRedundantMembership,
            
            /// <summary>
            /// Enum Appliancepoolinternalservererror for "appliance_pool_internal_server_error"
            /// </summary>
            [EnumMember(Value = "appliance_pool_internal_server_error")]
            Appliancepoolinternalservererror,
            
            /// <summary>
            /// Enum Cannotdeletereferencedappliancepool for "cannot_delete_referenced_appliance_pool"
            /// </summary>
            [EnumMember(Value = "cannot_delete_referenced_appliance_pool")]
            Cannotdeletereferencedappliancepool,
            
            /// <summary>
            /// Enum Cannotdeletelastappliance for "cannot_delete_last_appliance"
            /// </summary>
            [EnumMember(Value = "cannot_delete_last_appliance")]
            Cannotdeletelastappliance,
            
            /// <summary>
            /// Enum Appliancetypemismatch for "appliance_type_mismatch"
            /// </summary>
            [EnumMember(Value = "appliance_type_mismatch")]
            Appliancetypemismatch,
            
            /// <summary>
            /// Enum Invalidapplianceid for "invalid_appliance_id"
            /// </summary>
            [EnumMember(Value = "invalid_appliance_id")]
            Invalidapplianceid,
            
            /// <summary>
            /// Enum Appliancepoolidmismatch for "appliance_pool_id_mismatch"
            /// </summary>
            [EnumMember(Value = "appliance_pool_id_mismatch")]
            Appliancepoolidmismatch,
            
            /// <summary>
            /// Enum Appliancepoolidinvalid for "appliance_pool_id_invalid"
            /// </summary>
            [EnumMember(Value = "appliance_pool_id_invalid")]
            Appliancepoolidinvalid,
            
            /// <summary>
            /// Enum Organizationidmismatch for "organization_id_mismatch"
            /// </summary>
            [EnumMember(Value = "organization_id_mismatch")]
            Organizationidmismatch,
            
            /// <summary>
            /// Enum Invalidappliancetype for "invalid_appliance_type"
            /// </summary>
            [EnumMember(Value = "invalid_appliance_type")]
            Invalidappliancetype,
            
            /// <summary>
            /// Enum Notlegacyaccount for "not_legacy_account"
            /// </summary>
            [EnumMember(Value = "not_legacy_account")]
            Notlegacyaccount,
            
            /// <summary>
            /// Enum Accountalreadylinked for "account_already_linked"
            /// </summary>
            [EnumMember(Value = "account_already_linked")]
            Accountalreadylinked,
            
            /// <summary>
            /// Enum Noapplianceinpool for "no_appliance_in_pool"
            /// </summary>
            [EnumMember(Value = "no_appliance_in_pool")]
            Noapplianceinpool,
            
            /// <summary>
            /// Enum Appliancetypeendpointmismatch for "appliance_type_endpoint_mismatch"
            /// </summary>
            [EnumMember(Value = "appliance_type_endpoint_mismatch")]
            Appliancetypeendpointmismatch,
            
            /// <summary>
            /// Enum Invalidappliancestatus for "invalid_appliance_status"
            /// </summary>
            [EnumMember(Value = "invalid_appliance_status")]
            Invalidappliancestatus,
            
            /// <summary>
            /// Enum Invalidorganizationid for "invalid_organization_id"
            /// </summary>
            [EnumMember(Value = "invalid_organization_id")]
            Invalidorganizationid,
            
            /// <summary>
            /// Enum Applianceadderror for "appliance_add_error"
            /// </summary>
            [EnumMember(Value = "appliance_add_error")]
            Applianceadderror,
            
            /// <summary>
            /// Enum Applianceupdateerror for "appliance_update_error"
            /// </summary>
            [EnumMember(Value = "appliance_update_error")]
            Applianceupdateerror,
            
            /// <summary>
            /// Enum Appliancegetlegacyerror for "appliance_get_legacy_error"
            /// </summary>
            [EnumMember(Value = "appliance_get_legacy_error")]
            Appliancegetlegacyerror,
            
            /// <summary>
            /// Enum Appliancegetpoolsummaryerror for "appliance_get_pool_summary_error"
            /// </summary>
            [EnumMember(Value = "appliance_get_pool_summary_error")]
            Appliancegetpoolsummaryerror,
            
            /// <summary>
            /// Enum Appliancehealthcheckerror for "appliance_health_check_error"
            /// </summary>
            [EnumMember(Value = "appliance_health_check_error")]
            Appliancehealthcheckerror,
            
            /// <summary>
            /// Enum Applianceaccounthasusedpoolerror for "appliance_account_has_used_pool_error"
            /// </summary>
            [EnumMember(Value = "appliance_account_has_used_pool_error")]
            Applianceaccounthasusedpoolerror,
            
            /// <summary>
            /// Enum Useridentitynotfound for "user_identity_not_found"
            /// </summary>
            [EnumMember(Value = "user_identity_not_found")]
            Useridentitynotfound,
            
            /// <summary>
            /// Enum Partnernotfound for "partner_not_found"
            /// </summary>
            [EnumMember(Value = "partner_not_found")]
            Partnernotfound,
            
            /// <summary>
            /// Enum Invalidplanid for "invalid_plan_id"
            /// </summary>
            [EnumMember(Value = "invalid_plan_id")]
            Invalidplanid,
            
            /// <summary>
            /// Enum Invaliddistributorcode for "invalid_distributor_code"
            /// </summary>
            [EnumMember(Value = "invalid_distributor_code")]
            Invaliddistributorcode,
            
            /// <summary>
            /// Enum Invalidaccountname for "invalid_account_name"
            /// </summary>
            [EnumMember(Value = "invalid_account_name")]
            Invalidaccountname,
            
            /// <summary>
            /// Enum Createaccounterror for "create_account_error"
            /// </summary>
            [EnumMember(Value = "create_account_error")]
            Createaccounterror,
            
            /// <summary>
            /// Enum Ordersearchinvalid for "order_search_invalid"
            /// </summary>
            [EnumMember(Value = "order_search_invalid")]
            Ordersearchinvalid,
            
            /// <summary>
            /// Enum Invalidaccountid for "invalid_account_id"
            /// </summary>
            [EnumMember(Value = "invalid_account_id")]
            Invalidaccountid,
            
            /// <summary>
            /// Enum Invalidaccountaddress for "invalid_account_address"
            /// </summary>
            [EnumMember(Value = "invalid_account_address")]
            Invalidaccountaddress,
            
            /// <summary>
            /// Enum Invalidaccountadminuser for "invalid_account_admin_user"
            /// </summary>
            [EnumMember(Value = "invalid_account_admin_user")]
            Invalidaccountadminuser,
            
            /// <summary>
            /// Enum Partneraccountuserexists for "partner_account_user_exists"
            /// </summary>
            [EnumMember(Value = "partner_account_user_exists")]
            Partneraccountuserexists,
            
            /// <summary>
            /// Enum Partneraccountemailreserved for "partner_account_email_reserved"
            /// </summary>
            [EnumMember(Value = "partner_account_email_reserved")]
            Partneraccountemailreserved,
            
            /// <summary>
            /// Enum Partneraccountdomainmanagedbyidentityprovider for "partner_account_domain_managed_by_identity_provider"
            /// </summary>
            [EnumMember(Value = "partner_account_domain_managed_by_identity_provider")]
            Partneraccountdomainmanagedbyidentityprovider,
            
            /// <summary>
            /// Enum Partneraccountemailhasfreetrial for "partner_account_email_has_free_trial"
            /// </summary>
            [EnumMember(Value = "partner_account_email_has_free_trial")]
            Partneraccountemailhasfreetrial,
            
            /// <summary>
            /// Enum Partneraccounterror for "partner_account_error"
            /// </summary>
            [EnumMember(Value = "partner_account_error")]
            Partneraccounterror,
            
            /// <summary>
            /// Enum Accountnotassociatedwithpartner for "account_not_associated_with_partner"
            /// </summary>
            [EnumMember(Value = "account_not_associated_with_partner")]
            Accountnotassociatedwithpartner,
            
            /// <summary>
            /// Enum Accountnotfound for "account_not_found"
            /// </summary>
            [EnumMember(Value = "account_not_found")]
            Accountnotfound,
            
            /// <summary>
            /// Enum Accountclosed for "account_closed"
            /// </summary>
            [EnumMember(Value = "account_closed")]
            Accountclosed,
            
            /// <summary>
            /// Enum Partnerbillingeventnotfound for "partner_billing_event_not_found"
            /// </summary>
            [EnumMember(Value = "partner_billing_event_not_found")]
            Partnerbillingeventnotfound,
            
            /// <summary>
            /// Enum Partnereventnotfound for "partner_event_not_found"
            /// </summary>
            [EnumMember(Value = "partner_event_not_found")]
            Partnereventnotfound,
            
            /// <summary>
            /// Enum Invalidpartnerid for "invalid_partner_id"
            /// </summary>
            [EnumMember(Value = "invalid_partner_id")]
            Invalidpartnerid,
            
            /// <summary>
            /// Enum Invalideventtype for "invalid_event_type"
            /// </summary>
            [EnumMember(Value = "invalid_event_type")]
            Invalideventtype,
            
            /// <summary>
            /// Enum Invalidstatus for "invalid_status"
            /// </summary>
            [EnumMember(Value = "invalid_status")]
            Invalidstatus,
            
            /// <summary>
            /// Enum Invalidretrycount for "invalid_retry_count"
            /// </summary>
            [EnumMember(Value = "invalid_retry_count")]
            Invalidretrycount,
            
            /// <summary>
            /// Enum Partneridcannotbeupdated for "partner_id_cannot_be_updated"
            /// </summary>
            [EnumMember(Value = "partner_id_cannot_be_updated")]
            Partneridcannotbeupdated,
            
            /// <summary>
            /// Enum Eventtypecannotbeupdated for "event_type_cannot_be_updated"
            /// </summary>
            [EnumMember(Value = "event_type_cannot_be_updated")]
            Eventtypecannotbeupdated,
            
            /// <summary>
            /// Enum Eventdatecannotbeupdated for "event_date_cannot_be_updated"
            /// </summary>
            [EnumMember(Value = "event_date_cannot_be_updated")]
            Eventdatecannotbeupdated,
            
            /// <summary>
            /// Enum Eventtracetokencannotbeupdated for "event_trace_token_cannot_be_updated"
            /// </summary>
            [EnumMember(Value = "event_trace_token_cannot_be_updated")]
            Eventtracetokencannotbeupdated,
            
            /// <summary>
            /// Enum Eventcorrelationidcannotbeupdated for "event_correlation_id_cannot_be_updated"
            /// </summary>
            [EnumMember(Value = "event_correlation_id_cannot_be_updated")]
            Eventcorrelationidcannotbeupdated,
            
            /// <summary>
            /// Enum Eventpropertiescannotbeupdated for "event_properties_cannot_be_updated"
            /// </summary>
            [EnumMember(Value = "event_properties_cannot_be_updated")]
            Eventpropertiescannotbeupdated,
            
            /// <summary>
            /// Enum Eventpropertiescannotbeadded for "event_properties_cannot_be_added"
            /// </summary>
            [EnumMember(Value = "event_properties_cannot_be_added")]
            Eventpropertiescannotbeadded,
            
            /// <summary>
            /// Enum Invalidclientid for "invalid_client_id"
            /// </summary>
            [EnumMember(Value = "invalid_client_id")]
            Invalidclientid,
            
            /// <summary>
            /// Enum Clientnotfound for "client_not_found"
            /// </summary>
            [EnumMember(Value = "client_not_found")]
            Clientnotfound,
            
            /// <summary>
            /// Enum Plannotfound for "plan_not_found"
            /// </summary>
            [EnumMember(Value = "plan_not_found")]
            Plannotfound,
            
            /// <summary>
            /// Enum Partnerhasnoplans for "partner_has_no_plans"
            /// </summary>
            [EnumMember(Value = "partner_has_no_plans")]
            Partnerhasnoplans,
            
            /// <summary>
            /// Enum Plannotsupported for "plan_not_supported"
            /// </summary>
            [EnumMember(Value = "plan_not_supported")]
            Plannotsupported,
            
            /// <summary>
            /// Enum Invalidrolename for "invalid_role_name"
            /// </summary>
            [EnumMember(Value = "invalid_role_name")]
            Invalidrolename,
            
            /// <summary>
            /// Enum Rolenotfound for "role_not_found"
            /// </summary>
            [EnumMember(Value = "role_not_found")]
            Rolenotfound,
            
            /// <summary>
            /// Enum Invalidpartnername for "invalid_partner_name"
            /// </summary>
            [EnumMember(Value = "invalid_partner_name")]
            Invalidpartnername,
            
            /// <summary>
            /// Enum Partnernamenotfound for "partner_name_not_found"
            /// </summary>
            [EnumMember(Value = "partner_name_not_found")]
            Partnernamenotfound,
            
            /// <summary>
            /// Enum Invaliduserid for "invalid_user_id"
            /// </summary>
            [EnumMember(Value = "invalid_user_id")]
            Invaliduserid,
            
            /// <summary>
            /// Enum Invalidroleid for "invalid_role_id"
            /// </summary>
            [EnumMember(Value = "invalid_role_id")]
            Invalidroleid,
            
            /// <summary>
            /// Enum Invalidrole for "invalid_role"
            /// </summary>
            [EnumMember(Value = "invalid_role")]
            Invalidrole,
            
            /// <summary>
            /// Enum Partneridmismatch for "partner_id_mismatch"
            /// </summary>
            [EnumMember(Value = "partner_id_mismatch")]
            Partneridmismatch,
            
            /// <summary>
            /// Enum Invalidaccountseats for "invalid_account_seats"
            /// </summary>
            [EnumMember(Value = "invalid_account_seats")]
            Invalidaccountseats,
            
            /// <summary>
            /// Enum Duplicateaccount for "duplicate_account"
            /// </summary>
            [EnumMember(Value = "duplicate_account")]
            Duplicateaccount,
            
            /// <summary>
            /// Enum Invalidaddress for "invalid_address"
            /// </summary>
            [EnumMember(Value = "invalid_address")]
            Invalidaddress,
            
            /// <summary>
            /// Enum Invalidcountry for "invalid_country"
            /// </summary>
            [EnumMember(Value = "invalid_country")]
            Invalidcountry,
            
            /// <summary>
            /// Enum Invalidstateprovince for "invalid_state_province"
            /// </summary>
            [EnumMember(Value = "invalid_state_province")]
            Invalidstateprovince,
            
            /// <summary>
            /// Enum Invalidplanconfiguration for "invalid_plan_configuration"
            /// </summary>
            [EnumMember(Value = "invalid_plan_configuration")]
            Invalidplanconfiguration,
            
            /// <summary>
            /// Enum Invalidproductrateplan for "invalid_product_rate_plan"
            /// </summary>
            [EnumMember(Value = "invalid_product_rate_plan")]
            Invalidproductrateplan,
            
            /// <summary>
            /// Enum Invalidincludedseats for "invalid_included_seats"
            /// </summary>
            [EnumMember(Value = "invalid_included_seats")]
            Invalidincludedseats,
            
            /// <summary>
            /// Enum Invalidorganizationpermission for "invalid_organization_permission"
            /// </summary>
            [EnumMember(Value = "invalid_organization_permission")]
            Invalidorganizationpermission,
            
            /// <summary>
            /// Enum Invalidcancellationreason for "invalid_cancellation_reason"
            /// </summary>
            [EnumMember(Value = "invalid_cancellation_reason")]
            Invalidcancellationreason,
            
            /// <summary>
            /// Enum Cancellationdatenotset for "cancellation_date_not_set"
            /// </summary>
            [EnumMember(Value = "cancellation_date_not_set")]
            Cancellationdatenotset,
            
            /// <summary>
            /// Enum Directoryprovidernotfound for "directory_provider_not_found"
            /// </summary>
            [EnumMember(Value = "directory_provider_not_found")]
            Directoryprovidernotfound,
            
            /// <summary>
            /// Enum Directoryproviderfeaturealreadyinuse for "directory_provider_feature_already_in_use"
            /// </summary>
            [EnumMember(Value = "directory_provider_feature_already_in_use")]
            Directoryproviderfeaturealreadyinuse,
            
            /// <summary>
            /// Enum Directoryprovideralreadyactivated for "directory_provider_already_activated"
            /// </summary>
            [EnumMember(Value = "directory_provider_already_activated")]
            Directoryprovideralreadyactivated,
            
            /// <summary>
            /// Enum Directoryproviderorganizationentitlementisnotallowed for "directory_provider_organization_entitlement_is_not_allowed"
            /// </summary>
            [EnumMember(Value = "directory_provider_organization_entitlement_is_not_allowed")]
            Directoryproviderorganizationentitlementisnotallowed,
            
            /// <summary>
            /// Enum Invalidazureadmin for "invalid_azure_admin"
            /// </summary>
            [EnumMember(Value = "invalid_azure_admin")]
            Invalidazureadmin,
            
            /// <summary>
            /// Enum Invalidquery for "invalid_query"
            /// </summary>
            [EnumMember(Value = "invalid_query")]
            Invalidquery,
            
            /// <summary>
            /// Enum Invalidorganizationdelegatedadmin for "invalid_organization_delegated_admin"
            /// </summary>
            [EnumMember(Value = "invalid_organization_delegated_admin")]
            Invalidorganizationdelegatedadmin,
            
            /// <summary>
            /// Enum Delegatedadminalreadyexists for "delegated_admin_already_exists"
            /// </summary>
            [EnumMember(Value = "delegated_admin_already_exists")]
            Delegatedadminalreadyexists,
            
            /// <summary>
            /// Enum Insufficientorganizationdelegatedpermission for "insufficient_organization_delegated_permission"
            /// </summary>
            [EnumMember(Value = "insufficient_organization_delegated_permission")]
            Insufficientorganizationdelegatedpermission,
            
            /// <summary>
            /// Enum Managedtokennotfound for "managed_token_not_found"
            /// </summary>
            [EnumMember(Value = "managed_token_not_found")]
            Managedtokennotfound,
            
            /// <summary>
            /// Enum Managedtokenupdateblocked for "managed_token_update_blocked"
            /// </summary>
            [EnumMember(Value = "managed_token_update_blocked")]
            Managedtokenupdateblocked,
            
            /// <summary>
            /// Enum Managedtokenupdatenotpersisted for "managed_token_update_notpersisted"
            /// </summary>
            [EnumMember(Value = "managed_token_update_notpersisted")]
            Managedtokenupdatenotpersisted,
            
            /// <summary>
            /// Enum Managedtokenredemptionfailure for "managed_token_redemption_failure"
            /// </summary>
            [EnumMember(Value = "managed_token_redemption_failure")]
            Managedtokenredemptionfailure,
            
            /// <summary>
            /// Enum Managedtokenalreadyexists for "managed_token_already_exists"
            /// </summary>
            [EnumMember(Value = "managed_token_already_exists")]
            Managedtokenalreadyexists,
            
            /// <summary>
            /// Enum Managedtokenmismatchedsubjecttype for "managed_token_mismatched_subject_type"
            /// </summary>
            [EnumMember(Value = "managed_token_mismatched_subject_type")]
            Managedtokenmismatchedsubjecttype,
            
            /// <summary>
            /// Enum Managedtokenexpirationinpast for "managed_token_expiration_in_past"
            /// </summary>
            [EnumMember(Value = "managed_token_expiration_in_past")]
            Managedtokenexpirationinpast,
            
            /// <summary>
            /// Enum Managedtokeninvalidexternalclaims for "managed_token_invalid_externalclaims"
            /// </summary>
            [EnumMember(Value = "managed_token_invalid_externalclaims")]
            Managedtokeninvalidexternalclaims,
            
            /// <summary>
            /// Enum Managedtokenresourcestoolarge for "managed_token_resources_too_large"
            /// </summary>
            [EnumMember(Value = "managed_token_resources_too_large")]
            Managedtokenresourcestoolarge,
            
            /// <summary>
            /// Enum Redirecturinotregistered for "redirect_uri_not_registered"
            /// </summary>
            [EnumMember(Value = "redirect_uri_not_registered")]
            Redirecturinotregistered,
            
            /// <summary>
            /// Enum Scopesinvalid for "scopes_invalid"
            /// </summary>
            [EnumMember(Value = "scopes_invalid")]
            Scopesinvalid,
            
            /// <summary>
            /// Enum Nonuserbasedtoken for "non_userbased_token"
            /// </summary>
            [EnumMember(Value = "non_userbased_token")]
            Nonuserbasedtoken,
            
            /// <summary>
            /// Enum Userinvitenotfound for "userinvite_not_found"
            /// </summary>
            [EnumMember(Value = "userinvite_not_found")]
            Userinvitenotfound,
            
            /// <summary>
            /// Enum Userinviteinvalidtoken for "userinvite_invalid_token"
            /// </summary>
            [EnumMember(Value = "userinvite_invalid_token")]
            Userinviteinvalidtoken,
            
            /// <summary>
            /// Enum Userinviteinvalidresponsetype for "userinvite_invalid_response_type"
            /// </summary>
            [EnumMember(Value = "userinvite_invalid_response_type")]
            Userinviteinvalidresponsetype,
            
            /// <summary>
            /// Enum Userinviteinvalidemail for "userinvite_invalid_email"
            /// </summary>
            [EnumMember(Value = "userinvite_invalid_email")]
            Userinviteinvalidemail,
            
            /// <summary>
            /// Enum Managedtokenloadfailed for "managedtoken_load_failed"
            /// </summary>
            [EnumMember(Value = "managedtoken_load_failed")]
            Managedtokenloadfailed,
            
            /// <summary>
            /// Enum Managedtokencreatefailed for "managedtoken_create_failed"
            /// </summary>
            [EnumMember(Value = "managedtoken_create_failed")]
            Managedtokencreatefailed,
            
            /// <summary>
            /// Enum Managedtokenrevokefailed for "managedtoken_revoke_failed"
            /// </summary>
            [EnumMember(Value = "managedtoken_revoke_failed")]
            Managedtokenrevokefailed,
            
            /// <summary>
            /// Enum Resourcetokenredeemfailed for "resourcetoken_redeem_failed"
            /// </summary>
            [EnumMember(Value = "resourcetoken_redeem_failed")]
            Resourcetokenredeemfailed,
            
            /// <summary>
            /// Enum Servicetokenloadfailed for "servicetoken_load_failed"
            /// </summary>
            [EnumMember(Value = "servicetoken_load_failed")]
            Servicetokenloadfailed,
            
            /// <summary>
            /// Enum Userinvitealreadyexists for "userinvite_already_exists"
            /// </summary>
            [EnumMember(Value = "userinvite_already_exists")]
            Userinvitealreadyexists,
            
            /// <summary>
            /// Enum Userinviteunmanagedmembershipnotallowed for "userinvite_unmanaged_membership_not_allowed"
            /// </summary>
            [EnumMember(Value = "userinvite_unmanaged_membership_not_allowed")]
            Userinviteunmanagedmembershipnotallowed,
            
            /// <summary>
            /// Enum Userinviteaccountnotfound for "userinvite_account_not_found"
            /// </summary>
            [EnumMember(Value = "userinvite_account_not_found")]
            Userinviteaccountnotfound,
            
            /// <summary>
            /// Enum Userinviteusermismatch for "userinvite_user_mismatch"
            /// </summary>
            [EnumMember(Value = "userinvite_user_mismatch")]
            Userinviteusermismatch,
            
            /// <summary>
            /// Enum Userinviteaccountnotactive for "userinvite_account_not_active"
            /// </summary>
            [EnumMember(Value = "userinvite_account_not_active")]
            Userinviteaccountnotactive,
            
            /// <summary>
            /// Enum Userinviteusernotfound for "userinvite_user_not_found"
            /// </summary>
            [EnumMember(Value = "userinvite_user_not_found")]
            Userinviteusernotfound,
            
            /// <summary>
            /// Enum Userinviteinvaliduseselection for "userinvite_invalid_use_selection"
            /// </summary>
            [EnumMember(Value = "userinvite_invalid_use_selection")]
            Userinviteinvaliduseselection,
            
            /// <summary>
            /// Enum Userinvitemembershipalreadyexists for "userinvite_membership_already_exists"
            /// </summary>
            [EnumMember(Value = "userinvite_membership_already_exists")]
            Userinvitemembershipalreadyexists,
            
            /// <summary>
            /// Enum Userinvitebadrequest for "userinvite_bad_request"
            /// </summary>
            [EnumMember(Value = "userinvite_bad_request")]
            Userinvitebadrequest,
            
            /// <summary>
            /// Enum Userinviterequestsecreturinotenabled for "userinvite_request_secret_uri_not_enabled"
            /// </summary>
            [EnumMember(Value = "userinvite_request_secret_uri_not_enabled")]
            Userinviterequestsecreturinotenabled,
            
            /// <summary>
            /// Enum Signupstatetoolarge for "signup_state_too_large"
            /// </summary>
            [EnumMember(Value = "signup_state_too_large")]
            Signupstatetoolarge,
            
            /// <summary>
            /// Enum Signupinvalidlocale for "signup_invalid_locale"
            /// </summary>
            [EnumMember(Value = "signup_invalid_locale")]
            Signupinvalidlocale,
            
            /// <summary>
            /// Enum Toomanytokensperresourceid for "too_many_tokens_per_resource_id"
            /// </summary>
            [EnumMember(Value = "too_many_tokens_per_resource_id")]
            Toomanytokensperresourceid,
            
            /// <summary>
            /// Enum Redirecturiusedforexternalclaims for "redirect_uri_used_for_external_claims"
            /// </summary>
            [EnumMember(Value = "redirect_uri_used_for_external_claims")]
            Redirecturiusedforexternalclaims,
            
            /// <summary>
            /// Enum Invalidaccountstatusforaction for "invalid_account_status_for_action"
            /// </summary>
            [EnumMember(Value = "invalid_account_status_for_action")]
            Invalidaccountstatusforaction,
            
            /// <summary>
            /// Enum Maxauditlogpagesizeexceeded for "max_audit_log_page_size_exceeded"
            /// </summary>
            [EnumMember(Value = "max_audit_log_page_size_exceeded")]
            Maxauditlogpagesizeexceeded,
            
            /// <summary>
            /// Enum Invalidauditlogpagingrequest for "invalid_audit_log_paging_request"
            /// </summary>
            [EnumMember(Value = "invalid_audit_log_paging_request")]
            Invalidauditlogpagingrequest,
            
            /// <summary>
            /// Enum Addressdoesnotexist for "address_does_not_exist"
            /// </summary>
            [EnumMember(Value = "address_does_not_exist")]
            Addressdoesnotexist,
            
            /// <summary>
            /// Enum Invalidusername for "invalid_user_name"
            /// </summary>
            [EnumMember(Value = "invalid_user_name")]
            Invalidusername,
            
            /// <summary>
            /// Enum Invaliduserstatus for "invalid_user_status"
            /// </summary>
            [EnumMember(Value = "invalid_user_status")]
            Invaliduserstatus,
            
            /// <summary>
            /// Enum Partnermissingproperties for "partner_missing_properties"
            /// </summary>
            [EnumMember(Value = "partner_missing_properties")]
            Partnermissingproperties,
            
            /// <summary>
            /// Enum Partnercustomerinvalidlicenseinformation for "partner_customer_invalid_license_information"
            /// </summary>
            [EnumMember(Value = "partner_customer_invalid_license_information")]
            Partnercustomerinvalidlicenseinformation,
            
            /// <summary>
            /// Enum Partnerlicensecallbackfailed for "partner_license_callback_failed"
            /// </summary>
            [EnumMember(Value = "partner_license_callback_failed")]
            Partnerlicensecallbackfailed,
            
            /// <summary>
            /// Enum Partnercertificatecallbackfailed for "partner_certificate_callback_failed"
            /// </summary>
            [EnumMember(Value = "partner_certificate_callback_failed")]
            Partnercertificatecallbackfailed,
            
            /// <summary>
            /// Enum Partneroauthcallbackfailed for "partner_oauth_callback_failed"
            /// </summary>
            [EnumMember(Value = "partner_oauth_callback_failed")]
            Partneroauthcallbackfailed,
            
            /// <summary>
            /// Enum Invalidnotificationtype for "invalid_notification_type"
            /// </summary>
            [EnumMember(Value = "invalid_notification_type")]
            Invalidnotificationtype,
            
            /// <summary>
            /// Enum Invaliddefaultaccountid for "invalid_default_account_id"
            /// </summary>
            [EnumMember(Value = "invalid_default_account_id")]
            Invaliddefaultaccountid,
            
            /// <summary>
            /// Enum Usernotamemberofaccount for "user_not_a_member_of_account"
            /// </summary>
            [EnumMember(Value = "user_not_a_member_of_account")]
            Usernotamemberofaccount,
            
            /// <summary>
            /// Enum Organizationexportrequestspending for "organization_export_requests_pending"
            /// </summary>
            [EnumMember(Value = "organization_export_requests_pending")]
            Organizationexportrequestspending,
            
            /// <summary>
            /// Enum Organizationexporttypeinvalid for "organization_export_type_invalid"
            /// </summary>
            [EnumMember(Value = "organization_export_type_invalid")]
            Organizationexporttypeinvalid,
            
            /// <summary>
            /// Enum Organizationexportrequestnotfound for "organization_export_request_not_found"
            /// </summary>
            [EnumMember(Value = "organization_export_request_not_found")]
            Organizationexportrequestnotfound,
            
            /// <summary>
            /// Enum Organizationexporttaskprocessingtimeout for "organization_export_task_processing_timeout"
            /// </summary>
            [EnumMember(Value = "organization_export_task_processing_timeout")]
            Organizationexporttaskprocessingtimeout,
            
            /// <summary>
            /// Enum Organizationexporttaskqueuedtimeout for "organization_export_task_queued_timeout"
            /// </summary>
            [EnumMember(Value = "organization_export_task_queued_timeout")]
            Organizationexporttaskqueuedtimeout,
            
            /// <summary>
            /// Enum Organizationexporttaskmaxallowed for "organization_export_task_max_allowed"
            /// </summary>
            [EnumMember(Value = "organization_export_task_max_allowed")]
            Organizationexporttaskmaxallowed,
            
            /// <summary>
            /// Enum Organizationexporttaskinvalidresultsetstorage for "organization_export_task_invalid_resultsetstorage"
            /// </summary>
            [EnumMember(Value = "organization_export_task_invalid_resultsetstorage")]
            Organizationexporttaskinvalidresultsetstorage,
            
            /// <summary>
            /// Enum Organizationimportnotfound for "organization_import_not_found"
            /// </summary>
            [EnumMember(Value = "organization_import_not_found")]
            Organizationimportnotfound,
            
            /// <summary>
            /// Enum Organizationimportbadrequestheader for "organization_import_bad_request_header"
            /// </summary>
            [EnumMember(Value = "organization_import_bad_request_header")]
            Organizationimportbadrequestheader,
            
            /// <summary>
            /// Enum Organizationimportbadcsvcontent for "organization_import_bad_csv_content"
            /// </summary>
            [EnumMember(Value = "organization_import_bad_csv_content")]
            Organizationimportbadcsvcontent,
            
            /// <summary>
            /// Enum Invalididrequest for "invalid_id_request"
            /// </summary>
            [EnumMember(Value = "invalid_id_request")]
            Invalididrequest,
            
            /// <summary>
            /// Enum Invalideidrequest for "invalid_eid_request"
            /// </summary>
            [EnumMember(Value = "invalid_eid_request")]
            Invalideidrequest,
            
            /// <summary>
            /// Enum Organizationexporttasknotfound for "organization_export_task_not_found"
            /// </summary>
            [EnumMember(Value = "organization_export_task_not_found")]
            Organizationexporttasknotfound,
            
            /// <summary>
            /// Enum Proofservicevalidationmodelnotfound for "proof_service_validation_model_not_found"
            /// </summary>
            [EnumMember(Value = "proof_service_validation_model_not_found")]
            Proofservicevalidationmodelnotfound,
            
            /// <summary>
            /// Enum Organizationimportprocessingtimeout for "organization_import_processing_timeout"
            /// </summary>
            [EnumMember(Value = "organization_import_processing_timeout")]
            Organizationimportprocessingtimeout,
            
            /// <summary>
            /// Enum Proofserviceinvalidmodeltype for "proof_service_invalid_model_type"
            /// </summary>
            [EnumMember(Value = "proof_service_invalid_model_type")]
            Proofserviceinvalidmodeltype,
            
            /// <summary>
            /// Enum Proofserviceprooffilenotexists for "proof_service_proof_file_not_exists"
            /// </summary>
            [EnumMember(Value = "proof_service_proof_file_not_exists")]
            Proofserviceprooffilenotexists,
            
            /// <summary>
            /// Enum Proofserviceprooffilebadowner for "proof_service_proof_file_bad_owner"
            /// </summary>
            [EnumMember(Value = "proof_service_proof_file_bad_owner")]
            Proofserviceprooffilebadowner,
            
            /// <summary>
            /// Enum Proofservicemodelvalidationfailure for "proof_service_model_validation_failure"
            /// </summary>
            [EnumMember(Value = "proof_service_model_validation_failure")]
            Proofservicemodelvalidationfailure,
            
            /// <summary>
            /// Enum Proofservicerequestentitytoolarge for "proof_service_request_entity_too_large"
            /// </summary>
            [EnumMember(Value = "proof_service_request_entity_too_large")]
            Proofservicerequestentitytoolarge,
            
            /// <summary>
            /// Enum Proofserviceunreadablepayload for "proof_service_unreadable_payload"
            /// </summary>
            [EnumMember(Value = "proof_service_unreadable_payload")]
            Proofserviceunreadablepayload,
            
            /// <summary>
            /// Enum Proofserviceviewschemainvalid for "proof_service_view_schema_invalid"
            /// </summary>
            [EnumMember(Value = "proof_service_view_schema_invalid")]
            Proofserviceviewschemainvalid,
            
            /// <summary>
            /// Enum Proofservicefrontviewnotexists for "proof_service_front_view_not_exists"
            /// </summary>
            [EnumMember(Value = "proof_service_front_view_not_exists")]
            Proofservicefrontviewnotexists,
            
            /// <summary>
            /// Enum Proofserviceviewschemanotfound for "proof_service_view_schema_not_found"
            /// </summary>
            [EnumMember(Value = "proof_service_view_schema_not_found")]
            Proofserviceviewschemanotfound,
            
            /// <summary>
            /// Enum Proofserviceeventnotfound for "proof_service_event_not_found"
            /// </summary>
            [EnumMember(Value = "proof_service_event_not_found")]
            Proofserviceeventnotfound,
            
            /// <summary>
            /// Enum Proofserviceeventmedianotfound for "proof_service_event_media_not_found"
            /// </summary>
            [EnumMember(Value = "proof_service_event_media_not_found")]
            Proofserviceeventmedianotfound,
            
            /// <summary>
            /// Enum Proofserviceeventmediaunauthorized for "proof_service_event_media_unauthorized"
            /// </summary>
            [EnumMember(Value = "proof_service_event_media_unauthorized")]
            Proofserviceeventmediaunauthorized,
            
            /// <summary>
            /// Enum Proofserviceerror for "proof_service_error"
            /// </summary>
            [EnumMember(Value = "proof_service_error")]
            Proofserviceerror,
            
            /// <summary>
            /// Enum Proofserviceprooffileduplicate for "proof_service_proof_file_duplicate"
            /// </summary>
            [EnumMember(Value = "proof_service_proof_file_duplicate")]
            Proofserviceprooffileduplicate,
            
            /// <summary>
            /// Enum Proofserviceschemaconflict for "proof_service_schema_conflict"
            /// </summary>
            [EnumMember(Value = "proof_service_schema_conflict")]
            Proofserviceschemaconflict,
            
            /// <summary>
            /// Enum Proofserviceviewconflict for "proof_service_view_conflict"
            /// </summary>
            [EnumMember(Value = "proof_service_view_conflict")]
            Proofserviceviewconflict,
            
            /// <summary>
            /// Enum Forbidden for "forbidden"
            /// </summary>
            [EnumMember(Value = "forbidden")]
            Forbidden,
            
            /// <summary>
            /// Enum Invalidphotoidrequest for "invalid_photoid_request"
            /// </summary>
            [EnumMember(Value = "invalid_photoid_request")]
            Invalidphotoidrequest,
            
            /// <summary>
            /// Enum Invalididentitywebresourcerequest for "invalid_identityweb_resource_request"
            /// </summary>
            [EnumMember(Value = "invalid_identityweb_resource_request")]
            Invalididentitywebresourcerequest,
            
            /// <summary>
            /// Enum Identitywebmanualreviewdisabled for "identityweb_manual_review_disabled"
            /// </summary>
            [EnumMember(Value = "identityweb_manual_review_disabled")]
            Identitywebmanualreviewdisabled,
            
            /// <summary>
            /// Enum Identitywebvendorresponsevalidationfailed for "identityweb_vendor_response_validation_failed"
            /// </summary>
            [EnumMember(Value = "identityweb_vendor_response_validation_failed")]
            Identitywebvendorresponsevalidationfailed,
            
            /// <summary>
            /// Enum Organizationimportnocsvresults for "organization_import_no_csv_results"
            /// </summary>
            [EnumMember(Value = "organization_import_no_csv_results")]
            Organizationimportnocsvresults,
            
            /// <summary>
            /// Enum Organizationimportexportpending for "organization_import_export_pending"
            /// </summary>
            [EnumMember(Value = "organization_import_export_pending")]
            Organizationimportexportpending,
            
            /// <summary>
            /// Enum Organizationexportimportpending for "organization_export_import_pending"
            /// </summary>
            [EnumMember(Value = "organization_export_import_pending")]
            Organizationexportimportpending,
            
            /// <summary>
            /// Enum Organizationimportdeletestatusqueued for "organization_import_delete_status_queued"
            /// </summary>
            [EnumMember(Value = "organization_import_delete_status_queued")]
            Organizationimportdeletestatusqueued,
            
            /// <summary>
            /// Enum Organizationimportmaxrecords for "organization_import_max_records"
            /// </summary>
            [EnumMember(Value = "organization_import_max_records")]
            Organizationimportmaxrecords,
            
            /// <summary>
            /// Enum Organizationimportmaxtotalrecords for "organization_import_max_total_records"
            /// </summary>
            [EnumMember(Value = "organization_import_max_total_records")]
            Organizationimportmaxtotalrecords,
            
            /// <summary>
            /// Enum Organizationimportmaxaccountrecords for "organization_import_max_account_records"
            /// </summary>
            [EnumMember(Value = "organization_import_max_account_records")]
            Organizationimportmaxaccountrecords,
            
            /// <summary>
            /// Enum Organizationimportmaxsiterecords for "organization_import_max_site_records"
            /// </summary>
            [EnumMember(Value = "organization_import_max_site_records")]
            Organizationimportmaxsiterecords,
            
            /// <summary>
            /// Enum Organizationimportmaxaccounts for "organization_import_max_accounts"
            /// </summary>
            [EnumMember(Value = "organization_import_max_accounts")]
            Organizationimportmaxaccounts,
            
            /// <summary>
            /// Enum Organizationimportcouldnotbequeued for "organization_import_could_not_be_queued"
            /// </summary>
            [EnumMember(Value = "organization_import_could_not_be_queued")]
            Organizationimportcouldnotbequeued,
            
            /// <summary>
            /// Enum Organizationimportimportpending for "organization_import_import_pending"
            /// </summary>
            [EnumMember(Value = "organization_import_import_pending")]
            Organizationimportimportpending,
            
            /// <summary>
            /// Enum Organizationimportmaximports for "organization_import_max_imports"
            /// </summary>
            [EnumMember(Value = "organization_import_max_imports")]
            Organizationimportmaximports,
            
            /// <summary>
            /// Enum Principalthrottled for "principal_throttled"
            /// </summary>
            [EnumMember(Value = "principal_throttled")]
            Principalthrottled,
            
            /// <summary>
            /// Enum Serviceunavailable for "service_unavailable"
            /// </summary>
            [EnumMember(Value = "service_unavailable")]
            Serviceunavailable,
            
            /// <summary>
            /// Enum Invalidtemplate for "invalid_template"
            /// </summary>
            [EnumMember(Value = "invalid_template")]
            Invalidtemplate,
            
            /// <summary>
            /// Enum Invalidadmincommunicationprincipal for "invalid_admin_communication_principal"
            /// </summary>
            [EnumMember(Value = "invalid_admin_communication_principal")]
            Invalidadmincommunicationprincipal,
            
            /// <summary>
            /// Enum Invalidadmincommunication for "invalid_admin_communication"
            /// </summary>
            [EnumMember(Value = "invalid_admin_communication")]
            Invalidadmincommunication,
            
            /// <summary>
            /// Enum Maxadmincommunicationaggregationsexceeded for "max_admin_communication_aggregations_exceeded"
            /// </summary>
            [EnumMember(Value = "max_admin_communication_aggregations_exceeded")]
            Maxadmincommunicationaggregationsexceeded,
            
            /// <summary>
            /// Enum Missingadmincommunicationsubject for "missing_admin_communication_subject"
            /// </summary>
            [EnumMember(Value = "missing_admin_communication_subject")]
            Missingadmincommunicationsubject,
            
            /// <summary>
            /// Enum Unabletosendorgadmininvitation for "unable_to_send_orgadmin_invitation"
            /// </summary>
            [EnumMember(Value = "unable_to_send_orgadmin_invitation")]
            Unabletosendorgadmininvitation,
            
            /// <summary>
            /// Enum Orderalreadyexists for "order_already_exists"
            /// </summary>
            [EnumMember(Value = "order_already_exists")]
            Orderalreadyexists,
            
            /// <summary>
            /// Enum Ordernotfound for "order_not_found"
            /// </summary>
            [EnumMember(Value = "order_not_found")]
            Ordernotfound,
            
            /// <summary>
            /// Enum Orderinvalidproductstate for "order_invalid_product_state"
            /// </summary>
            [EnumMember(Value = "order_invalid_product_state")]
            Orderinvalidproductstate,
            
            /// <summary>
            /// Enum Orderinvalidstate for "order_invalid_state"
            /// </summary>
            [EnumMember(Value = "order_invalid_state")]
            Orderinvalidstate,
            
            /// <summary>
            /// Enum Accountproductaccountnotfound for "accountproduct_account_not_found"
            /// </summary>
            [EnumMember(Value = "accountproduct_account_not_found")]
            Accountproductaccountnotfound,
            
            /// <summary>
            /// Enum Invalidaccountproduct for "invalid_accountproduct"
            /// </summary>
            [EnumMember(Value = "invalid_accountproduct")]
            Invalidaccountproduct,
            
            /// <summary>
            /// Enum Accountproductupdatefailed for "accountproduct_update_failed"
            /// </summary>
            [EnumMember(Value = "accountproduct_update_failed")]
            Accountproductupdatefailed,
            
            /// <summary>
            /// Enum Accountproductprovisionfailed for "accountproduct_provision_failed"
            /// </summary>
            [EnumMember(Value = "accountproduct_provision_failed")]
            Accountproductprovisionfailed,
            
            /// <summary>
            /// Enum Freetrialalreayclaimed for "freetrial_alreay_claimed"
            /// </summary>
            [EnumMember(Value = "freetrial_alreay_claimed")]
            Freetrialalreayclaimed,
            
            /// <summary>
            /// Enum Accountproductactivationfailed for "accountproduct_activation_failed"
            /// </summary>
            [EnumMember(Value = "accountproduct_activation_failed")]
            Accountproductactivationfailed,
            
            /// <summary>
            /// Enum Provisiontokencreatefailed for "provision_token_create_failed"
            /// </summary>
            [EnumMember(Value = "provision_token_create_failed")]
            Provisiontokencreatefailed,
            
            /// <summary>
            /// Enum Orderfreetrialalreadyclaimed for "order_free_trial_already_claimed"
            /// </summary>
            [EnumMember(Value = "order_free_trial_already_claimed")]
            Orderfreetrialalreadyclaimed,
            
            /// <summary>
            /// Enum Transactionmanagementclienterror for "transaction_management_client_error"
            /// </summary>
            [EnumMember(Value = "transaction_management_client_error")]
            Transactionmanagementclienterror,
            
            /// <summary>
            /// Enum Transactionmanagementserviceerror for "transaction_management_service_error"
            /// </summary>
            [EnumMember(Value = "transaction_management_service_error")]
            Transactionmanagementserviceerror,
            
            /// <summary>
            /// Enum Provisionclientfailed for "provision_client_failed"
            /// </summary>
            [EnumMember(Value = "provision_client_failed")]
            Provisionclientfailed,
            
            /// <summary>
            /// Enum Accountproductcancellationfailed for "accountproduct_cancellation_failed"
            /// </summary>
            [EnumMember(Value = "accountproduct_cancellation_failed")]
            Accountproductcancellationfailed,
            
            /// <summary>
            /// Enum Accountproductupgradefailed for "accountproduct_upgrade_failed"
            /// </summary>
            [EnumMember(Value = "accountproduct_upgrade_failed")]
            Accountproductupgradefailed,
            
            /// <summary>
            /// Enum Accountinformationnotspecified for "account_information_not_specified"
            /// </summary>
            [EnumMember(Value = "account_information_not_specified")]
            Accountinformationnotspecified,
            
            /// <summary>
            /// Enum Appliancelatestreleaseerror for "appliance_latest_release_error"
            /// </summary>
            [EnumMember(Value = "appliance_latest_release_error")]
            Appliancelatestreleaseerror,
            
            /// <summary>
            /// Enum Appliancereleaseerror for "appliance_release_error"
            /// </summary>
            [EnumMember(Value = "appliance_release_error")]
            Appliancereleaseerror,
            
            /// <summary>
            /// Enum Appliancereleasefileerror for "appliance_release_file_error"
            /// </summary>
            [EnumMember(Value = "appliance_release_file_error")]
            Appliancereleasefileerror,
            
            /// <summary>
            /// Enum Autoactivatememberinnonactiveaccount for "auto_activate_member_in_non_active_account"
            /// </summary>
            [EnumMember(Value = "auto_activate_member_in_non_active_account")]
            Autoactivatememberinnonactiveaccount,
            
            /// <summary>
            /// Enum Organizationexportdomainselectioninvalid for "organization_export_domain_selection_invalid"
            /// </summary>
            [EnumMember(Value = "organization_export_domain_selection_invalid")]
            Organizationexportdomainselectioninvalid,
            
            /// <summary>
            /// Enum Organizationexportaccountselectioninvalid for "organization_export_account_selection_invalid"
            /// </summary>
            [EnumMember(Value = "organization_export_account_selection_invalid")]
            Organizationexportaccountselectioninvalid,
            
            /// <summary>
            /// Enum Invalidmetadata for "invalid_metadata"
            /// </summary>
            [EnumMember(Value = "invalid_metadata")]
            Invalidmetadata,
            
            /// <summary>
            /// Enum Organizationdisallowedforaccount for "organization_disallowed_for_account"
            /// </summary>
            [EnumMember(Value = "organization_disallowed_for_account")]
            Organizationdisallowedforaccount,
            
            /// <summary>
            /// Enum Unabletosendorgaccountinvitation for "unable_to_send_orgaccount_invitation"
            /// </summary>
            [EnumMember(Value = "unable_to_send_orgaccount_invitation")]
            Unabletosendorgaccountinvitation,
            
            /// <summary>
            /// Enum Unsupportedprincipaltype for "unsupported_principal_type"
            /// </summary>
            [EnumMember(Value = "unsupported_principal_type")]
            Unsupportedprincipaltype,
            
            /// <summary>
            /// Enum Invalidphonenumber for "invalid_phone_number"
            /// </summary>
            [EnumMember(Value = "invalid_phone_number")]
            Invalidphonenumber,
            
            /// <summary>
            /// Enum Identitysessioncreationerror for "identity_session_creation_error"
            /// </summary>
            [EnumMember(Value = "identity_session_creation_error")]
            Identitysessioncreationerror,
            
            /// <summary>
            /// Enum Invalidmappingcode for "invalid_mapping_code"
            /// </summary>
            [EnumMember(Value = "invalid_mapping_code")]
            Invalidmappingcode,
            
            /// <summary>
            /// Enum Createmobilesessionthrottled for "create_mobile_session_throttled"
            /// </summary>
            [EnumMember(Value = "create_mobile_session_throttled")]
            Createmobilesessionthrottled,
            
            /// <summary>
            /// Enum Identityclientloggingerror for "identity_client_logging_error"
            /// </summary>
            [EnumMember(Value = "identity_client_logging_error")]
            Identityclientloggingerror,
            
            /// <summary>
            /// Enum Organizationaccountsettingsimportimportspending for "organization_account_settings_import_imports_pending"
            /// </summary>
            [EnumMember(Value = "organization_account_settings_import_imports_pending")]
            Organizationaccountsettingsimportimportspending,
            
            /// <summary>
            /// Enum Organizationaccountsettingsimportexportspending for "organization_account_settings_import_exports_pending"
            /// </summary>
            [EnumMember(Value = "organization_account_settings_import_exports_pending")]
            Organizationaccountsettingsimportexportspending,
            
            /// <summary>
            /// Enum Organizationexportaccountsettingsimportpending for "organization_export_account_settings_import_pending"
            /// </summary>
            [EnumMember(Value = "organization_export_account_settings_import_pending")]
            Organizationexportaccountsettingsimportpending,
            
            /// <summary>
            /// Enum Declinedinvitationupdatenotallowed for "declined_invitation_update_not_allowed"
            /// </summary>
            [EnumMember(Value = "declined_invitation_update_not_allowed")]
            Declinedinvitationupdatenotallowed,
            
            /// <summary>
            /// Enum Acceptedinvitationaccessnotallowed for "accepted_invitation_access_not_allowed"
            /// </summary>
            [EnumMember(Value = "accepted_invitation_access_not_allowed")]
            Acceptedinvitationaccessnotallowed,
            
            /// <summary>
            /// Enum Missingcurrentauthenticatedprincipalinformation for "missing_current_authenticated_principal_information"
            /// </summary>
            [EnumMember(Value = "missing_current_authenticated_principal_information")]
            Missingcurrentauthenticatedprincipalinformation,
            
            /// <summary>
            /// Enum Invalidcallerinformation for "invalid_caller_information"
            /// </summary>
            [EnumMember(Value = "invalid_caller_information")]
            Invalidcallerinformation,
            
            /// <summary>
            /// Enum Publickeyinsertheadercontentinvalid for "public_key_insert_header_content_invalid"
            /// </summary>
            [EnumMember(Value = "public_key_insert_header_content_invalid")]
            Publickeyinsertheadercontentinvalid,
            
            /// <summary>
            /// Enum Publickeyinsertuserpublickeyalreadyexisted for "public_key_insert_user_public_key_already_existed"
            /// </summary>
            [EnumMember(Value = "public_key_insert_user_public_key_already_existed")]
            Publickeyinsertuserpublickeyalreadyexisted,
            
            /// <summary>
            /// Enum Publickeyinsertunabletoreadpublickey for "public_key_insert_unable_to_read_public_key"
            /// </summary>
            [EnumMember(Value = "public_key_insert_unable_to_read_public_key")]
            Publickeyinsertunabletoreadpublickey,
            
            /// <summary>
            /// Enum Publickeyinsertunabletolocatepublickey for "public_key_insert_unable_to_locate_public_key"
            /// </summary>
            [EnumMember(Value = "public_key_insert_unable_to_locate_public_key")]
            Publickeyinsertunabletolocatepublickey,
            
            /// <summary>
            /// Enum Publickeyinsertemptyrequestbody for "public_key_insert_empty_request_body"
            /// </summary>
            [EnumMember(Value = "public_key_insert_empty_request_body")]
            Publickeyinsertemptyrequestbody,
            
            /// <summary>
            /// Enum Publickeyunabletoprocesspublickey for "public_key_unable_to_process_public_key"
            /// </summary>
            [EnumMember(Value = "public_key_unable_to_process_public_key")]
            Publickeyunabletoprocesspublickey,
            
            /// <summary>
            /// Enum Publickeynotfound for "public_key_not_found"
            /// </summary>
            [EnumMember(Value = "public_key_not_found")]
            Publickeynotfound,
            
            /// <summary>
            /// Enum Publickeyidempty for "public_key_id_empty"
            /// </summary>
            [EnumMember(Value = "public_key_id_empty")]
            Publickeyidempty,
            
            /// <summary>
            /// Enum Publickeyidinvalid for "public_key_id_invalid"
            /// </summary>
            [EnumMember(Value = "public_key_id_invalid")]
            Publickeyidinvalid,
            
            /// <summary>
            /// Enum Publickeycontentinvalid for "public_key_content_invalid"
            /// </summary>
            [EnumMember(Value = "public_key_content_invalid")]
            Publickeycontentinvalid,
            
            /// <summary>
            /// Enum Publickeynotsupported for "public_key_not_supported"
            /// </summary>
            [EnumMember(Value = "public_key_not_supported")]
            Publickeynotsupported,
            
            /// <summary>
            /// Enum Publickeymalformatted for "public_key_malformatted"
            /// </summary>
            [EnumMember(Value = "public_key_malformatted")]
            Publickeymalformatted,
            
            /// <summary>
            /// Enum Accountupdatefailed for "account_update_failed"
            /// </summary>
            [EnumMember(Value = "account_update_failed")]
            Accountupdatefailed,
            
            /// <summary>
            /// Enum Accountchangeplanfailed for "account_change_plan_failed"
            /// </summary>
            [EnumMember(Value = "account_change_plan_failed")]
            Accountchangeplanfailed,
            
            /// <summary>
            /// Enum Accountcreationfailed for "account_creation_failed"
            /// </summary>
            [EnumMember(Value = "account_creation_failed")]
            Accountcreationfailed,
            
            /// <summary>
            /// Enum Accountproductinvalidstatus for "accountproduct_invalid_status"
            /// </summary>
            [EnumMember(Value = "accountproduct_invalid_status")]
            Accountproductinvalidstatus,
            
            /// <summary>
            /// Enum Accountproductnotexist for "accountproduct_not_exist"
            /// </summary>
            [EnumMember(Value = "accountproduct_not_exist")]
            Accountproductnotexist,
            
            /// <summary>
            /// Enum Accountproductexpirefailed for "accountproduct_expire_failed"
            /// </summary>
            [EnumMember(Value = "accountproduct_expire_failed")]
            Accountproductexpirefailed,
            
            /// <summary>
            /// Enum Proofservicemanagementdisabled for "proofservice_management_disabled"
            /// </summary>
            [EnumMember(Value = "proofservice_management_disabled")]
            Proofservicemanagementdisabled,
            
            /// <summary>
            /// Enum Invalidproduct for "invalid_product"
            /// </summary>
            [EnumMember(Value = "invalid_product")]
            Invalidproduct,
            
            /// <summary>
            /// Enum Notsupported for "not_supported"
            /// </summary>
            [EnumMember(Value = "not_supported")]
            Notsupported,
            
            /// <summary>
            /// Enum Identityworkflownotfound for "identity_workflow_not_found"
            /// </summary>
            [EnumMember(Value = "identity_workflow_not_found")]
            Identityworkflownotfound,
            
            /// <summary>
            /// Enum Identityworkflowsignaturemethodnotfound for "identity_workflow_signature_method_not_found"
            /// </summary>
            [EnumMember(Value = "identity_workflow_signature_method_not_found")]
            Identityworkflowsignaturemethodnotfound,
            
            /// <summary>
            /// Enum Identityworkflowclaimunknownprovidertype for "identity_workflow_claim_unknown_provider_type"
            /// </summary>
            [EnumMember(Value = "identity_workflow_claim_unknown_provider_type")]
            Identityworkflowclaimunknownprovidertype,
            
            /// <summary>
            /// Enum Identityworkflowinvalidexternalclaimproperties for "identity_workflow_invalid_externalclaim_properties"
            /// </summary>
            [EnumMember(Value = "identity_workflow_invalid_externalclaim_properties")]
            Identityworkflowinvalidexternalclaimproperties,
            
            /// <summary>
            /// Enum Publickeyapiinvalidmodulus for "public_key_api_invalid_modulus"
            /// </summary>
            [EnumMember(Value = "public_key_api_invalid_modulus")]
            Publickeyapiinvalidmodulus,
            
            /// <summary>
            /// Enum Publickeyapiinvalidexponent for "public_key_api_invalid_exponent"
            /// </summary>
            [EnumMember(Value = "public_key_api_invalid_exponent")]
            Publickeyapiinvalidexponent,
            
            /// <summary>
            /// Enum Publickeyapiinvalidpublickey for "public_key_api_invalid_public_key"
            /// </summary>
            [EnumMember(Value = "public_key_api_invalid_public_key")]
            Publickeyapiinvalidpublickey,
            
            /// <summary>
            /// Enum Publickeyapinousermappingtogivenpublickey for "public_key_api_no_user_mapping_to_given_public_key"
            /// </summary>
            [EnumMember(Value = "public_key_api_no_user_mapping_to_given_public_key")]
            Publickeyapinousermappingtogivenpublickey,
            
            /// <summary>
            /// Enum Duplicateunitofmeasure for "duplicate_unit_of_measure"
            /// </summary>
            [EnumMember(Value = "duplicate_unit_of_measure")]
            Duplicateunitofmeasure,
            
            /// <summary>
            /// Enum Membershipclosenotallowed for "membership_close_not_allowed"
            /// </summary>
            [EnumMember(Value = "membership_close_not_allowed")]
            Membershipclosenotallowed,
            
            /// <summary>
            /// Enum Immutableidalreadyexists for "immutableid_already_exists"
            /// </summary>
            [EnumMember(Value = "immutableid_already_exists")]
            Immutableidalreadyexists,
            
            /// <summary>
            /// Enum Organizationhasnoverifiedreserveddomains for "organization_has_no_verified_reserved_domains"
            /// </summary>
            [EnumMember(Value = "organization_has_no_verified_reserved_domains")]
            Organizationhasnoverifiedreserveddomains,
            
            /// <summary>
            /// Enum Getaccountgroupsfailed for "get_account_groups_failed"
            /// </summary>
            [EnumMember(Value = "get_account_groups_failed")]
            Getaccountgroupsfailed,
            
            /// <summary>
            /// Enum Organizationmissingentitlement for "organization_missing_entitlement"
            /// </summary>
            [EnumMember(Value = "organization_missing_entitlement")]
            Organizationmissingentitlement,
            
            /// <summary>
            /// Enum Configmissingappsorvalues for "config_missing_apps_or_values"
            /// </summary>
            [EnumMember(Value = "config_missing_apps_or_values")]
            Configmissingappsorvalues,
            
            /// <summary>
            /// Enum Missingpenrequiredclaims for "missing_pen_required_claims"
            /// </summary>
            [EnumMember(Value = "missing_pen_required_claims")]
            Missingpenrequiredclaims,
            
            /// <summary>
            /// Enum Accountsyncfailed for "account_sync_failed"
            /// </summary>
            [EnumMember(Value = "account_sync_failed")]
            Accountsyncfailed,
            
            /// <summary>
            /// Enum Invaliduri for "invalid_uri"
            /// </summary>
            [EnumMember(Value = "invalid_uri")]
            Invaliduri,
            
            /// <summary>
            /// Enum Invalidsite for "invalid_site"
            /// </summary>
            [EnumMember(Value = "invalid_site")]
            Invalidsite,
            
            /// <summary>
            /// Enum Provisionrestclienterror for "provision_rest_client_error"
            /// </summary>
            [EnumMember(Value = "provision_rest_client_error")]
            Provisionrestclienterror,
            
            /// <summary>
            /// Enum Productmasterentrynotfound for "product_master_entry_not_found"
            /// </summary>
            [EnumMember(Value = "product_master_entry_not_found")]
            Productmasterentrynotfound,
            
            /// <summary>
            /// Enum Provisionorderservicev2badrequest for "provision_orderservicev2_bad_request"
            /// </summary>
            [EnumMember(Value = "provision_orderservicev2_bad_request")]
            Provisionorderservicev2badrequest,
            
            /// <summary>
            /// Enum Linkedidentityproviderrecordnotfound for "linked_identity_provider_record_not_found"
            /// </summary>
            [EnumMember(Value = "linked_identity_provider_record_not_found")]
            Linkedidentityproviderrecordnotfound,
            
            /// <summary>
            /// Enum Accountproductfreetrialnoteligible for "accountproduct_freetrial_not_eligible"
            /// </summary>
            [EnumMember(Value = "accountproduct_freetrial_not_eligible")]
            Accountproductfreetrialnoteligible,
            
            /// <summary>
            /// Enum Orderinvalidproduct for "order_invalid_product"
            /// </summary>
            [EnumMember(Value = "order_invalid_product")]
            Orderinvalidproduct,
            
            /// <summary>
            /// Enum Protectapiinvalidactioncontext for "protect_api_invalid_action_context"
            /// </summary>
            [EnumMember(Value = "protect_api_invalid_action_context")]
            Protectapiinvalidactioncontext,
            
            /// <summary>
            /// Enum Protectapiruleserror for "protect_api_rules_error"
            /// </summary>
            [EnumMember(Value = "protect_api_rules_error")]
            Protectapiruleserror,
            
            /// <summary>
            /// Enum Protectapiinvalidrecaptchaconfiguration for "protect_api_invalid_recaptcha_configuration"
            /// </summary>
            [EnumMember(Value = "protect_api_invalid_recaptcha_configuration")]
            Protectapiinvalidrecaptchaconfiguration,
            
            /// <summary>
            /// Enum Protectapiinvalidrecaptchaverificationerror for "protect_api_invalid_recaptcha_verification_error"
            /// </summary>
            [EnumMember(Value = "protect_api_invalid_recaptcha_verification_error")]
            Protectapiinvalidrecaptchaverificationerror,
            
            /// <summary>
            /// Enum Protectapiinvalidconfig for "protect_api_invalid_config"
            /// </summary>
            [EnumMember(Value = "protect_api_invalid_config")]
            Protectapiinvalidconfig,
            
            /// <summary>
            /// Enum Protectapiapprovalerror for "protect_api_approval_error"
            /// </summary>
            [EnumMember(Value = "protect_api_approval_error")]
            Protectapiapprovalerror,
            
            /// <summary>
            /// Enum Orderinvalidaccount for "order_invalid_account"
            /// </summary>
            [EnumMember(Value = "order_invalid_account")]
            Orderinvalidaccount,
            
            /// <summary>
            /// Enum Orderinvalidsource for "order_invalid_source"
            /// </summary>
            [EnumMember(Value = "order_invalid_source")]
            Orderinvalidsource,
            
            /// <summary>
            /// Enum Orderinvaliduser for "order_invalid_user"
            /// </summary>
            [EnumMember(Value = "order_invalid_user")]
            Orderinvaliduser,
            
            /// <summary>
            /// Enum Provisionqueuefailure for "provision_queue_failure"
            /// </summary>
            [EnumMember(Value = "provision_queue_failure")]
            Provisionqueuefailure,
            
            /// <summary>
            /// Enum Invalidorganizationentitlement for "invalid_organization_entitlement"
            /// </summary>
            [EnumMember(Value = "invalid_organization_entitlement")]
            Invalidorganizationentitlement,
            
            /// <summary>
            /// Enum Productmasterinvalidexternalkey for "product_master_invalid_external_key"
            /// </summary>
            [EnumMember(Value = "product_master_invalid_external_key")]
            Productmasterinvalidexternalkey,
            
            /// <summary>
            /// Enum Orderprovisionfailed for "order_provision_failed"
            /// </summary>
            [EnumMember(Value = "order_provision_failed")]
            Orderprovisionfailed,
            
            /// <summary>
            /// Enum Protectapireportabuserequesterror for "protect_api_report_abuse_request_error"
            /// </summary>
            [EnumMember(Value = "protect_api_report_abuse_request_error")]
            Protectapireportabuserequesterror,
            
            /// <summary>
            /// Enum Protectapireportabuseemailerror for "protect_api_report_abuse_email_error"
            /// </summary>
            [EnumMember(Value = "protect_api_report_abuse_email_error")]
            Protectapireportabuseemailerror,
            
            /// <summary>
            /// Enum Protectapireportabuseerror for "protect_api_report_abuse_error"
            /// </summary>
            [EnumMember(Value = "protect_api_report_abuse_error")]
            Protectapireportabuseerror,
            
            /// <summary>
            /// Enum Protectapireportabuseconfigerror for "protect_api_report_abuse_config_error"
            /// </summary>
            [EnumMember(Value = "protect_api_report_abuse_config_error")]
            Protectapireportabuseconfigerror,
            
            /// <summary>
            /// Enum Protectapireportabuseweberror for "protect_api_report_abuse_web_error"
            /// </summary>
            [EnumMember(Value = "protect_api_report_abuse_web_error")]
            Protectapireportabuseweberror,
            
            /// <summary>
            /// Enum Invalidregion for "invalid_region"
            /// </summary>
            [EnumMember(Value = "invalid_region")]
            Invalidregion,
            
            /// <summary>
            /// Enum Billingprofilegetfailed for "billing_profile_get_failed"
            /// </summary>
            [EnumMember(Value = "billing_profile_get_failed")]
            Billingprofilegetfailed,
            
            /// <summary>
            /// Enum Currentplangetfailed for "current_plan_get_failed"
            /// </summary>
            [EnumMember(Value = "current_plan_get_failed")]
            Currentplangetfailed,
            
            /// <summary>
            /// Enum Billingprofileupdatefailed for "billing_profile_update_failed"
            /// </summary>
            [EnumMember(Value = "billing_profile_update_failed")]
            Billingprofileupdatefailed,
            
            /// <summary>
            /// Enum Billingprofileaccountnotfound for "billing_profile_account_not_found"
            /// </summary>
            [EnumMember(Value = "billing_profile_account_not_found")]
            Billingprofileaccountnotfound,
            
            /// <summary>
            /// Enum Billingprofileaccountplannotfound for "billing_profile_account_plan_not_found"
            /// </summary>
            [EnumMember(Value = "billing_profile_account_plan_not_found")]
            Billingprofileaccountplannotfound,
            
            /// <summary>
            /// Enum Billingprofileinvalidcurrency for "billing_profile_invalid_currency"
            /// </summary>
            [EnumMember(Value = "billing_profile_invalid_currency")]
            Billingprofileinvalidcurrency,
            
            /// <summary>
            /// Enum Billingprofileinvalidzuoraid for "billing_profile_invalid_zuora_id"
            /// </summary>
            [EnumMember(Value = "billing_profile_invalid_zuora_id")]
            Billingprofileinvalidzuoraid,
            
            /// <summary>
            /// Enum Billingprofileinvalidexternalbillingsystemid for "billing_profile_invalid_external_billing_system_id"
            /// </summary>
            [EnumMember(Value = "billing_profile_invalid_external_billing_system_id")]
            Billingprofileinvalidexternalbillingsystemid,
            
            /// <summary>
            /// Enum Billingprofileexternalbillingusagestartdaterequired for "billing_profile_external_billing_usage_start_date_required"
            /// </summary>
            [EnumMember(Value = "billing_profile_external_billing_usage_start_date_required")]
            Billingprofileexternalbillingusagestartdaterequired,
            
            /// <summary>
            /// Enum Billingprofileaccountbillingactiverequired for "billing_profile_accountbilling_active_required"
            /// </summary>
            [EnumMember(Value = "billing_profile_accountbilling_active_required")]
            Billingprofileaccountbillingactiverequired,
            
            /// <summary>
            /// Enum Featuredisabledinjumptomobilesession for "feature_disabled_in_jump_to_mobile_session"
            /// </summary>
            [EnumMember(Value = "feature_disabled_in_jump_to_mobile_session")]
            Featuredisabledinjumptomobilesession,
            
            /// <summary>
            /// Enum Organizationentitlementinvalidrights for "organization_entitlement_invalid_rights"
            /// </summary>
            [EnumMember(Value = "organization_entitlement_invalid_rights")]
            Organizationentitlementinvalidrights
        }

        /// <summary>
        /// The code associated with the error condition.
        /// </summary>
        /// <value>The code associated with the error condition.</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public ErrorEnum? Error { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpErrorResponse" /> class.
        /// </summary>
        /// <param name="Error">The code associated with the error condition..</param>
        /// <param name="ErrorDescription">A brief message describing the error condition..</param>
        /// <param name="ServiceErrorCode">The service error code..</param>
        /// <param name="ErrorStack">The error stacktrace..</param>
        /// <param name="ErrorInner">The previous exceptions in the call stack..</param>
        public HttpErrorResponse(ErrorEnum? Error = default(ErrorEnum?), string ErrorDescription = default(string), string ServiceErrorCode = default(string), string ErrorStack = default(string), string ErrorInner = default(string))
        {
            this.Error = Error;
            this.ErrorDescription = ErrorDescription;
            this.ServiceErrorCode = ServiceErrorCode;
            this.ErrorStack = ErrorStack;
            this.ErrorInner = ErrorInner;
        }
        
        /// <summary>
        /// A brief message describing the error condition.
        /// </summary>
        /// <value>A brief message describing the error condition.</value>
        [DataMember(Name="error_description", EmitDefaultValue=false)]
        public string ErrorDescription { get; set; }
        /// <summary>
        /// The service error code.
        /// </summary>
        /// <value>The service error code.</value>
        [DataMember(Name="service_error_code", EmitDefaultValue=false)]
        public string ServiceErrorCode { get; set; }
        /// <summary>
        /// The reference identifier corresponding to the trace token.
        /// </summary>
        /// <value>The reference identifier corresponding to the trace token.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string ReferenceId { get; private set; }
        /// <summary>
        /// The error stacktrace.
        /// </summary>
        /// <value>The error stacktrace.</value>
        [DataMember(Name="error_stack", EmitDefaultValue=false)]
        public string ErrorStack { get; set; }
        /// <summary>
        /// The previous exceptions in the call stack.
        /// </summary>
        /// <value>The previous exceptions in the call stack.</value>
        [DataMember(Name="error_inner", EmitDefaultValue=false)]
        public string ErrorInner { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HttpErrorResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("  ServiceErrorCode: ").Append(ServiceErrorCode).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ErrorStack: ").Append(ErrorStack).Append("\n");
            sb.Append("  ErrorInner: ").Append(ErrorInner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HttpErrorResponse);
        }

        /// <summary>
        /// Returns true if HttpErrorResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of HttpErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HttpErrorResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.ErrorDescription == other.ErrorDescription ||
                    this.ErrorDescription != null &&
                    this.ErrorDescription.Equals(other.ErrorDescription)
                ) && 
                (
                    this.ServiceErrorCode == other.ServiceErrorCode ||
                    this.ServiceErrorCode != null &&
                    this.ServiceErrorCode.Equals(other.ServiceErrorCode)
                ) && 
                (
                    this.ReferenceId == other.ReferenceId ||
                    this.ReferenceId != null &&
                    this.ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    this.ErrorStack == other.ErrorStack ||
                    this.ErrorStack != null &&
                    this.ErrorStack.Equals(other.ErrorStack)
                ) && 
                (
                    this.ErrorInner == other.ErrorInner ||
                    this.ErrorInner != null &&
                    this.ErrorInner.Equals(other.ErrorInner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.ErrorDescription != null)
                    hash = hash * 59 + this.ErrorDescription.GetHashCode();
                if (this.ServiceErrorCode != null)
                    hash = hash * 59 + this.ServiceErrorCode.GetHashCode();
                if (this.ReferenceId != null)
                    hash = hash * 59 + this.ReferenceId.GetHashCode();
                if (this.ErrorStack != null)
                    hash = hash * 59 + this.ErrorStack.GetHashCode();
                if (this.ErrorInner != null)
                    hash = hash * 59 + this.ErrorInner.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
