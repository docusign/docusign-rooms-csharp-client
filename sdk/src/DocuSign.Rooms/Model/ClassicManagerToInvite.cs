/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Rooms.Client.SwaggerDateConverter;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// ClassicManagerToInvite
    /// </summary>
    [DataContract]
    public partial class ClassicManagerToInvite :  IEquatable<ClassicManagerToInvite>, IValidatableObject
    {
        public ClassicManagerToInvite()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Defines AccessLevel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessLevelEnum
        {
            
            /// <summary>
            /// Enum Contributor for value: Contributor
            /// </summary>
            [EnumMember(Value = "Contributor")]
            Contributor = 1,
            
            /// <summary>
            /// Enum Office for value: Office
            /// </summary>
            [EnumMember(Value = "Office")]
            Office = 2,
            
            /// <summary>
            /// Enum Region for value: Region
            /// </summary>
            [EnumMember(Value = "Region")]
            Region = 3,
            
            /// <summary>
            /// Enum Company for value: Company
            /// </summary>
            [EnumMember(Value = "Company")]
            Company = 4,
            
            /// <summary>
            /// Enum Admin for value: Admin
            /// </summary>
            [EnumMember(Value = "Admin")]
            Admin = 5
        }

        /// <summary>
        /// Gets or Sets AccessLevel
        /// </summary>
        [DataMember(Name="accessLevel", EmitDefaultValue=false)]
        public AccessLevelEnum? AccessLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassicManagerToInvite" /> class.
        /// </summary>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="DefaultOfficeId">DefaultOfficeId (required).</param>
        /// <param name="TitleId">TitleId (required).</param>
        /// <param name="AccessLevel">AccessLevel (required).</param>
        /// <param name="Permissions">Permissions (required).</param>
        /// <param name="Offices">Offices.</param>
        /// <param name="Regions">Regions.</param>
        /// <param name="ESignPermissionProfileId">Required when the company is tightly bound to an eSign account; otherwise ignored..</param>
        public ClassicManagerToInvite(string FirstName = default(string), string LastName = default(string), string Email = default(string), int? DefaultOfficeId = default(int?), int? TitleId = default(int?), AccessLevelEnum? AccessLevel = default(AccessLevelEnum?), ClassicManagerPermissions Permissions = default(ClassicManagerPermissions), List<int?> Offices = default(List<int?>), List<int?> Regions = default(List<int?>), string ESignPermissionProfileId = default(string))
        {
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for ClassicManagerToInvite and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for ClassicManagerToInvite and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for ClassicManagerToInvite and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "DefaultOfficeId" is required (not null)
            if (DefaultOfficeId == null)
            {
                throw new InvalidDataException("DefaultOfficeId is a required property for ClassicManagerToInvite and cannot be null");
            }
            else
            {
                this.DefaultOfficeId = DefaultOfficeId;
            }
            // to ensure "TitleId" is required (not null)
            if (TitleId == null)
            {
                throw new InvalidDataException("TitleId is a required property for ClassicManagerToInvite and cannot be null");
            }
            else
            {
                this.TitleId = TitleId;
            }
            // to ensure "AccessLevel" is required (not null)
            if (AccessLevel == null)
            {
                throw new InvalidDataException("AccessLevel is a required property for ClassicManagerToInvite and cannot be null");
            }
            else
            {
                this.AccessLevel = AccessLevel;
            }
            // to ensure "Permissions" is required (not null)
            if (Permissions == null)
            {
                throw new InvalidDataException("Permissions is a required property for ClassicManagerToInvite and cannot be null");
            }
            else
            {
                this.Permissions = Permissions;
            }
            this.Offices = Offices;
            this.Regions = Regions;
            this.ESignPermissionProfileId = ESignPermissionProfileId;
        }
        
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets DefaultOfficeId
        /// </summary>
        [DataMember(Name="defaultOfficeId", EmitDefaultValue=false)]
        public int? DefaultOfficeId { get; set; }
        /// <summary>
        /// Gets or Sets TitleId
        /// </summary>
        [DataMember(Name="titleId", EmitDefaultValue=false)]
        public int? TitleId { get; set; }
        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public ClassicManagerPermissions Permissions { get; set; }
        /// <summary>
        /// Gets or Sets Offices
        /// </summary>
        [DataMember(Name="offices", EmitDefaultValue=false)]
        public List<int?> Offices { get; set; }
        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name="regions", EmitDefaultValue=false)]
        public List<int?> Regions { get; set; }
        /// <summary>
        /// Required when the company is tightly bound to an eSign account; otherwise ignored.
        /// </summary>
        /// <value>Required when the company is tightly bound to an eSign account; otherwise ignored.</value>
        [DataMember(Name="eSignPermissionProfileId", EmitDefaultValue=false)]
        public string ESignPermissionProfileId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassicManagerToInvite {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  DefaultOfficeId: ").Append(DefaultOfficeId).Append("\n");
            sb.Append("  TitleId: ").Append(TitleId).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Offices: ").Append(Offices).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  ESignPermissionProfileId: ").Append(ESignPermissionProfileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClassicManagerToInvite);
        }

        /// <summary>
        /// Returns true if ClassicManagerToInvite instances are equal
        /// </summary>
        /// <param name="other">Instance of ClassicManagerToInvite to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassicManagerToInvite other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.DefaultOfficeId == other.DefaultOfficeId ||
                    this.DefaultOfficeId != null &&
                    this.DefaultOfficeId.Equals(other.DefaultOfficeId)
                ) && 
                (
                    this.TitleId == other.TitleId ||
                    this.TitleId != null &&
                    this.TitleId.Equals(other.TitleId)
                ) && 
                (
                    this.AccessLevel == other.AccessLevel ||
                    this.AccessLevel != null &&
                    this.AccessLevel.Equals(other.AccessLevel)
                ) && 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.Equals(other.Permissions)
                ) && 
                (
                    this.Offices == other.Offices ||
                    this.Offices != null &&
                    this.Offices.SequenceEqual(other.Offices)
                ) && 
                (
                    this.Regions == other.Regions ||
                    this.Regions != null &&
                    this.Regions.SequenceEqual(other.Regions)
                ) && 
                (
                    this.ESignPermissionProfileId == other.ESignPermissionProfileId ||
                    this.ESignPermissionProfileId != null &&
                    this.ESignPermissionProfileId.Equals(other.ESignPermissionProfileId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.DefaultOfficeId != null)
                    hash = hash * 59 + this.DefaultOfficeId.GetHashCode();
                if (this.TitleId != null)
                    hash = hash * 59 + this.TitleId.GetHashCode();
                if (this.AccessLevel != null)
                    hash = hash * 59 + this.AccessLevel.GetHashCode();
                if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                if (this.Offices != null)
                    hash = hash * 59 + this.Offices.GetHashCode();
                if (this.Regions != null)
                    hash = hash * 59 + this.Regions.GetHashCode();
                if (this.ESignPermissionProfileId != null)
                    hash = hash * 59 + this.ESignPermissionProfileId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
