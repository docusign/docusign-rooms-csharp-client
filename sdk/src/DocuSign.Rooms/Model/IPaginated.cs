/* 
 * ProofService API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Interface defining the paging properties.
    /// </summary>
    [DataContract]
    public partial class IPaginated :  IEquatable<IPaginated>, IValidatableObject
    {
        public IPaginated()
        {
            // Empty Constructor
        }

        /// <summary>
        /// The index position of the page.
        /// </summary>
        /// <value>The index position of the page.</value>
        [DataMember(Name="pageIndex", EmitDefaultValue=false)]
        public int? PageIndex { get; private set; }
        /// <summary>
        /// The size of the page.
        /// </summary>
        /// <value>The size of the page.</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int? PageSize { get; private set; }
        /// <summary>
        /// The total number of pages in the response.
        /// </summary>
        /// <value>The total number of pages in the response.</value>
        [DataMember(Name="totalPages", EmitDefaultValue=false)]
        public int? TotalPages { get; private set; }
        /// <summary>
        /// The total number of items responding to the request.
        /// </summary>
        /// <value>The total number of items responding to the request.</value>
        [DataMember(Name="totalItems", EmitDefaultValue=false)]
        public int? TotalItems { get; private set; }
        /// <summary>
        /// Indicates whether this object can call a previous page.
        /// </summary>
        /// <value>Indicates whether this object can call a previous page.</value>
        [DataMember(Name="hasPreviousPage", EmitDefaultValue=false)]
        public bool? HasPreviousPage { get; private set; }
        /// <summary>
        /// Indicates whether this object can call a next page.
        /// </summary>
        /// <value>Indicates whether this object can call a next page.</value>
        [DataMember(Name="hasNextPage", EmitDefaultValue=false)]
        public bool? HasNextPage { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IPaginated {\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  TotalItems: ").Append(TotalItems).Append("\n");
            sb.Append("  HasPreviousPage: ").Append(HasPreviousPage).Append("\n");
            sb.Append("  HasNextPage: ").Append(HasNextPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IPaginated);
        }

        /// <summary>
        /// Returns true if IPaginated instances are equal
        /// </summary>
        /// <param name="other">Instance of IPaginated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IPaginated other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PageIndex == other.PageIndex ||
                    this.PageIndex != null &&
                    this.PageIndex.Equals(other.PageIndex)
                ) && 
                (
                    this.PageSize == other.PageSize ||
                    this.PageSize != null &&
                    this.PageSize.Equals(other.PageSize)
                ) && 
                (
                    this.TotalPages == other.TotalPages ||
                    this.TotalPages != null &&
                    this.TotalPages.Equals(other.TotalPages)
                ) && 
                (
                    this.TotalItems == other.TotalItems ||
                    this.TotalItems != null &&
                    this.TotalItems.Equals(other.TotalItems)
                ) && 
                (
                    this.HasPreviousPage == other.HasPreviousPage ||
                    this.HasPreviousPage != null &&
                    this.HasPreviousPage.Equals(other.HasPreviousPage)
                ) && 
                (
                    this.HasNextPage == other.HasNextPage ||
                    this.HasNextPage != null &&
                    this.HasNextPage.Equals(other.HasNextPage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PageIndex != null)
                    hash = hash * 59 + this.PageIndex.GetHashCode();
                if (this.PageSize != null)
                    hash = hash * 59 + this.PageSize.GetHashCode();
                if (this.TotalPages != null)
                    hash = hash * 59 + this.TotalPages.GetHashCode();
                if (this.TotalItems != null)
                    hash = hash * 59 + this.TotalItems.GetHashCode();
                if (this.HasPreviousPage != null)
                    hash = hash * 59 + this.HasPreviousPage.GetHashCode();
                if (this.HasNextPage != null)
                    hash = hash * 59 + this.HasNextPage.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
