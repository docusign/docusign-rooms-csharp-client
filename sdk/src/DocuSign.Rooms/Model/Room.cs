/* 
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = DocuSign.Rooms.Client.SwaggerDateConverter;

namespace DocuSign.Rooms.Model
{
    /// <summary>
    /// Room
    /// </summary>
    [DataContract]
    public partial class Room :  IEquatable<Room>, IValidatableObject
    {
        public Room()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Room" /> class.
        /// </summary>
        /// <param name="RoomId">RoomId.</param>
        /// <param name="CompanyId">CompanyId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="OfficeId">OfficeId.</param>
        /// <param name="CreatedDate">CreatedDate.</param>
        /// <param name="SubmittedForReviewDate">SubmittedForReviewDate.</param>
        /// <param name="ClosedDate">ClosedDate.</param>
        /// <param name="RejectedDate">RejectedDate.</param>
        /// <param name="CreatedByUserId">CreatedByUserId.</param>
        /// <param name="RejectedByUserId">RejectedByUserId.</param>
        /// <param name="ClosedStatusId">ClosedStatusId.</param>
        /// <param name="FieldData">FieldData.</param>
        public Room(int? RoomId = default(int?), int? CompanyId = default(int?), string Name = default(string), int? OfficeId = default(int?), DateTime CreatedDate = default(DateTime), DateTime SubmittedForReviewDate = default(DateTime), DateTime ClosedDate = default(DateTime), DateTime RejectedDate = default(DateTime), int? CreatedByUserId = default(int?), int? RejectedByUserId = default(int?), string ClosedStatusId = default(string), NullableFieldData FieldData = default(NullableFieldData))
        {
            this.RoomId = RoomId;
            this.CompanyId = CompanyId;
            this.Name = Name;
            this.OfficeId = OfficeId;
            this.CreatedDate = CreatedDate;
            this.SubmittedForReviewDate = SubmittedForReviewDate;
            this.ClosedDate = ClosedDate;
            this.RejectedDate = RejectedDate;
            this.CreatedByUserId = CreatedByUserId;
            this.RejectedByUserId = RejectedByUserId;
            this.ClosedStatusId = ClosedStatusId;
            this.FieldData = FieldData;
        }
        
        /// <summary>
        /// Gets or Sets RoomId
        /// </summary>
        [DataMember(Name="roomId", EmitDefaultValue=false)]
        public int? RoomId { get; set; }
        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets OfficeId
        /// </summary>
        [DataMember(Name="officeId", EmitDefaultValue=false)]
        public int? OfficeId { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets SubmittedForReviewDate
        /// </summary>
        [DataMember(Name="submittedForReviewDate", EmitDefaultValue=false)]
        public DateTime SubmittedForReviewDate { get; set; }
        /// <summary>
        /// Gets or Sets ClosedDate
        /// </summary>
        [DataMember(Name="closedDate", EmitDefaultValue=false)]
        public DateTime ClosedDate { get; set; }
        /// <summary>
        /// Gets or Sets RejectedDate
        /// </summary>
        [DataMember(Name="rejectedDate", EmitDefaultValue=false)]
        public DateTime RejectedDate { get; set; }
        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public int? CreatedByUserId { get; set; }
        /// <summary>
        /// Gets or Sets RejectedByUserId
        /// </summary>
        [DataMember(Name="rejectedByUserId", EmitDefaultValue=false)]
        public int? RejectedByUserId { get; set; }
        /// <summary>
        /// Gets or Sets ClosedStatusId
        /// </summary>
        [DataMember(Name="closedStatusId", EmitDefaultValue=false)]
        public string ClosedStatusId { get; set; }
        /// <summary>
        /// Gets or Sets FieldData
        /// </summary>
        [DataMember(Name="fieldData", EmitDefaultValue=false)]
        public NullableFieldData FieldData { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Room {\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OfficeId: ").Append(OfficeId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  SubmittedForReviewDate: ").Append(SubmittedForReviewDate).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  RejectedDate: ").Append(RejectedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  RejectedByUserId: ").Append(RejectedByUserId).Append("\n");
            sb.Append("  ClosedStatusId: ").Append(ClosedStatusId).Append("\n");
            sb.Append("  FieldData: ").Append(FieldData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Room);
        }

        /// <summary>
        /// Returns true if Room instances are equal
        /// </summary>
        /// <param name="other">Instance of Room to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Room other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RoomId == other.RoomId ||
                    this.RoomId != null &&
                    this.RoomId.Equals(other.RoomId)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OfficeId == other.OfficeId ||
                    this.OfficeId != null &&
                    this.OfficeId.Equals(other.OfficeId)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.SubmittedForReviewDate == other.SubmittedForReviewDate ||
                    this.SubmittedForReviewDate != null &&
                    this.SubmittedForReviewDate.Equals(other.SubmittedForReviewDate)
                ) && 
                (
                    this.ClosedDate == other.ClosedDate ||
                    this.ClosedDate != null &&
                    this.ClosedDate.Equals(other.ClosedDate)
                ) && 
                (
                    this.RejectedDate == other.RejectedDate ||
                    this.RejectedDate != null &&
                    this.RejectedDate.Equals(other.RejectedDate)
                ) && 
                (
                    this.CreatedByUserId == other.CreatedByUserId ||
                    this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    this.RejectedByUserId == other.RejectedByUserId ||
                    this.RejectedByUserId != null &&
                    this.RejectedByUserId.Equals(other.RejectedByUserId)
                ) && 
                (
                    this.ClosedStatusId == other.ClosedStatusId ||
                    this.ClosedStatusId != null &&
                    this.ClosedStatusId.Equals(other.ClosedStatusId)
                ) && 
                (
                    this.FieldData == other.FieldData ||
                    this.FieldData != null &&
                    this.FieldData.Equals(other.FieldData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RoomId != null)
                    hash = hash * 59 + this.RoomId.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.OfficeId != null)
                    hash = hash * 59 + this.OfficeId.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.SubmittedForReviewDate != null)
                    hash = hash * 59 + this.SubmittedForReviewDate.GetHashCode();
                if (this.ClosedDate != null)
                    hash = hash * 59 + this.ClosedDate.GetHashCode();
                if (this.RejectedDate != null)
                    hash = hash * 59 + this.RejectedDate.GetHashCode();
                if (this.CreatedByUserId != null)
                    hash = hash * 59 + this.CreatedByUserId.GetHashCode();
                if (this.RejectedByUserId != null)
                    hash = hash * 59 + this.RejectedByUserId.GetHashCode();
                if (this.ClosedStatusId != null)
                    hash = hash * 59 + this.ClosedStatusId.GetHashCode();
                if (this.FieldData != null)
                    hash = hash * 59 + this.FieldData.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}
